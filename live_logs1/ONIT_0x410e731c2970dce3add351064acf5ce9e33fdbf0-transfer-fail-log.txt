This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:47:36,712 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:47:36,713 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:47:36,723 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:47:36,723 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:47:36,724 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:47:36,725 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:47:36,726 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:47:36,727 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:47:36,728 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:47:36,729 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:47:36,729 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:47:36,729 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:47:36,730 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:47:36,731 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:47:36,732 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:47:36,732 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:47:36,733 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:47:36,734 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:47:36,736 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:47:36,736 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:47:36,737 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:47:36,739 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:47:36,739 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:47:36,739 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:47:36,739 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:47:36,740 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:47:36,740 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:47:36,741 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:47:36,741 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:47:36,741 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:47:36,742 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:47:36,742 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:47:36,743 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:47:36,743 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:47:36,743 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:47:36,744 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:47:36,744 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:47:36,744 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:47:36,745 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:47:36,745 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:47:36,746 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:47:36,753 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:47:36,753 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:47:36,754 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:47:36,754 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:47:36,754 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:47:36,754 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:47:36,754 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:47:36,754 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:47:36,755 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:47:36,755 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:47:36,755 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:47:36,755 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:47:36,755 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:47:36,755 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:47:36,755 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:47:36,755 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:47:36,756 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:47:36,756 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:47:36,757 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:47:36,776 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:47:36,788 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:47:36,791 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:47:36,792 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:47:36,793 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:47:36,793 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl
[2020-11-25 02:47:36,793 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl'
[2020-11-25 02:47:36,926 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:47:36,927 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:47:36,928 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:47:36,928 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:47:36,928 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:47:36,945 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:36,947 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,008 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,009 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,049 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,072 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,089 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,111 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:47:37,112 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:47:37,112 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:47:37,114 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:47:37,118 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/1) ...
[2020-11-25 02:47:37,146 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ONIT.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transfer)))
[2020-11-25 02:47:37,152 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ONIT.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transfer)))
[2020-11-25 02:47:37,159 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ONIT.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transfer)))
[2020-11-25 02:47:37,169 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s1288 && ( value_s1288>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][to_s1288] + value_s1288 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1288]>=0 ) && _balances_ERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:47:37,178 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ONIT.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ONIT.transfer)))
[2020-11-25 02:47:37,178 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ONIT0) ==> ( <>AP(fail_transfer_ONIT0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:47:37,201 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:47:37 PropertyContainer
[2020-11-25 02:47:37,201 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:47:37,201 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:47:37,202 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:47:37,202 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:47:37,203 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/2) ...
[2020-11-25 02:47:37,203 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:47:37,203 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:47:37,231 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:47:37" (2/2) ...
[2020-11-25 02:47:37,231 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:47:37,231 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:47:37,231 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:47:37,231 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:47:37,232 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/2) ...
[2020-11-25 02:47:37,287 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:47:37,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,288 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:47:37,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:47:37,289 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:47:37,290 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:47:37,290 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:47:37,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:47:37,290 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:47:37,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:47:37,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:47:37,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:47:37,290 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:47:37,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:47:37,291 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:47:37,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:47:37,291 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:47:37,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:47:37,291 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:47:37,291 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:47:37,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:47:37,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:47:37,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:47:37,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:47:37,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:47:37,292 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:47:37,293 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:47:37,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:47:37,293 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:47:37,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:47:37,293 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:47:37,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:47:37,293 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:47:37,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:47:37,293 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:47:37,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:47:37,294 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:47:37,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:47:37,295 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:47:37,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:47:37,295 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:47:37,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:47:37,295 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:47:37,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:47:37,295 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:47:37,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:47:37,295 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:47:37,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:47:37,296 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:47:37,297 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:47:37,297 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:47:37,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:47:37,297 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:47:37,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:47:37,297 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:47:37,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:47:37,297 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:47:37,297 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:47:37,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:47:37,298 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:47:37,298 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:47:37,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:47:37,298 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:47:37,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:47:37,299 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:47:37,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:47:37,299 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:47:37,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:47:37,299 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:47:37,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:47:37,299 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:47:37,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:47:37,299 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:47:37,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:47:37,300 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:47:37,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:47:37,300 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:47:37,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:47:37,300 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:47:37,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:47:37,300 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:47:37,300 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:47:37,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:47:37,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:47:37,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:47:37,301 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:47:37,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:47:37,302 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:47:37,303 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:47:37,303 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:47:37,303 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:47:37,303 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:47:37,303 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:47:37,303 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:47:37,304 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:47:37,305 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:47:37,306 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:47:37,307 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:47:37,308 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:47:37,309 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:47:37,310 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:47:37,311 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:47:37,312 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:47:37,313 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:47:37,314 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:47:37,315 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:47:37,315 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:47:37,315 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:47:37,315 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:47:37,315 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:47:37,315 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:47:37,316 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:47:37,317 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:47:37,318 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:47:37,318 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:47:37,318 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:47:37,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:47:37,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:47:37,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:47:37,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:47:37,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:47:37,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:47:37,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:47:37,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:47:37,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:47:37,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:47:37,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:47:37,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:47:37,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:47:37,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:47:37,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:47:37,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:47:37,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:47:37,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:47:37,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:47:37,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:47:37,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:47:37,641 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:47:37,641 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:47:38,575 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:47:38,575 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:47:38,578 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:47:38 BoogieIcfgContainer
[2020-11-25 02:47:38,578 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:47:37" (2/2) ...
[2020-11-25 02:47:38,578 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:47:38,578 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1758c707 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:47:38, skipping insertion in model container
[2020-11-25 02:47:38,578 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:47:38,578 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:47:38,578 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:47:38,579 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:47:38,580 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/3) ...
[2020-11-25 02:47:38,580 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7c7422a7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:47:38, skipping insertion in model container
[2020-11-25 02:47:38,580 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:47:37" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:47:38,612 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:47:38 NWAContainer
[2020-11-25 02:47:38,612 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:47:38,613 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:47:38,613 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:47:38,613 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:47:38,614 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:47:38" (3/4) ...
[2020-11-25 02:47:38,614 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@37a156e5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:47:38, skipping insertion in model container
[2020-11-25 02:47:38,614 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:47:38" (4/4) ...
[2020-11-25 02:47:38,616 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:47:38,622 INFO  L110   BuchiProductObserver]: Initial RCFG 4677 locations, 6463 edges
[2020-11-25 02:47:38,622 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:47:38,635 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:47:41,938 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:47:41,952 INFO  L110   BuchiProductObserver]: BuchiProgram size 11610 locations, 21023 edges
[2020-11-25 02:47:41,952 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:47:41 BoogieIcfgContainer
[2020-11-25 02:47:41,952 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:47:41,952 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:47:41,953 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:47:41,954 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:47:41,954 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:47:41" (1/1) ...
[2020-11-25 02:47:42,145 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:47:42,146 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:47:42,170 INFO  L313           BlockEncoder]: Initial Icfg 11610 locations, 21023 edges
[2020-11-25 02:47:42,171 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:47:42,171 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:47:42,171 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:47:42,172 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:47:42,195 INFO  L70    emoveInfeasibleEdges]: Removed 225 edges and 25 locations because of local infeasibility
[2020-11-25 02:47:42,216 INFO  L70        RemoveSinkStates]: Removed 312 edges and 173 locations by removing sink states
[2020-11-25 02:47:42,247 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:47:42,255 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:47:42,262 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:47:42,262 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:47:42,267 INFO  L313           BlockEncoder]: Encoded RCFG 11358 locations, 20406 edges
[2020-11-25 02:47:42,267 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:47:42 BasicIcfg
[2020-11-25 02:47:42,268 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:47:42,268 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:47:42,268 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:47:42,269 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:47:42,270 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:47:42,270 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:47:36" (1/6) ...
[2020-11-25 02:47:42,271 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@50b9a8a4 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:47:42, skipping insertion in model container
[2020-11-25 02:47:42,271 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:47:42,271 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:47:37" (2/6) ...
[2020-11-25 02:47:42,271 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@50b9a8a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:47:42, skipping insertion in model container
[2020-11-25 02:47:42,271 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:47:42,272 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:47:38" (3/6) ...
[2020-11-25 02:47:42,272 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@50b9a8a4 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:47:42, skipping insertion in model container
[2020-11-25 02:47:42,272 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:47:42,272 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:47:38" (4/6) ...
[2020-11-25 02:47:42,272 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@50b9a8a4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:47:42, skipping insertion in model container
[2020-11-25 02:47:42,272 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:47:42,272 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:47:41" (5/6) ...
[2020-11-25 02:47:42,272 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@50b9a8a4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:47:42, skipping insertion in model container
[2020-11-25 02:47:42,273 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:47:42,273 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:47:42" (6/6) ...
[2020-11-25 02:47:42,273 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transfer-fail.bpl_BEv2
[2020-11-25 02:47:42,307 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:47:42,307 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:47:42,307 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:47:42,307 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:47:42,307 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:47:42,307 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:47:42,307 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:47:42,307 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:47:42,307 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:47:42,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11358 states.
[2020-11-25 02:47:42,507 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:47:42,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:42,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:42,515 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:42,515 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:42,515 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:47:42,515 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11358 states.
[2020-11-25 02:47:42,554 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:47:42,554 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:42,554 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:42,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:42,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:42,573 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:42,573 INFO  L82        PathProgramCache]: Analyzing trace with hash -1938998933, now seen corresponding path program 1 times
[2020-11-25 02:47:42,578 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:42,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:42,641 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:47:42,643 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:42,643 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:47:43,057 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:43,065 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:47:43,065 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:47:43,066 INFO  L87              Difference]: Start difference. First operand 11358 states. Second operand 4 states.
[2020-11-25 02:47:44,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:44,169 INFO  L93              Difference]: Finished difference Result 7045 states and 8226 transitions.
[2020-11-25 02:47:44,169 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:47:44,171 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7045 states and 8226 transitions.
[2020-11-25 02:47:44,203 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:47:44,242 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7045 states to 7045 states and 8226 transitions.
[2020-11-25 02:47:44,242 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 02:47:44,245 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1322
[2020-11-25 02:47:44,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7045 states and 8226 transitions.
[2020-11-25 02:47:44,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:44,260 INFO  L728         BuchiCegarLoop]: Abstraction has 7045 states and 8226 transitions.
[2020-11-25 02:47:44,281 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7045 states and 8226 transitions.
[2020-11-25 02:47:44,373 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7045 to 7045.
[2020-11-25 02:47:44,374 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7045 states.
[2020-11-25 02:47:44,386 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7045 states to 7045 states and 8226 transitions.
[2020-11-25 02:47:44,387 INFO  L751         BuchiCegarLoop]: Abstraction has 7045 states and 8226 transitions.
[2020-11-25 02:47:44,387 INFO  L631         BuchiCegarLoop]: Abstraction has 7045 states and 8226 transitions.
[2020-11-25 02:47:44,387 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:47:44,387 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7045 states and 8226 transitions.
[2020-11-25 02:47:44,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:47:44,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:44,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:44,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:44,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:44,404 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:44,404 INFO  L82        PathProgramCache]: Analyzing trace with hash 342984181, now seen corresponding path program 1 times
[2020-11-25 02:47:44,405 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:44,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:44,440 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:47:44,441 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:44,441 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:47:44,442 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:44,442 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:47:44,442 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:47:44,442 INFO  L87              Difference]: Start difference. First operand 7045 states and 8226 transitions. cyclomatic complexity: 1190 Second operand 3 states.
[2020-11-25 02:47:44,694 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:44,694 INFO  L93              Difference]: Finished difference Result 8998 states and 10497 transitions.
[2020-11-25 02:47:44,694 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:47:44,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8998 states and 10497 transitions.
[2020-11-25 02:47:44,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:44,762 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8998 states to 8998 states and 10497 transitions.
[2020-11-25 02:47:44,762 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1819
[2020-11-25 02:47:44,763 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1819
[2020-11-25 02:47:44,764 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8998 states and 10497 transitions.
[2020-11-25 02:47:44,773 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:44,773 INFO  L728         BuchiCegarLoop]: Abstraction has 8998 states and 10497 transitions.
[2020-11-25 02:47:44,783 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8998 states and 10497 transitions.
[2020-11-25 02:47:44,870 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8998 to 8134.
[2020-11-25 02:47:44,870 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8134 states.
[2020-11-25 02:47:44,881 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8134 states to 8134 states and 9458 transitions.
[2020-11-25 02:47:44,881 INFO  L751         BuchiCegarLoop]: Abstraction has 8134 states and 9458 transitions.
[2020-11-25 02:47:44,881 INFO  L631         BuchiCegarLoop]: Abstraction has 8134 states and 9458 transitions.
[2020-11-25 02:47:44,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:47:44,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8134 states and 9458 transitions.
[2020-11-25 02:47:44,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:44,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:44,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:44,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:44,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND TRUE   !(account_s164 != null)
[L5838]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:44,898 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:44,899 INFO  L82        PathProgramCache]: Analyzing trace with hash 1670841923, now seen corresponding path program 1 times
[2020-11-25 02:47:44,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:44,910 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:44,975 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:47:44,976 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:44,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:47:44,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:44,976 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:47:44,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:47:44,977 INFO  L87              Difference]: Start difference. First operand 8134 states and 9458 transitions. cyclomatic complexity: 1333 Second operand 9 states.
[2020-11-25 02:47:45,156 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:45,156 INFO  L93              Difference]: Finished difference Result 8180 states and 9533 transitions.
[2020-11-25 02:47:45,156 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:47:45,156 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8180 states and 9533 transitions.
[2020-11-25 02:47:45,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:45,206 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8180 states to 8180 states and 9533 transitions.
[2020-11-25 02:47:45,206 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1679
[2020-11-25 02:47:45,207 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1679
[2020-11-25 02:47:45,207 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8180 states and 9533 transitions.
[2020-11-25 02:47:45,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:45,215 INFO  L728         BuchiCegarLoop]: Abstraction has 8180 states and 9533 transitions.
[2020-11-25 02:47:45,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8180 states and 9533 transitions.
[2020-11-25 02:47:45,298 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8180 to 8171.
[2020-11-25 02:47:45,298 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8171 states.
[2020-11-25 02:47:45,309 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8171 states to 8171 states and 9517 transitions.
[2020-11-25 02:47:45,309 INFO  L751         BuchiCegarLoop]: Abstraction has 8171 states and 9517 transitions.
[2020-11-25 02:47:45,309 INFO  L631         BuchiCegarLoop]: Abstraction has 8171 states and 9517 transitions.
[2020-11-25 02:47:45,309 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:47:45,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8171 states and 9517 transitions.
[2020-11-25 02:47:45,322 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:45,322 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:45,323 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:45,325 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:45,325 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND TRUE   !(account_s218 != null)
[L5909]               revert := true;
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND TRUE   revert
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:45,330 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:45,330 INFO  L82        PathProgramCache]: Analyzing trace with hash -1289693576, now seen corresponding path program 1 times
[2020-11-25 02:47:45,331 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:45,342 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:45,462 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:47:45,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:45,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:47:45,463 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:45,463 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:47:45,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:47:45,464 INFO  L87              Difference]: Start difference. First operand 8171 states and 9517 transitions. cyclomatic complexity: 1355 Second operand 10 states.
[2020-11-25 02:47:45,581 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:45,581 INFO  L93              Difference]: Finished difference Result 8231 states and 9608 transitions.
[2020-11-25 02:47:45,581 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:47:45,581 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8231 states and 9608 transitions.
[2020-11-25 02:47:45,597 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:45,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8231 states to 8231 states and 9608 transitions.
[2020-11-25 02:47:45,618 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1686
[2020-11-25 02:47:45,619 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1686
[2020-11-25 02:47:45,619 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8231 states and 9608 transitions.
[2020-11-25 02:47:45,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:45,625 INFO  L728         BuchiCegarLoop]: Abstraction has 8231 states and 9608 transitions.
[2020-11-25 02:47:45,631 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8231 states and 9608 transitions.
[2020-11-25 02:47:45,674 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8231 to 8178.
[2020-11-25 02:47:45,674 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8178 states.
[2020-11-25 02:47:45,682 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8178 states to 8178 states and 9525 transitions.
[2020-11-25 02:47:45,682 INFO  L751         BuchiCegarLoop]: Abstraction has 8178 states and 9525 transitions.
[2020-11-25 02:47:45,682 INFO  L631         BuchiCegarLoop]: Abstraction has 8178 states and 9525 transitions.
[2020-11-25 02:47:45,682 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:47:45,682 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8178 states and 9525 transitions.
[2020-11-25 02:47:45,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:45,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:45,691 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:45,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:45,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND TRUE   !!__var_2
[L5846]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10932]              revert := true;
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:45,696 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:45,696 INFO  L82        PathProgramCache]: Analyzing trace with hash -1031362243, now seen corresponding path program 1 times
[2020-11-25 02:47:45,697 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:45,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:45,741 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:47:45,742 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:45,742 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:47:45,742 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:45,742 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:47:45,742 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:47:45,742 INFO  L87              Difference]: Start difference. First operand 8178 states and 9525 transitions. cyclomatic complexity: 1356 Second operand 3 states.
[2020-11-25 02:47:45,855 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:45,855 INFO  L93              Difference]: Finished difference Result 9027 states and 10209 transitions.
[2020-11-25 02:47:45,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:47:45,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9027 states and 10209 transitions.
[2020-11-25 02:47:45,872 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:45,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9027 states to 8333 states and 9387 transitions.
[2020-11-25 02:47:45,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1610
[2020-11-25 02:47:45,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1655
[2020-11-25 02:47:45,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8333 states and 9387 transitions.
[2020-11-25 02:47:45,897 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:45,897 INFO  L728         BuchiCegarLoop]: Abstraction has 8333 states and 9387 transitions.
[2020-11-25 02:47:45,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8333 states and 9387 transitions.
[2020-11-25 02:47:45,943 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8333 to 7646.
[2020-11-25 02:47:45,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7646 states.
[2020-11-25 02:47:45,951 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7646 states to 7646 states and 8525 transitions.
[2020-11-25 02:47:45,951 INFO  L751         BuchiCegarLoop]: Abstraction has 7646 states and 8525 transitions.
[2020-11-25 02:47:45,951 INFO  L631         BuchiCegarLoop]: Abstraction has 7646 states and 8525 transitions.
[2020-11-25 02:47:45,951 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:47:45,951 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7646 states and 8525 transitions.
[2020-11-25 02:47:45,959 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:45,959 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:45,959 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:45,963 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:45,963 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND FALSE  !(DType[this] == ONIT)
[L7183]   COND TRUE   DType[this] == ERC20Pausable
[L7184]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND TRUE   DType[this] == ERC20Pausable
[L6667]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6667]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6668]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7184]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7185]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND FALSE  !(DType[this] == ONIT)
[L7183]   COND TRUE   DType[this] == ERC20Pausable
[L7184]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND TRUE   DType[this] == ERC20Pausable
[L6667]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6667]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6668]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7184]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7185]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:45,971 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:45,972 INFO  L82        PathProgramCache]: Analyzing trace with hash -259613454, now seen corresponding path program 1 times
[2020-11-25 02:47:45,973 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:45,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:46,175 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 02:47:46,176 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:46,176 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:47:46,176 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:46,176 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:47:46,177 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:47:46,177 INFO  L87              Difference]: Start difference. First operand 7646 states and 8525 transitions. cyclomatic complexity: 888 Second operand 7 states.
[2020-11-25 02:47:46,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:46,295 INFO  L93              Difference]: Finished difference Result 7669 states and 8552 transitions.
[2020-11-25 02:47:46,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:47:46,295 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7669 states and 8552 transitions.
[2020-11-25 02:47:46,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:46,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7669 states to 7652 states and 8532 transitions.
[2020-11-25 02:47:46,324 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1588
[2020-11-25 02:47:46,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1588
[2020-11-25 02:47:46,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7652 states and 8532 transitions.
[2020-11-25 02:47:46,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:46,329 INFO  L728         BuchiCegarLoop]: Abstraction has 7652 states and 8532 transitions.
[2020-11-25 02:47:46,334 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7652 states and 8532 transitions.
[2020-11-25 02:47:46,369 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7652 to 7652.
[2020-11-25 02:47:46,370 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7652 states.
[2020-11-25 02:47:46,377 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7652 states to 7652 states and 8532 transitions.
[2020-11-25 02:47:46,377 INFO  L751         BuchiCegarLoop]: Abstraction has 7652 states and 8532 transitions.
[2020-11-25 02:47:46,377 INFO  L631         BuchiCegarLoop]: Abstraction has 7652 states and 8532 transitions.
[2020-11-25 02:47:46,377 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:47:46,377 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7652 states and 8532 transitions.
[2020-11-25 02:47:46,384 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:46,384 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:46,384 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:46,386 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:46,387 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND FALSE  !(DType[this] == ONIT)
[L7183]   COND TRUE   DType[this] == ERC20Pausable
[L7184]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7184]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7185]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND FALSE  !(DType[this] == ONIT)
[L7183]   COND TRUE   DType[this] == ERC20Pausable
[L7184]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7184]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7185]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:46,392 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:46,393 INFO  L82        PathProgramCache]: Analyzing trace with hash 476827649, now seen corresponding path program 1 times
[2020-11-25 02:47:46,393 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:46,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:46,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:47:46,612 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:46,613 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:47:46,614 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:46,614 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:47:46,614 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:47:46,614 INFO  L87              Difference]: Start difference. First operand 7652 states and 8532 transitions. cyclomatic complexity: 889 Second operand 7 states.
[2020-11-25 02:47:46,757 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:46,757 INFO  L93              Difference]: Finished difference Result 7682 states and 8561 transitions.
[2020-11-25 02:47:46,757 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:47:46,757 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7682 states and 8561 transitions.
[2020-11-25 02:47:46,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:46,786 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7682 states to 7642 states and 8518 transitions.
[2020-11-25 02:47:46,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1586
[2020-11-25 02:47:46,787 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1586
[2020-11-25 02:47:46,787 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7642 states and 8518 transitions.
[2020-11-25 02:47:46,790 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:46,790 INFO  L728         BuchiCegarLoop]: Abstraction has 7642 states and 8518 transitions.
[2020-11-25 02:47:46,796 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7642 states and 8518 transitions.
[2020-11-25 02:47:46,837 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7642 to 7642.
[2020-11-25 02:47:46,837 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7642 states.
[2020-11-25 02:47:46,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7642 states to 7642 states and 8518 transitions.
[2020-11-25 02:47:46,846 INFO  L751         BuchiCegarLoop]: Abstraction has 7642 states and 8518 transitions.
[2020-11-25 02:47:46,846 INFO  L631         BuchiCegarLoop]: Abstraction has 7642 states and 8518 transitions.
[2020-11-25 02:47:46,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:47:46,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7642 states and 8518 transitions.
[2020-11-25 02:47:46,877 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:46,877 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:46,877 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:46,882 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:46,882 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:46,893 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:46,893 INFO  L82        PathProgramCache]: Analyzing trace with hash 1834677626, now seen corresponding path program 1 times
[2020-11-25 02:47:46,894 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:46,917 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:47,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 02:47:47,184 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:47,184 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:47:47,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:47,185 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:47:47,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:47:47,185 INFO  L87              Difference]: Start difference. First operand 7642 states and 8518 transitions. cyclomatic complexity: 885 Second operand 8 states.
[2020-11-25 02:47:47,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:47,308 INFO  L93              Difference]: Finished difference Result 7663 states and 8542 transitions.
[2020-11-25 02:47:47,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:47:47,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7663 states and 8542 transitions.
[2020-11-25 02:47:47,319 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:47,331 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7663 states to 7649 states and 8526 transitions.
[2020-11-25 02:47:47,331 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1586
[2020-11-25 02:47:47,332 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1586
[2020-11-25 02:47:47,332 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7649 states and 8526 transitions.
[2020-11-25 02:47:47,336 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:47,336 INFO  L728         BuchiCegarLoop]: Abstraction has 7649 states and 8526 transitions.
[2020-11-25 02:47:47,341 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7649 states and 8526 transitions.
[2020-11-25 02:47:47,376 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7649 to 7649.
[2020-11-25 02:47:47,376 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7649 states.
[2020-11-25 02:47:47,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7649 states to 7649 states and 8526 transitions.
[2020-11-25 02:47:47,383 INFO  L751         BuchiCegarLoop]: Abstraction has 7649 states and 8526 transitions.
[2020-11-25 02:47:47,383 INFO  L631         BuchiCegarLoop]: Abstraction has 7649 states and 8526 transitions.
[2020-11-25 02:47:47,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:47:47,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7649 states and 8526 transitions.
[2020-11-25 02:47:47,392 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:47,392 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:47,392 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:47,396 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:47,396 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND TRUE   DType[this] == ERC20Pausable
[L6667]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6667]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6668]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND TRUE   DType[this] == ERC20Pausable
[L6667]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6667]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6668]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:47,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:47,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -280933302, now seen corresponding path program 1 times
[2020-11-25 02:47:47,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:47,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:47,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 02:47:47,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:47,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:47:47,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:47,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:47:47,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:47:47,605 INFO  L87              Difference]: Start difference. First operand 7649 states and 8526 transitions. cyclomatic complexity: 886 Second operand 8 states.
[2020-11-25 02:47:47,729 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:47,729 INFO  L93              Difference]: Finished difference Result 7670 states and 8550 transitions.
[2020-11-25 02:47:47,729 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:47:47,729 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7670 states and 8550 transitions.
[2020-11-25 02:47:47,741 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:47,752 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7670 states to 7649 states and 8525 transitions.
[2020-11-25 02:47:47,753 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1586
[2020-11-25 02:47:47,753 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1586
[2020-11-25 02:47:47,753 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7649 states and 8525 transitions.
[2020-11-25 02:47:47,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:47,757 INFO  L728         BuchiCegarLoop]: Abstraction has 7649 states and 8525 transitions.
[2020-11-25 02:47:47,763 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7649 states and 8525 transitions.
[2020-11-25 02:47:47,795 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7649 to 7649.
[2020-11-25 02:47:47,795 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7649 states.
[2020-11-25 02:47:47,802 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7649 states to 7649 states and 8525 transitions.
[2020-11-25 02:47:47,802 INFO  L751         BuchiCegarLoop]: Abstraction has 7649 states and 8525 transitions.
[2020-11-25 02:47:47,802 INFO  L631         BuchiCegarLoop]: Abstraction has 7649 states and 8525 transitions.
[2020-11-25 02:47:47,802 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:47:47,802 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7649 states and 8525 transitions.
[2020-11-25 02:47:47,809 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:47,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:47,809 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:47,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:47,811 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND FALSE  !(DType[this] == ONIT)
[L6666]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6671]   COND TRUE   DType[this] == ERC20
[L6672]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6672]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6673]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:47,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:47,817 INFO  L82        PathProgramCache]: Analyzing trace with hash 261879921, now seen corresponding path program 1 times
[2020-11-25 02:47:47,817 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:47,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:48,011 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:47:48,011 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:48,011 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:47:48,012 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:48,012 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:47:48,012 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:47:48,012 INFO  L87              Difference]: Start difference. First operand 7649 states and 8525 transitions. cyclomatic complexity: 885 Second operand 8 states.
[2020-11-25 02:47:48,158 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:48,158 INFO  L93              Difference]: Finished difference Result 7689 states and 8564 transitions.
[2020-11-25 02:47:48,158 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:47:48,158 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7689 states and 8564 transitions.
[2020-11-25 02:47:48,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:48,182 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7689 states to 7629 states and 8497 transitions.
[2020-11-25 02:47:48,182 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1582
[2020-11-25 02:47:48,183 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1582
[2020-11-25 02:47:48,183 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7629 states and 8497 transitions.
[2020-11-25 02:47:48,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:48,187 INFO  L728         BuchiCegarLoop]: Abstraction has 7629 states and 8497 transitions.
[2020-11-25 02:47:48,192 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7629 states and 8497 transitions.
[2020-11-25 02:47:48,229 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7629 to 7629.
[2020-11-25 02:47:48,230 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7629 states.
[2020-11-25 02:47:48,237 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7629 states to 7629 states and 8497 transitions.
[2020-11-25 02:47:48,237 INFO  L751         BuchiCegarLoop]: Abstraction has 7629 states and 8497 transitions.
[2020-11-25 02:47:48,238 INFO  L631         BuchiCegarLoop]: Abstraction has 7629 states and 8497 transitions.
[2020-11-25 02:47:48,238 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:47:48,238 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7629 states and 8497 transitions.
[2020-11-25 02:47:48,247 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:47:48,247 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:48,248 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:48,250 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:48,250 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:48,256 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:48,256 INFO  L82        PathProgramCache]: Analyzing trace with hash -541528449, now seen corresponding path program 1 times
[2020-11-25 02:47:48,257 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:48,272 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:48,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 906 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 873 trivial. 0 not checked.
[2020-11-25 02:47:48,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:48,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:47:48,471 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:48,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:47:48,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:47:48,471 INFO  L87              Difference]: Start difference. First operand 7629 states and 8497 transitions. cyclomatic complexity: 877 Second operand 8 states.
[2020-11-25 02:47:49,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:49,776 INFO  L93              Difference]: Finished difference Result 10600 states and 11976 transitions.
[2020-11-25 02:47:49,776 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:47:49,776 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10600 states and 11976 transitions.
[2020-11-25 02:47:49,797 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:47:49,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10600 states to 10583 states and 11956 transitions.
[2020-11-25 02:47:49,816 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2183
[2020-11-25 02:47:49,817 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2183
[2020-11-25 02:47:49,817 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10583 states and 11956 transitions.
[2020-11-25 02:47:49,822 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:49,822 INFO  L728         BuchiCegarLoop]: Abstraction has 10583 states and 11956 transitions.
[2020-11-25 02:47:49,828 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10583 states and 11956 transitions.
[2020-11-25 02:47:49,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10583 to 10457.
[2020-11-25 02:47:49,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10457 states.
[2020-11-25 02:47:49,883 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10457 states to 10457 states and 11830 transitions.
[2020-11-25 02:47:49,883 INFO  L751         BuchiCegarLoop]: Abstraction has 10457 states and 11830 transitions.
[2020-11-25 02:47:49,883 INFO  L631         BuchiCegarLoop]: Abstraction has 10457 states and 11830 transitions.
[2020-11-25 02:47:49,883 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:47:49,883 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10457 states and 11830 transitions.
[2020-11-25 02:47:49,893 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:47:49,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:49,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:49,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:49,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:49,899 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:49,900 INFO  L82        PathProgramCache]: Analyzing trace with hash -879649990, now seen corresponding path program 1 times
[2020-11-25 02:47:49,900 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:49,920 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:50,210 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:47:50,211 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:50,211 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:47:50,211 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:50,211 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:47:50,211 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:47:50,212 INFO  L87              Difference]: Start difference. First operand 10457 states and 11830 transitions. cyclomatic complexity: 1388 Second operand 14 states.
[2020-11-25 02:47:55,590 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:55,590 INFO  L93              Difference]: Finished difference Result 11304 states and 12914 transitions.
[2020-11-25 02:47:55,590 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:47:55,590 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11304 states and 12914 transitions.
[2020-11-25 02:47:55,611 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-11-25 02:47:55,633 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11304 states to 11304 states and 12914 transitions.
[2020-11-25 02:47:55,633 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2369
[2020-11-25 02:47:55,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2369
[2020-11-25 02:47:55,635 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11304 states and 12914 transitions.
[2020-11-25 02:47:55,641 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:55,641 INFO  L728         BuchiCegarLoop]: Abstraction has 11304 states and 12914 transitions.
[2020-11-25 02:47:55,647 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11304 states and 12914 transitions.
[2020-11-25 02:47:55,701 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11304 to 10750.
[2020-11-25 02:47:55,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10750 states.
[2020-11-25 02:47:55,713 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10750 states to 10750 states and 12187 transitions.
[2020-11-25 02:47:55,713 INFO  L751         BuchiCegarLoop]: Abstraction has 10750 states and 12187 transitions.
[2020-11-25 02:47:55,713 INFO  L631         BuchiCegarLoop]: Abstraction has 10750 states and 12187 transitions.
[2020-11-25 02:47:55,714 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:47:55,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10750 states and 12187 transitions.
[2020-11-25 02:47:55,723 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:47:55,724 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:55,724 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:55,725 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:55,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND TRUE   __tmp__DType[this] == Pausable
[L6087]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6087]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6088]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:55,730 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:55,731 INFO  L82        PathProgramCache]: Analyzing trace with hash 448620703, now seen corresponding path program 1 times
[2020-11-25 02:47:55,731 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:55,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:55,922 INFO  L134       CoverageAnalysis]: Checked inductivity of 888 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 853 trivial. 0 not checked.
[2020-11-25 02:47:55,922 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:47:55,922 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:47:55,923 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:55,923 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:47:55,923 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:47:55,923 INFO  L87              Difference]: Start difference. First operand 10750 states and 12187 transitions. cyclomatic complexity: 1462 Second operand 9 states.
[2020-11-25 02:47:57,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:57,496 INFO  L93              Difference]: Finished difference Result 10897 states and 12337 transitions.
[2020-11-25 02:47:57,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:47:57,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10897 states and 12337 transitions.
[2020-11-25 02:47:57,523 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:47:57,548 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10897 states to 10883 states and 12321 transitions.
[2020-11-25 02:47:57,548 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2205
[2020-11-25 02:47:57,549 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2205
[2020-11-25 02:47:57,549 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10883 states and 12321 transitions.
[2020-11-25 02:47:57,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:57,555 INFO  L728         BuchiCegarLoop]: Abstraction has 10883 states and 12321 transitions.
[2020-11-25 02:47:57,562 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10883 states and 12321 transitions.
[2020-11-25 02:47:57,619 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10883 to 10757.
[2020-11-25 02:47:57,619 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10757 states.
[2020-11-25 02:47:57,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10757 states to 10757 states and 12195 transitions.
[2020-11-25 02:47:57,631 INFO  L751         BuchiCegarLoop]: Abstraction has 10757 states and 12195 transitions.
[2020-11-25 02:47:57,631 INFO  L631         BuchiCegarLoop]: Abstraction has 10757 states and 12195 transitions.
[2020-11-25 02:47:57,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:47:57,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10757 states and 12195 transitions.
[2020-11-25 02:47:57,642 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:47:57,642 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:57,642 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:57,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:57,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_Ownable := owner_Ownable;
[L3035]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_ERC20 := _balances_ERC20;
[L3039]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3040]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3045]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3046]               __tmp__implementation_ONIT := implementation_ONIT;
[L3047]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3048]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3049]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7395]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7395]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   COND FALSE  !(revert)
[L7399]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7275]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7275]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7276]   COND FALSE  !(revert)
[L7279]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7248]               assume msgsender_MSG != null;
[L7249]               __tmp__Balance[this] := 0;
[L7250]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7251]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7254]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7255]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7256]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7279]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7280]   COND FALSE  !(revert)
[L7399]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7400]   COND FALSE  !(revert)
[L7403]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7403]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7404]   COND FALSE  !(revert)
[L7407]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7407]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7408]   COND FALSE  !(revert)
[L7411]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7411]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7412]   COND FALSE  !(revert)
[L7415]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7415]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7416]   COND FALSE  !(revert)
[L7419]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7091]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L7091]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7095]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6577]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6535]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6520]               assume msgsender_MSG != null;
[L6521]               __tmp__Balance[this] := 0;
[L6535]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   COND FALSE  !(revert)
[L6577]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   COND FALSE  !(revert)
[L6581]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6552]               assume msgsender_MSG != null;
[L6553]               __tmp__Balance[this] := 0;
[L6554]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6555]               __tmp__sum__balances0[this] := 0;
[L6556]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6557]               __tmp__sum__allowed1[this] := 0;
[L6558]               __tmp___totalSupply_ERC20[this] := 0;
[L6581]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6582]   COND FALSE  !(revert)
[L7095]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7096]   COND FALSE  !(revert)
[L7099]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L7099]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7100]   COND FALSE  !(revert)
[L7103]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6081]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6086]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6091]   COND TRUE   __tmp__DType[this] == PauserRole
[L6092]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6092]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6093]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L7103]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7104]   COND FALSE  !(revert)
[L7107]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6421]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5947]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]               assume msgsender_MSG != null;
[L5921]               __tmp__Balance[this] := 0;
[L5922]               __tmp__owner_Ownable[this] := null;
[L5923]               __tmp__newOwner_Ownable[this] := null;
[L5925]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5926]               __var_6 := null;
[L5927]               __tmp__newOwner_Ownable[this] := __var_6;
[L5947]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   COND FALSE  !(revert)
[L6142]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   COND FALSE  !(revert)
[L6146]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6067]               assume msgsender_MSG != null;
[L6068]               __tmp__Balance[this] := 0;
[L6070]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L6070]   RET         call __var_10 := FreshRefGenerator__fail();
[L6071]   COND FALSE  !(revert)
[L6074]               __tmp___pausers_PauserRole[this] := __var_10;
[L6076]   COND TRUE   __tmp__DType[this] == ONIT
[L6077]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6367]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5816]               __var_1 := null;
[L5817]   COND FALSE  !(!(account_s164 != null))
[L5821]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5895]               __var_5 := null;
[L5896]   COND FALSE  !(!(account_s218 != null))
[L5900]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5821]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5822]   COND FALSE  !(revert)
[L5825]   COND FALSE  !(!!__var_2)
[L5829]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6367]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6368]   COND FALSE  !(revert)
[L6077]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6078]   COND FALSE  !(revert)
[L6146]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6147]   COND FALSE  !(revert)
[L6425]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               __tmp__Balance[this] := 0;
[L6404]               __tmp___paused_Pausable[this] := false;
[L6406]               __tmp___paused_Pausable[this] := false;
[L6429]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L7107]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7108]   COND FALSE  !(revert)
[L7111]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7076]               assume msgsender_MSG != null;
[L7077]               __tmp__Balance[this] := 0;
[L7111]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7112]   COND FALSE  !(revert)
[L7419]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7420]   COND FALSE  !(revert)
[L7423]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]               assume msgsender_MSG != null;
[L7339]               __tmp__Balance[this] := 0;
[L7340]               __tmp__implementation_ONIT[this] := null;
[L7342]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5588]               havoc newRef;
[L5589]               assume __tmp__Alloc[newRef] == false;
[L5590]               __tmp__Alloc[newRef] := true;
[L5591]               assume newRef != null;
[L7342]   RET         call __var_36 := FreshRefGenerator__fail();
[L7343]   COND FALSE  !(revert)
[L7346]               __tmp__timelockList_ONIT[this] := __var_36;
[L7348]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7349]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7351]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7352]   COND TRUE   __tmp__DType[this] == ONIT
[L7353]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6919]               __var_23 := null;
[L6920]   COND FALSE  !(!(account_s946 != null))
[L6924]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6924]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6925]   COND FALSE  !(revert)
[L6928]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6929]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5739]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5740]   COND FALSE  !(!(c_s106 >= a_s106))
[L5744]               __ret_0_ := c_s106;
[L6929]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6930]   COND FALSE  !(revert)
[L6933]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6934]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6935]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7353]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7354]   COND FALSE  !(revert)
[L7423]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7424]   COND FALSE  !(revert)
[L3049]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:57,649 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:57,649 INFO  L82        PathProgramCache]: Analyzing trace with hash 95966812, now seen corresponding path program 1 times
[2020-11-25 02:47:57,650 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:57,672 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:57,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 02:47:57,871 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:57,871 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:47:57,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:57,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:47:57,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:47:57,871 INFO  L87              Difference]: Start difference. First operand 10757 states and 12195 transitions. cyclomatic complexity: 1463 Second operand 4 states.
[2020-11-25 02:47:58,216 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:47:58,216 INFO  L93              Difference]: Finished difference Result 13199 states and 15160 transitions.
[2020-11-25 02:47:58,216 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:47:58,217 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13199 states and 15160 transitions.
[2020-11-25 02:47:58,245 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 02:47:58,272 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13199 states to 12329 states and 14208 transitions.
[2020-11-25 02:47:58,272 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2502
[2020-11-25 02:47:58,273 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2502
[2020-11-25 02:47:58,273 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12329 states and 14208 transitions.
[2020-11-25 02:47:58,281 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:47:58,281 INFO  L728         BuchiCegarLoop]: Abstraction has 12329 states and 14208 transitions.
[2020-11-25 02:47:58,287 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12329 states and 14208 transitions.
[2020-11-25 02:47:58,351 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12329 to 11494.
[2020-11-25 02:47:58,351 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11494 states.
[2020-11-25 02:47:58,365 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11494 states to 11494 states and 13115 transitions.
[2020-11-25 02:47:58,365 INFO  L751         BuchiCegarLoop]: Abstraction has 11494 states and 13115 transitions.
[2020-11-25 02:47:58,365 INFO  L631         BuchiCegarLoop]: Abstraction has 11494 states and 13115 transitions.
[2020-11-25 02:47:58,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:47:58,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11494 states and 13115 transitions.
[2020-11-25 02:47:58,376 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:47:58,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:47:58,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:47:58,378 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:47:58,378 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:47:58,382 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:47:58,383 INFO  L82        PathProgramCache]: Analyzing trace with hash -206195546, now seen corresponding path program 1 times
[2020-11-25 02:47:58,384 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:47:58,410 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:47:58,821 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 920 trivial. 0 not checked.
[2020-11-25 02:47:58,822 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:47:58,822 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 02:47:58,822 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:47:58,822 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 02:47:58,822 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=412, Unknown=0, NotChecked=0, Total=462
[2020-11-25 02:47:58,822 INFO  L87              Difference]: Start difference. First operand 11494 states and 13115 transitions. cyclomatic complexity: 1646 Second operand 22 states.
[2020-11-25 02:48:06,085 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:06,086 INFO  L93              Difference]: Finished difference Result 11870 states and 13675 transitions.
[2020-11-25 02:48:06,086 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 02:48:06,086 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11870 states and 13675 transitions.
[2020-11-25 02:48:06,110 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:06,171 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11870 states to 11870 states and 13675 transitions.
[2020-11-25 02:48:06,172 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2479
[2020-11-25 02:48:06,173 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2479
[2020-11-25 02:48:06,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11870 states and 13675 transitions.
[2020-11-25 02:48:06,180 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:06,180 INFO  L728         BuchiCegarLoop]: Abstraction has 11870 states and 13675 transitions.
[2020-11-25 02:48:06,186 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11870 states and 13675 transitions.
[2020-11-25 02:48:06,237 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11870 to 11722.
[2020-11-25 02:48:06,237 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11722 states.
[2020-11-25 02:48:06,250 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11722 states to 11722 states and 13487 transitions.
[2020-11-25 02:48:06,250 INFO  L751         BuchiCegarLoop]: Abstraction has 11722 states and 13487 transitions.
[2020-11-25 02:48:06,250 INFO  L631         BuchiCegarLoop]: Abstraction has 11722 states and 13487 transitions.
[2020-11-25 02:48:06,250 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:48:06,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11722 states and 13487 transitions.
[2020-11-25 02:48:06,261 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:06,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:06,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:06,263 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:06,263 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:06,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:06,276 INFO  L82        PathProgramCache]: Analyzing trace with hash 2039847566, now seen corresponding path program 1 times
[2020-11-25 02:48:06,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:06,295 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:06,467 INFO  L134       CoverageAnalysis]: Checked inductivity of 941 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 941 trivial. 0 not checked.
[2020-11-25 02:48:06,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:06,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:48:06,468 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:06,468 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:48:06,468 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:48:06,468 INFO  L87              Difference]: Start difference. First operand 11722 states and 13487 transitions. cyclomatic complexity: 1800 Second operand 3 states.
[2020-11-25 02:48:06,542 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:06,542 INFO  L93              Difference]: Finished difference Result 11674 states and 13397 transitions.
[2020-11-25 02:48:06,542 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:48:06,542 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11674 states and 13397 transitions.
[2020-11-25 02:48:06,562 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:06,584 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11674 states to 11674 states and 13397 transitions.
[2020-11-25 02:48:06,584 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2429
[2020-11-25 02:48:06,585 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2429
[2020-11-25 02:48:06,585 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11674 states and 13397 transitions.
[2020-11-25 02:48:06,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:06,591 INFO  L728         BuchiCegarLoop]: Abstraction has 11674 states and 13397 transitions.
[2020-11-25 02:48:06,597 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11674 states and 13397 transitions.
[2020-11-25 02:48:06,647 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11674 to 11456.
[2020-11-25 02:48:06,647 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11456 states.
[2020-11-25 02:48:06,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11456 states to 11456 states and 13118 transitions.
[2020-11-25 02:48:06,660 INFO  L751         BuchiCegarLoop]: Abstraction has 11456 states and 13118 transitions.
[2020-11-25 02:48:06,660 INFO  L631         BuchiCegarLoop]: Abstraction has 11456 states and 13118 transitions.
[2020-11-25 02:48:06,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:48:06,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11456 states and 13118 transitions.
[2020-11-25 02:48:06,670 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:06,670 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:06,670 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:06,672 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:06,672 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:06,678 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:06,678 INFO  L82        PathProgramCache]: Analyzing trace with hash 1530572457, now seen corresponding path program 1 times
[2020-11-25 02:48:06,679 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:06,699 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:06,945 INFO  L134       CoverageAnalysis]: Checked inductivity of 1064 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1039 trivial. 0 not checked.
[2020-11-25 02:48:06,946 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:06,946 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:48:06,946 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:06,946 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:48:06,947 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:48:06,947 INFO  L87              Difference]: Start difference. First operand 11456 states and 13118 transitions. cyclomatic complexity: 1693 Second operand 9 states.
[2020-11-25 02:48:07,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:07,109 INFO  L93              Difference]: Finished difference Result 11474 states and 13137 transitions.
[2020-11-25 02:48:07,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:48:07,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11474 states and 13137 transitions.
[2020-11-25 02:48:07,128 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:07,149 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11474 states to 11428 states and 13083 transitions.
[2020-11-25 02:48:07,149 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2317
[2020-11-25 02:48:07,150 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2317
[2020-11-25 02:48:07,150 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11428 states and 13083 transitions.
[2020-11-25 02:48:07,156 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:07,156 INFO  L728         BuchiCegarLoop]: Abstraction has 11428 states and 13083 transitions.
[2020-11-25 02:48:07,162 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11428 states and 13083 transitions.
[2020-11-25 02:48:07,211 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11428 to 11428.
[2020-11-25 02:48:07,211 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11428 states.
[2020-11-25 02:48:07,224 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11428 states to 11428 states and 13083 transitions.
[2020-11-25 02:48:07,224 INFO  L751         BuchiCegarLoop]: Abstraction has 11428 states and 13083 transitions.
[2020-11-25 02:48:07,224 INFO  L631         BuchiCegarLoop]: Abstraction has 11428 states and 13083 transitions.
[2020-11-25 02:48:07,224 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:48:07,224 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11428 states and 13083 transitions.
[2020-11-25 02:48:07,235 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:07,235 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:07,235 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:07,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:07,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND FALSE  !(__var_69)
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:07,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:07,242 INFO  L82        PathProgramCache]: Analyzing trace with hash -2055399352, now seen corresponding path program 1 times
[2020-11-25 02:48:07,242 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:07,263 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:07,477 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1075 trivial. 0 not checked.
[2020-11-25 02:48:07,477 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:07,477 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:48:07,477 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:07,477 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:48:07,477 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:48:07,478 INFO  L87              Difference]: Start difference. First operand 11428 states and 13083 transitions. cyclomatic complexity: 1686 Second operand 4 states.
[2020-11-25 02:48:07,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:07,516 INFO  L93              Difference]: Finished difference Result 11434 states and 13093 transitions.
[2020-11-25 02:48:07,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:48:07,517 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11434 states and 13093 transitions.
[2020-11-25 02:48:07,535 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:07,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11434 states to 11434 states and 13093 transitions.
[2020-11-25 02:48:07,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2317
[2020-11-25 02:48:07,557 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2317
[2020-11-25 02:48:07,557 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11434 states and 13093 transitions.
[2020-11-25 02:48:07,563 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:07,563 INFO  L728         BuchiCegarLoop]: Abstraction has 11434 states and 13093 transitions.
[2020-11-25 02:48:07,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11434 states and 13093 transitions.
[2020-11-25 02:48:07,618 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11434 to 11428.
[2020-11-25 02:48:07,618 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11428 states.
[2020-11-25 02:48:07,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11428 states to 11428 states and 13077 transitions.
[2020-11-25 02:48:07,631 INFO  L751         BuchiCegarLoop]: Abstraction has 11428 states and 13077 transitions.
[2020-11-25 02:48:07,631 INFO  L631         BuchiCegarLoop]: Abstraction has 11428 states and 13077 transitions.
[2020-11-25 02:48:07,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:48:07,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11428 states and 13077 transitions.
[2020-11-25 02:48:07,642 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:48:07,642 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:07,642 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:07,643 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:07,643 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:07,649 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:07,649 INFO  L82        PathProgramCache]: Analyzing trace with hash -118509735, now seen corresponding path program 1 times
[2020-11-25 02:48:07,650 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:07,673 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:08,289 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 98 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 02:48:08,289 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:48:08,289 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 02:48:08,290 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:08,291 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:48:08,291 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:48:08,291 INFO  L87              Difference]: Start difference. First operand 11428 states and 13077 transitions. cyclomatic complexity: 1680 Second operand 26 states.
[2020-11-25 02:48:20,191 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:20,191 INFO  L93              Difference]: Finished difference Result 12026 states and 13941 transitions.
[2020-11-25 02:48:20,191 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:48:20,191 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12026 states and 13941 transitions.
[2020-11-25 02:48:20,216 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:20,241 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12026 states to 12026 states and 13941 transitions.
[2020-11-25 02:48:20,241 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2561
[2020-11-25 02:48:20,242 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2561
[2020-11-25 02:48:20,242 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12026 states and 13941 transitions.
[2020-11-25 02:48:20,249 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:20,249 INFO  L728         BuchiCegarLoop]: Abstraction has 12026 states and 13941 transitions.
[2020-11-25 02:48:20,255 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12026 states and 13941 transitions.
[2020-11-25 02:48:20,312 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12026 to 11824.
[2020-11-25 02:48:20,312 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11824 states.
[2020-11-25 02:48:20,328 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11824 states to 11824 states and 13683 transitions.
[2020-11-25 02:48:20,328 INFO  L751         BuchiCegarLoop]: Abstraction has 11824 states and 13683 transitions.
[2020-11-25 02:48:20,328 INFO  L631         BuchiCegarLoop]: Abstraction has 11824 states and 13683 transitions.
[2020-11-25 02:48:20,328 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:48:20,328 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11824 states and 13683 transitions.
[2020-11-25 02:48:20,339 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:20,339 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:20,339 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:20,341 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:20,341 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false
[L8198]   CALL        call __var_59 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8198]   RET         call __var_59 := FreshRefGenerator__success();
[L8199]   COND FALSE  !(revert)
[L8202]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8203]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] := true;
[L8204]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == zerointRefArr();
[L8205]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1600] == __var_59;
[L8206]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] == 0;
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:20,346 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:20,346 INFO  L82        PathProgramCache]: Analyzing trace with hash -1023298405, now seen corresponding path program 1 times
[2020-11-25 02:48:20,347 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:20,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:20,606 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 1 proven. 4 refuted. 0 times theorem prover too weak. 1071 trivial. 0 not checked.
[2020-11-25 02:48:20,606 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:48:20,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 02:48:20,607 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:20,607 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:48:20,607 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:48:20,607 INFO  L87              Difference]: Start difference. First operand 11824 states and 13683 transitions. cyclomatic complexity: 1902 Second operand 4 states.
[2020-11-25 02:48:20,712 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:20,712 INFO  L93              Difference]: Finished difference Result 11688 states and 13513 transitions.
[2020-11-25 02:48:20,712 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:48:20,712 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11688 states and 13513 transitions.
[2020-11-25 02:48:20,736 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:20,761 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11688 states to 11520 states and 13313 transitions.
[2020-11-25 02:48:20,761 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2437
[2020-11-25 02:48:20,762 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2437
[2020-11-25 02:48:20,762 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11520 states and 13313 transitions.
[2020-11-25 02:48:20,769 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:20,769 INFO  L728         BuchiCegarLoop]: Abstraction has 11520 states and 13313 transitions.
[2020-11-25 02:48:20,775 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11520 states and 13313 transitions.
[2020-11-25 02:48:20,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11520 to 11508.
[2020-11-25 02:48:20,831 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11508 states.
[2020-11-25 02:48:20,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11508 states to 11508 states and 13297 transitions.
[2020-11-25 02:48:20,846 INFO  L751         BuchiCegarLoop]: Abstraction has 11508 states and 13297 transitions.
[2020-11-25 02:48:20,846 INFO  L631         BuchiCegarLoop]: Abstraction has 11508 states and 13297 transitions.
[2020-11-25 02:48:20,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 02:48:20,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11508 states and 13297 transitions.
[2020-11-25 02:48:20,857 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:20,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:20,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:20,858 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:20,858 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8353]   CALL        call __var_68 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8353]   RET         call __var_68 := FreshRefGenerator__success();
[L8354]   COND FALSE  !(revert)
[L8357]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8358]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8359]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8360]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_68;
[L8361]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:20,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:20,864 INFO  L82        PathProgramCache]: Analyzing trace with hash 201780221, now seen corresponding path program 1 times
[2020-11-25 02:48:20,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:20,887 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:21,140 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1075 trivial. 0 not checked.
[2020-11-25 02:48:21,140 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:21,140 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:48:21,141 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:21,141 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:48:21,141 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:48:21,141 INFO  L87              Difference]: Start difference. First operand 11508 states and 13297 transitions. cyclomatic complexity: 1832 Second operand 3 states.
[2020-11-25 02:48:21,214 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:21,214 INFO  L93              Difference]: Finished difference Result 11532 states and 13333 transitions.
[2020-11-25 02:48:21,214 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:48:21,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11532 states and 13333 transitions.
[2020-11-25 02:48:21,235 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:21,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11532 states to 11532 states and 13333 transitions.
[2020-11-25 02:48:21,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2437
[2020-11-25 02:48:21,259 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2437
[2020-11-25 02:48:21,259 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11532 states and 13333 transitions.
[2020-11-25 02:48:21,266 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:21,266 INFO  L728         BuchiCegarLoop]: Abstraction has 11532 states and 13333 transitions.
[2020-11-25 02:48:21,272 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11532 states and 13333 transitions.
[2020-11-25 02:48:21,326 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11532 to 11492.
[2020-11-25 02:48:21,326 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11492 states.
[2020-11-25 02:48:21,341 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11492 states to 11492 states and 13273 transitions.
[2020-11-25 02:48:21,341 INFO  L751         BuchiCegarLoop]: Abstraction has 11492 states and 13273 transitions.
[2020-11-25 02:48:21,341 INFO  L631         BuchiCegarLoop]: Abstraction has 11492 states and 13273 transitions.
[2020-11-25 02:48:21,341 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 02:48:21,341 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11492 states and 13273 transitions.
[2020-11-25 02:48:21,352 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:21,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:21,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:21,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:21,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:21,359 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:21,359 INFO  L82        PathProgramCache]: Analyzing trace with hash -1316223302, now seen corresponding path program 1 times
[2020-11-25 02:48:21,360 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:21,382 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:21,628 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1076 trivial. 0 not checked.
[2020-11-25 02:48:21,628 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:21,628 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:48:21,628 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:21,629 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:48:21,629 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:48:21,629 INFO  L87              Difference]: Start difference. First operand 11492 states and 13273 transitions. cyclomatic complexity: 1824 Second operand 6 states.
[2020-11-25 02:48:23,404 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:23,404 INFO  L93              Difference]: Finished difference Result 11534 states and 13285 transitions.
[2020-11-25 02:48:23,404 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:48:23,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11534 states and 13285 transitions.
[2020-11-25 02:48:23,426 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:23,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11534 states to 11534 states and 13285 transitions.
[2020-11-25 02:48:23,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2501
[2020-11-25 02:48:23,451 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2501
[2020-11-25 02:48:23,451 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11534 states and 13285 transitions.
[2020-11-25 02:48:23,457 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:23,457 INFO  L728         BuchiCegarLoop]: Abstraction has 11534 states and 13285 transitions.
[2020-11-25 02:48:23,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11534 states and 13285 transitions.
[2020-11-25 02:48:23,514 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11534 to 11332.
[2020-11-25 02:48:23,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11332 states.
[2020-11-25 02:48:23,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11332 states to 11332 states and 13033 transitions.
[2020-11-25 02:48:23,528 INFO  L751         BuchiCegarLoop]: Abstraction has 11332 states and 13033 transitions.
[2020-11-25 02:48:23,528 INFO  L631         BuchiCegarLoop]: Abstraction has 11332 states and 13033 transitions.
[2020-11-25 02:48:23,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 02:48:23,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11332 states and 13033 transitions.
[2020-11-25 02:48:23,539 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:23,539 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:23,539 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:23,540 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:23,540 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND TRUE   choice == 17
[L12230]              gas := gas - 21000;
[L12231]  COND TRUE   gas >= 0
[L12232]              assume msgvalue_MSG == 0;
[L12233]  CALL        call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7544]   COND TRUE   DType[this] == ONIT
[L7545]   CALL        call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6619]               __ret_0_ := _balances_ERC20[this][owner_s640];
[L7545]   RET         call totalBalance_s1254 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7546]   COND FALSE  !(revert)
[L7552]               totalBalance_s1254 := totalBalance_s1254;
[L7553]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] == false
[L7554]   CALL        call __var_38 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7554]   RET         call __var_38 := FreshRefGenerator__success();
[L7555]   COND FALSE  !(revert)
[L7558]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7559]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][owner_s1254] := true;
[L7560]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == zerointRefArr();
[L7561]               assume M_Ref_Ref[timelockList_ONIT[this]][owner_s1254] == __var_38;
[L7562]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] == 0;
[L7564]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][owner_s1254]] > 0)
[L7601]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12233]  RET         call __ret_0_balanceOf := balanceOf~address_ONIT(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:23,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:23,546 INFO  L82        PathProgramCache]: Analyzing trace with hash -1863119659, now seen corresponding path program 1 times
[2020-11-25 02:48:23,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:23,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:24,160 INFO  L134       CoverageAnalysis]: Checked inductivity of 1076 backedges. 98 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 02:48:24,161 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:48:24,161 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 02:48:24,161 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:24,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:48:24,161 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:48:24,162 INFO  L87              Difference]: Start difference. First operand 11332 states and 13033 transitions. cyclomatic complexity: 1740 Second operand 26 states.
[2020-11-25 02:48:36,094 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:36,095 INFO  L93              Difference]: Finished difference Result 11516 states and 13355 transitions.
[2020-11-25 02:48:36,095 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:48:36,095 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11516 states and 13355 transitions.
[2020-11-25 02:48:36,119 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 02:48:36,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11516 states to 11516 states and 13355 transitions.
[2020-11-25 02:48:36,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2515
[2020-11-25 02:48:36,144 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2531
[2020-11-25 02:48:36,144 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11516 states and 13355 transitions.
[2020-11-25 02:48:36,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:36,152 INFO  L728         BuchiCegarLoop]: Abstraction has 11516 states and 13355 transitions.
[2020-11-25 02:48:36,157 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11516 states and 13355 transitions.
[2020-11-25 02:48:36,209 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11516 to 11328.
[2020-11-25 02:48:36,209 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11328 states.
[2020-11-25 02:48:36,224 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11328 states to 11328 states and 13021 transitions.
[2020-11-25 02:48:36,224 INFO  L751         BuchiCegarLoop]: Abstraction has 11328 states and 13021 transitions.
[2020-11-25 02:48:36,224 INFO  L631         BuchiCegarLoop]: Abstraction has 11328 states and 13021 transitions.
[2020-11-25 02:48:36,224 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 02:48:36,224 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11328 states and 13021 transitions.
[2020-11-25 02:48:36,234 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:36,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:36,234 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:36,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:36,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND TRUE   DType[this] == Pausable
[L10848]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10848]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10849]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND TRUE   DType[this] == Pausable
[L10871]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10871]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10872]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:36,242 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:36,242 INFO  L82        PathProgramCache]: Analyzing trace with hash 1674637719, now seen corresponding path program 1 times
[2020-11-25 02:48:36,243 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:36,262 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:36,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:36,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:36,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:48:36,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:36,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:48:36,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:48:36,503 INFO  L87              Difference]: Start difference. First operand 11328 states and 13021 transitions. cyclomatic complexity: 1732 Second operand 7 states.
[2020-11-25 02:48:36,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:36,639 INFO  L93              Difference]: Finished difference Result 11412 states and 13129 transitions.
[2020-11-25 02:48:36,639 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:48:36,639 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11412 states and 13129 transitions.
[2020-11-25 02:48:36,661 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:36,685 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11412 states to 11352 states and 13069 transitions.
[2020-11-25 02:48:36,685 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2405
[2020-11-25 02:48:36,686 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2405
[2020-11-25 02:48:36,686 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11352 states and 13069 transitions.
[2020-11-25 02:48:36,693 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:36,693 INFO  L728         BuchiCegarLoop]: Abstraction has 11352 states and 13069 transitions.
[2020-11-25 02:48:36,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11352 states and 13069 transitions.
[2020-11-25 02:48:36,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11352 to 11352.
[2020-11-25 02:48:36,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11352 states.
[2020-11-25 02:48:36,765 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11352 states to 11352 states and 13069 transitions.
[2020-11-25 02:48:36,765 INFO  L751         BuchiCegarLoop]: Abstraction has 11352 states and 13069 transitions.
[2020-11-25 02:48:36,765 INFO  L631         BuchiCegarLoop]: Abstraction has 11352 states and 13069 transitions.
[2020-11-25 02:48:36,765 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 02:48:36,765 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11352 states and 13069 transitions.
[2020-11-25 02:48:36,775 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:36,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:36,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:36,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:36,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND TRUE   choice == 6
[L12299]              gas := gas - 21000;
[L12300]  COND TRUE   gas >= 0
[L12301]              assume msgvalue_MSG == 0;
[L12302]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7809]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND FALSE  !(DType[this] == Pausable)
[L10875]  COND TRUE   DType[this] == PauserRole
[L10876]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10876]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10877]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7809]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7810]   COND FALSE  !(revert)
[L7813]   COND FALSE  !(!frozenAccount_ONIT[this][holder_s1379])
[L7817]               frozenAccount_ONIT[this][holder_s1379] := false;
[L7818]               assert { :EventEmitted "Unfreeze_ONIT" } true;
[L7819]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12302]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:36,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:36,782 INFO  L82        PathProgramCache]: Analyzing trace with hash -1626841930, now seen corresponding path program 1 times
[2020-11-25 02:48:36,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:36,804 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:37,093 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:37,094 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:37,094 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:48:37,094 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:37,094 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:48:37,094 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:48:37,094 INFO  L87              Difference]: Start difference. First operand 11352 states and 13069 transitions. cyclomatic complexity: 1756 Second operand 7 states.
[2020-11-25 02:48:37,226 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:37,226 INFO  L93              Difference]: Finished difference Result 11428 states and 13169 transitions.
[2020-11-25 02:48:37,226 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:48:37,226 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11428 states and 13169 transitions.
[2020-11-25 02:48:37,247 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:37,270 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11428 states to 11368 states and 13105 transitions.
[2020-11-25 02:48:37,270 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2405
[2020-11-25 02:48:37,271 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2405
[2020-11-25 02:48:37,272 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11368 states and 13105 transitions.
[2020-11-25 02:48:37,278 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:37,278 INFO  L728         BuchiCegarLoop]: Abstraction has 11368 states and 13105 transitions.
[2020-11-25 02:48:37,284 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11368 states and 13105 transitions.
[2020-11-25 02:48:37,334 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11368 to 11368.
[2020-11-25 02:48:37,335 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11368 states.
[2020-11-25 02:48:37,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11368 states to 11368 states and 13105 transitions.
[2020-11-25 02:48:37,349 INFO  L751         BuchiCegarLoop]: Abstraction has 11368 states and 13105 transitions.
[2020-11-25 02:48:37,349 INFO  L631         BuchiCegarLoop]: Abstraction has 11368 states and 13105 transitions.
[2020-11-25 02:48:37,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 02:48:37,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11368 states and 13105 transitions.
[2020-11-25 02:48:37,361 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:37,361 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:37,361 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:37,362 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:37,363 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND TRUE   DType[this] == ERC20Pausable
[L10843]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10843]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10844]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND FALSE  !(DType[this] == Pausable)
[L10875]  COND TRUE   DType[this] == PauserRole
[L10876]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10876]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10877]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:37,368 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:37,368 INFO  L82        PathProgramCache]: Analyzing trace with hash -164193488, now seen corresponding path program 1 times
[2020-11-25 02:48:37,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:37,388 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:37,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:37,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:37,609 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:48:37,609 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:37,609 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:48:37,609 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:48:37,610 INFO  L87              Difference]: Start difference. First operand 11368 states and 13105 transitions. cyclomatic complexity: 1776 Second operand 3 states.
[2020-11-25 02:48:37,665 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:37,665 INFO  L93              Difference]: Finished difference Result 11388 states and 13149 transitions.
[2020-11-25 02:48:37,665 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:48:37,665 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11388 states and 13149 transitions.
[2020-11-25 02:48:37,686 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:37,709 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11388 states to 11388 states and 13149 transitions.
[2020-11-25 02:48:37,709 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2405
[2020-11-25 02:48:37,710 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2405
[2020-11-25 02:48:37,710 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11388 states and 13149 transitions.
[2020-11-25 02:48:37,716 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:37,716 INFO  L728         BuchiCegarLoop]: Abstraction has 11388 states and 13149 transitions.
[2020-11-25 02:48:37,722 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11388 states and 13149 transitions.
[2020-11-25 02:48:37,773 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11388 to 11376.
[2020-11-25 02:48:37,773 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11376 states.
[2020-11-25 02:48:37,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11376 states to 11376 states and 13113 transitions.
[2020-11-25 02:48:37,788 INFO  L751         BuchiCegarLoop]: Abstraction has 11376 states and 13113 transitions.
[2020-11-25 02:48:37,788 INFO  L631         BuchiCegarLoop]: Abstraction has 11376 states and 13113 transitions.
[2020-11-25 02:48:37,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 02:48:37,788 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11376 states and 13113 transitions.
[2020-11-25 02:48:37,798 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:37,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:37,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:37,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:37,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND TRUE   DType[this] == ERC20Pausable
[L10866]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10866]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10867]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND TRUE   choice == 9
[L12280]              gas := gas - 21000;
[L12281]  COND TRUE   gas >= 0
[L12282]              assume arg1694_s0 >= 0 && arg1694_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12283]              assume msgvalue_MSG == 0;
[L12284]  CALL        call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4051]               havoc __exception;
[L4052]               revert := false;
[L4053]   COND FALSE  !(__exception)
[L4089]   CALL        call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L8496]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] == false
[L8497]   CALL        call __var_71 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8497]   RET         call __var_71 := FreshRefGenerator__success();
[L8498]   COND FALSE  !(revert)
[L8501]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8502]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][arg1693_s0] := true;
[L8503]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == zerointRefArr();
[L8504]               assume M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0] == __var_71;
[L8505]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]] == 0;
[L8507]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][arg1693_s0]][arg1694_s0];
[L4089]   RET         call __ret_0_ := timelockList~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L4090]               assume !revert && gas >= 0;
[L12284]  RET         call __ret_0_timelockList := timelockList~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, arg1693_s0, arg1694_s0);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:37,805 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:37,805 INFO  L82        PathProgramCache]: Analyzing trace with hash -1552537395, now seen corresponding path program 1 times
[2020-11-25 02:48:37,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:37,824 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:38,069 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:38,069 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:38,069 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:48:38,070 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:38,070 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:48:38,070 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:48:38,070 INFO  L87              Difference]: Start difference. First operand 11376 states and 13113 transitions. cyclomatic complexity: 1776 Second operand 3 states.
[2020-11-25 02:48:38,124 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:38,124 INFO  L93              Difference]: Finished difference Result 11388 states and 13145 transitions.
[2020-11-25 02:48:38,124 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:48:38,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11388 states and 13145 transitions.
[2020-11-25 02:48:38,144 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:38,167 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11388 states to 11388 states and 13145 transitions.
[2020-11-25 02:48:38,167 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2405
[2020-11-25 02:48:38,168 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2405
[2020-11-25 02:48:38,168 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11388 states and 13145 transitions.
[2020-11-25 02:48:38,175 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:38,175 INFO  L728         BuchiCegarLoop]: Abstraction has 11388 states and 13145 transitions.
[2020-11-25 02:48:38,181 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11388 states and 13145 transitions.
[2020-11-25 02:48:38,232 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11388 to 11376.
[2020-11-25 02:48:38,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11376 states.
[2020-11-25 02:48:38,246 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11376 states to 11376 states and 13109 transitions.
[2020-11-25 02:48:38,246 INFO  L751         BuchiCegarLoop]: Abstraction has 11376 states and 13109 transitions.
[2020-11-25 02:48:38,246 INFO  L631         BuchiCegarLoop]: Abstraction has 11376 states and 13109 transitions.
[2020-11-25 02:48:38,246 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 02:48:38,246 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11376 states and 13109 transitions.
[2020-11-25 02:48:38,258 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:38,258 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:38,258 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:38,260 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:38,260 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND FALSE  !(DType[this] == Pausable)
[L10875]  COND TRUE   DType[this] == PauserRole
[L10876]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10876]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10877]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:38,265 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:38,265 INFO  L82        PathProgramCache]: Analyzing trace with hash 422389301, now seen corresponding path program 1 times
[2020-11-25 02:48:38,265 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:38,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:38,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:38,508 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:38,509 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:48:38,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:38,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:48:38,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:48:38,509 INFO  L87              Difference]: Start difference. First operand 11376 states and 13109 transitions. cyclomatic complexity: 1772 Second operand 3 states.
[2020-11-25 02:48:38,565 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:38,565 INFO  L93              Difference]: Finished difference Result 11376 states and 13105 transitions.
[2020-11-25 02:48:38,565 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:48:38,565 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11376 states and 13105 transitions.
[2020-11-25 02:48:38,586 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:38,609 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11376 states to 11376 states and 13105 transitions.
[2020-11-25 02:48:38,609 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2405
[2020-11-25 02:48:38,610 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2405
[2020-11-25 02:48:38,610 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11376 states and 13105 transitions.
[2020-11-25 02:48:38,617 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:38,617 INFO  L728         BuchiCegarLoop]: Abstraction has 11376 states and 13105 transitions.
[2020-11-25 02:48:38,623 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11376 states and 13105 transitions.
[2020-11-25 02:48:38,674 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11376 to 11376.
[2020-11-25 02:48:38,675 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11376 states.
[2020-11-25 02:48:38,689 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11376 states to 11376 states and 13105 transitions.
[2020-11-25 02:48:38,689 INFO  L751         BuchiCegarLoop]: Abstraction has 11376 states and 13105 transitions.
[2020-11-25 02:48:38,689 INFO  L631         BuchiCegarLoop]: Abstraction has 11376 states and 13105 transitions.
[2020-11-25 02:48:38,689 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 02:48:38,690 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11376 states and 13105 transitions.
[2020-11-25 02:48:38,701 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:38,701 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:38,701 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:38,703 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:38,703 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND FALSE  !(DType[this] == ONIT)
[L10842]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10847]  COND FALSE  !(DType[this] == Pausable)
[L10852]  COND TRUE   DType[this] == PauserRole
[L10853]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10853]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10854]  COND FALSE  !(revert)
[L10860]  COND FALSE  !(DType[this] == ONIT)
[L10865]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10870]  COND FALSE  !(DType[this] == Pausable)
[L10875]  COND TRUE   DType[this] == PauserRole
[L10876]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10876]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10877]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:38,708 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:38,708 INFO  L82        PathProgramCache]: Analyzing trace with hash -1537675121, now seen corresponding path program 1 times
[2020-11-25 02:48:38,709 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:38,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:38,976 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:38,976 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:48:38,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:48:38,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:38,977 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:48:38,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:48:38,977 INFO  L87              Difference]: Start difference. First operand 11376 states and 13105 transitions. cyclomatic complexity: 1768 Second operand 7 states.
[2020-11-25 02:48:39,105 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:39,105 INFO  L93              Difference]: Finished difference Result 11436 states and 13161 transitions.
[2020-11-25 02:48:39,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:48:39,105 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11436 states and 13161 transitions.
[2020-11-25 02:48:39,127 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:39,150 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11436 states to 11376 states and 13101 transitions.
[2020-11-25 02:48:39,150 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2405
[2020-11-25 02:48:39,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2405
[2020-11-25 02:48:39,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11376 states and 13101 transitions.
[2020-11-25 02:48:39,157 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:39,157 INFO  L728         BuchiCegarLoop]: Abstraction has 11376 states and 13101 transitions.
[2020-11-25 02:48:39,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11376 states and 13101 transitions.
[2020-11-25 02:48:39,214 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11376 to 11364.
[2020-11-25 02:48:39,214 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11364 states.
[2020-11-25 02:48:39,228 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11364 states to 11364 states and 13069 transitions.
[2020-11-25 02:48:39,228 INFO  L751         BuchiCegarLoop]: Abstraction has 11364 states and 13069 transitions.
[2020-11-25 02:48:39,228 INFO  L631         BuchiCegarLoop]: Abstraction has 11364 states and 13069 transitions.
[2020-11-25 02:48:39,228 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 02:48:39,229 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11364 states and 13069 transitions.
[2020-11-25 02:48:39,239 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:39,239 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:39,239 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:39,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:39,241 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND TRUE   choice == 7
[L12293]              gas := gas - 21000;
[L12294]  COND TRUE   gas >= 0
[L12295]              assume msgvalue_MSG == 0;
[L12296]  CALL        call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7778]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7778]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7779]   COND FALSE  !(revert)
[L7782]   COND FALSE  !(!!frozenAccount_ONIT[this][holder_s1351])
[L7786]               frozenAccount_ONIT[this][holder_s1351] := true;
[L7787]               assert { :EventEmitted "Freeze_ONIT" } true;
[L7788]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12296]  RET         call __ret_0_freezeAccount := freezeAccount~address_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:39,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:39,245 INFO  L82        PathProgramCache]: Analyzing trace with hash 525853893, now seen corresponding path program 1 times
[2020-11-25 02:48:39,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:39,268 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:39,632 INFO  L134       CoverageAnalysis]: Checked inductivity of 1060 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 1059 trivial. 0 not checked.
[2020-11-25 02:48:39,632 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:48:39,633 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 02:48:39,633 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:39,633 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:48:39,633 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:48:39,633 INFO  L87              Difference]: Start difference. First operand 11364 states and 13069 transitions. cyclomatic complexity: 1744 Second operand 12 states.
[2020-11-25 02:48:43,762 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:43,762 INFO  L93              Difference]: Finished difference Result 11666 states and 13475 transitions.
[2020-11-25 02:48:43,762 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 02:48:43,762 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11666 states and 13475 transitions.
[2020-11-25 02:48:43,785 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:43,809 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11666 states to 11530 states and 13311 transitions.
[2020-11-25 02:48:43,809 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2521
[2020-11-25 02:48:43,810 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2521
[2020-11-25 02:48:43,810 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11530 states and 13311 transitions.
[2020-11-25 02:48:43,817 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:43,817 INFO  L728         BuchiCegarLoop]: Abstraction has 11530 states and 13311 transitions.
[2020-11-25 02:48:43,823 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11530 states and 13311 transitions.
[2020-11-25 02:48:43,874 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11530 to 11380.
[2020-11-25 02:48:43,874 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11380 states.
[2020-11-25 02:48:43,889 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11380 states to 11380 states and 13139 transitions.
[2020-11-25 02:48:43,889 INFO  L751         BuchiCegarLoop]: Abstraction has 11380 states and 13139 transitions.
[2020-11-25 02:48:43,889 INFO  L631         BuchiCegarLoop]: Abstraction has 11380 states and 13139 transitions.
[2020-11-25 02:48:43,889 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 02:48:43,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11380 states and 13139 transitions.
[2020-11-25 02:48:43,900 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:48:43,900 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:43,900 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:43,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:43,902 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND TRUE   gas >= 0
[L12133]              assume msgvalue_MSG == 0;
[L12134]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND TRUE   __exception
[L617]                __tmp__Balance := Balance;
[L618]                __tmp__DType := DType;
[L619]                __tmp__Alloc := Alloc;
[L620]                __tmp__balance_ADDR := balance_ADDR;
[L621]                __tmp__M_Ref_bool := M_Ref_bool;
[L622]                __tmp__sum := sum;
[L623]                __tmp__M_Ref_int := M_Ref_int;
[L624]                __tmp__sum__balances0 := sum__balances0;
[L625]                __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L626]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L627]                __tmp__sum__allowed1 := sum__allowed1;
[L628]                __tmp__M_int_Ref := M_int_Ref;
[L629]                __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L630]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L631]                __tmp__Length := Length;
[L632]                __tmp__now := now;
[L633]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L634]                __tmp__owner_Ownable := owner_Ownable;
[L635]                __tmp__newOwner_Ownable := newOwner_Ownable;
[L636]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L637]                __tmp___paused_Pausable := _paused_Pausable;
[L638]                __tmp___balances_ERC20 := _balances_ERC20;
[L639]                __tmp___allowed_ERC20 := _allowed_ERC20;
[L640]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L641]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L642]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L643]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L644]                __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L645]                __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L646]                __tmp__implementation_ONIT := implementation_ONIT;
[L647]                __tmp__timelockList_ONIT := timelockList_ONIT;
[L648]                __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L649]    CALL        call __ret_0_ := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6041]               __ret_0_ := __tmp__owner_Ownable[this];
[L649]    RET         call __ret_0_ := owner_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L650]                assume revert || gas < 0;
[L12134]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND FALSE  !(choice == 3)
[L12327]  COND FALSE  !(choice == 2)
[L12333]  COND TRUE   choice == 1
[L12334]              gas := gas - 21000;
[L12335]  COND TRUE   gas >= 0
[L12336]              assume value_s1663 >= 0 && value_s1663 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12337]              assume msgvalue_MSG == 0;
[L12338]  CALL        call __ret_0_mint := mint~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L3884]               havoc __exception;
[L3885]               revert := false;
[L3886]   COND FALSE  !(__exception)
[L3922]   CALL        call __ret_0_ := mint~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L8401]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8401]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8402]   COND FALSE  !(revert)
[L8405]   COND TRUE   DType[this] == ONIT
[L8406]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1663);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L8406]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1663);
[L8407]   COND FALSE  !(revert)
[L8413]               __ret_0_ := true;
[L3922]   RET         call __ret_0_ := mint~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L3923]               assume !revert && gas >= 0;
[L12338]  RET         call __ret_0_mint := mint~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:43,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:43,908 INFO  L82        PathProgramCache]: Analyzing trace with hash 348546685, now seen corresponding path program 1 times
[2020-11-25 02:48:43,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:43,931 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:44,203 INFO  L134       CoverageAnalysis]: Checked inductivity of 1248 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 1244 trivial. 0 not checked.
[2020-11-25 02:48:44,203 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:48:44,203 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [5] total 5
[2020-11-25 02:48:44,204 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:44,204 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:48:44,204 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:48:44,204 INFO  L87              Difference]: Start difference. First operand 11380 states and 13139 transitions. cyclomatic complexity: 1802 Second operand 5 states.
[2020-11-25 02:48:45,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:45,516 INFO  L93              Difference]: Finished difference Result 11906 states and 13917 transitions.
[2020-11-25 02:48:45,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:48:45,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11906 states and 13917 transitions.
[2020-11-25 02:48:45,547 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 02:48:45,576 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11906 states to 10487 states and 12436 transitions.
[2020-11-25 02:48:45,577 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1796
[2020-11-25 02:48:45,577 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1796
[2020-11-25 02:48:45,577 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10487 states and 12436 transitions.
[2020-11-25 02:48:45,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:45,585 INFO  L728         BuchiCegarLoop]: Abstraction has 10487 states and 12436 transitions.
[2020-11-25 02:48:45,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10487 states and 12436 transitions.
[2020-11-25 02:48:45,636 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10487 to 6120.
[2020-11-25 02:48:45,637 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6120 states.
[2020-11-25 02:48:45,643 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6120 states to 6120 states and 6871 transitions.
[2020-11-25 02:48:45,643 INFO  L751         BuchiCegarLoop]: Abstraction has 6120 states and 6871 transitions.
[2020-11-25 02:48:45,643 INFO  L631         BuchiCegarLoop]: Abstraction has 6120 states and 6871 transitions.
[2020-11-25 02:48:45,643 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 02:48:45,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6120 states and 6871 transitions.
[2020-11-25 02:48:45,649 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:48:45,649 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:45,649 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:45,650 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:45,650 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND FALSE  !(choice == 5)
[L12312]  COND FALSE  !(choice == 4)
[L12320]  COND FALSE  !(choice == 3)
[L12327]  COND FALSE  !(choice == 2)
[L12333]  COND TRUE   choice == 1
[L12334]              gas := gas - 21000;
[L12335]  COND TRUE   gas >= 0
[L12336]              assume value_s1663 >= 0 && value_s1663 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12337]              assume msgvalue_MSG == 0;
[L12338]  CALL        call __ret_0_mint := mint~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L3884]               havoc __exception;
[L3885]               revert := false;
[L3886]   COND FALSE  !(__exception)
[L3922]   CALL        call __ret_0_ := mint~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L8401]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8401]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8402]   COND FALSE  !(revert)
[L8405]   COND TRUE   DType[this] == ONIT
[L8406]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1663);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L8406]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s1663);
[L8407]   COND FALSE  !(revert)
[L8413]               __ret_0_ := true;
[L3922]   RET         call __ret_0_ := mint~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L3923]               assume !revert && gas >= 0;
[L12338]  RET         call __ret_0_mint := mint~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, value_s1663);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:45,656 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:45,656 INFO  L82        PathProgramCache]: Analyzing trace with hash 354782745, now seen corresponding path program 1 times
[2020-11-25 02:48:45,657 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:45,680 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:48:46,519 INFO  L134       CoverageAnalysis]: Checked inductivity of 1071 backedges. 114 proven. 99 refuted. 0 times theorem prover too weak. 858 trivial. 0 not checked.
[2020-11-25 02:48:46,519 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:48:46,519 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 02:48:46,520 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:48:46,520 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 02:48:46,520 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=1313, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 02:48:46,520 INFO  L87              Difference]: Start difference. First operand 6120 states and 6871 transitions. cyclomatic complexity: 774 Second operand 38 states.
[2020-11-25 02:48:59,787 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:48:59,788 INFO  L93              Difference]: Finished difference Result 6609 states and 7628 transitions.
[2020-11-25 02:48:59,788 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 02:48:59,788 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6609 states and 7628 transitions.
[2020-11-25 02:48:59,801 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:48:59,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6609 states to 6609 states and 7624 transitions.
[2020-11-25 02:48:59,816 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-11-25 02:48:59,816 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-11-25 02:48:59,816 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6609 states and 7624 transitions.
[2020-11-25 02:48:59,820 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:48:59,821 INFO  L728         BuchiCegarLoop]: Abstraction has 6609 states and 7624 transitions.
[2020-11-25 02:48:59,825 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6609 states and 7624 transitions.
[2020-11-25 02:48:59,853 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6609 to 6497.
[2020-11-25 02:48:59,853 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6497 states.
[2020-11-25 02:48:59,861 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6497 states to 6497 states and 7486 transitions.
[2020-11-25 02:48:59,861 INFO  L751         BuchiCegarLoop]: Abstraction has 6497 states and 7486 transitions.
[2020-11-25 02:48:59,861 INFO  L631         BuchiCegarLoop]: Abstraction has 6497 states and 7486 transitions.
[2020-11-25 02:48:59,862 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 02:48:59,862 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6497 states and 7486 transitions.
[2020-11-25 02:48:59,868 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:48:59,868 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:48:59,868 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:48:59,869 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:48:59,869 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:48:59,874 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:48:59,874 INFO  L82        PathProgramCache]: Analyzing trace with hash -44333214, now seen corresponding path program 1 times
[2020-11-25 02:48:59,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:48:59,920 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:00,280 INFO  L134       CoverageAnalysis]: Checked inductivity of 1084 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1084 trivial. 0 not checked.
[2020-11-25 02:49:00,280 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:49:00,280 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 02:49:00,281 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:49:00,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:49:00,281 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:49:00,281 INFO  L87              Difference]: Start difference. First operand 6497 states and 7486 transitions. cyclomatic complexity: 1024 Second operand 14 states.
[2020-11-25 02:49:07,458 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:07,458 INFO  L93              Difference]: Finished difference Result 6544 states and 7527 transitions.
[2020-11-25 02:49:07,458 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 02:49:07,458 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6544 states and 7527 transitions.
[2020-11-25 02:49:07,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:07,488 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6544 states to 6544 states and 7527 transitions.
[2020-11-25 02:49:07,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 976
[2020-11-25 02:49:07,489 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 976
[2020-11-25 02:49:07,489 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6544 states and 7527 transitions.
[2020-11-25 02:49:07,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:07,493 INFO  L728         BuchiCegarLoop]: Abstraction has 6544 states and 7527 transitions.
[2020-11-25 02:49:07,497 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6544 states and 7527 transitions.
[2020-11-25 02:49:07,519 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6544 to 6007.
[2020-11-25 02:49:07,519 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6007 states.
[2020-11-25 02:49:07,525 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6007 states to 6007 states and 6698 transitions.
[2020-11-25 02:49:07,525 INFO  L751         BuchiCegarLoop]: Abstraction has 6007 states and 6698 transitions.
[2020-11-25 02:49:07,525 INFO  L631         BuchiCegarLoop]: Abstraction has 6007 states and 6698 transitions.
[2020-11-25 02:49:07,525 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 02:49:07,525 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6007 states and 6698 transitions.
[2020-11-25 02:49:07,530 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:07,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:07,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:07,532 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:07,532 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false
[L7655]   CALL        call __var_41 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7655]   RET         call __var_41 := FreshRefGenerator__success();
[L7656]   COND FALSE  !(revert)
[L7659]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7660]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] := true;
[L7661]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == zerointRefArr();
[L7662]               assume M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG] == __var_41;
[L7663]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] == 0;
[L7665]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:07,537 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:07,537 INFO  L82        PathProgramCache]: Analyzing trace with hash -1806696149, now seen corresponding path program 1 times
[2020-11-25 02:49:07,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:07,562 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:08,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 1095 backedges. 107 proven. 6 refuted. 0 times theorem prover too weak. 982 trivial. 0 not checked.
[2020-11-25 02:49:08,244 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:49:08,244 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 02:49:08,244 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:49:08,245 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:49:08,245 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:49:08,245 INFO  L87              Difference]: Start difference. First operand 6007 states and 6698 transitions. cyclomatic complexity: 708 Second operand 26 states.
[2020-11-25 02:49:19,070 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:19,071 INFO  L93              Difference]: Finished difference Result 6161 states and 6880 transitions.
[2020-11-25 02:49:19,071 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:49:19,071 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6161 states and 6880 transitions.
[2020-11-25 02:49:19,082 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:19,093 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6161 states to 6161 states and 6880 transitions.
[2020-11-25 02:49:19,093 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1029
[2020-11-25 02:49:19,093 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1029
[2020-11-25 02:49:19,093 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6161 states and 6880 transitions.
[2020-11-25 02:49:19,097 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:19,097 INFO  L728         BuchiCegarLoop]: Abstraction has 6161 states and 6880 transitions.
[2020-11-25 02:49:19,101 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6161 states and 6880 transitions.
[2020-11-25 02:49:19,121 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6161 to 6007.
[2020-11-25 02:49:19,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6007 states.
[2020-11-25 02:49:19,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6007 states to 6007 states and 6698 transitions.
[2020-11-25 02:49:19,126 INFO  L751         BuchiCegarLoop]: Abstraction has 6007 states and 6698 transitions.
[2020-11-25 02:49:19,126 INFO  L631         BuchiCegarLoop]: Abstraction has 6007 states and 6698 transitions.
[2020-11-25 02:49:19,126 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 02:49:19,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6007 states and 6698 transitions.
[2020-11-25 02:49:19,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:19,132 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:19,132 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:19,133 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:19,133 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6766]   COND TRUE   DType[this] == ERC20
[L6767]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6767]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:19,138 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:19,139 INFO  L82        PathProgramCache]: Analyzing trace with hash 1721754295, now seen corresponding path program 1 times
[2020-11-25 02:49:19,139 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:19,160 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:19,478 INFO  L134       CoverageAnalysis]: Checked inductivity of 1091 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1090 trivial. 0 not checked.
[2020-11-25 02:49:19,478 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:49:19,478 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:49:19,479 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:49:19,479 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:49:19,479 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:49:19,479 INFO  L87              Difference]: Start difference. First operand 6007 states and 6698 transitions. cyclomatic complexity: 708 Second operand 8 states.
[2020-11-25 02:49:19,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:19,608 INFO  L93              Difference]: Finished difference Result 6077 states and 6768 transitions.
[2020-11-25 02:49:19,609 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:49:19,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6077 states and 6768 transitions.
[2020-11-25 02:49:19,618 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:19,627 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6077 states to 5997 states and 6684 transitions.
[2020-11-25 02:49:19,627 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 917
[2020-11-25 02:49:19,627 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 917
[2020-11-25 02:49:19,627 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5997 states and 6684 transitions.
[2020-11-25 02:49:19,630 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:19,630 INFO  L728         BuchiCegarLoop]: Abstraction has 5997 states and 6684 transitions.
[2020-11-25 02:49:19,634 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5997 states and 6684 transitions.
[2020-11-25 02:49:19,653 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5997 to 5997.
[2020-11-25 02:49:19,653 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5997 states.
[2020-11-25 02:49:19,658 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5997 states to 5997 states and 6684 transitions.
[2020-11-25 02:49:19,658 INFO  L751         BuchiCegarLoop]: Abstraction has 5997 states and 6684 transitions.
[2020-11-25 02:49:19,658 INFO  L631         BuchiCegarLoop]: Abstraction has 5997 states and 6684 transitions.
[2020-11-25 02:49:19,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 02:49:19,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5997 states and 6684 transitions.
[2020-11-25 02:49:19,663 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:19,663 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:19,664 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:19,665 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:19,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND FALSE  !(DType[this] == ONIT)
[L6761]   COND TRUE   DType[this] == ERC20Pausable
[L6762]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6762]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6763]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:19,670 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:19,671 INFO  L82        PathProgramCache]: Analyzing trace with hash 1543331746, now seen corresponding path program 1 times
[2020-11-25 02:49:19,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:19,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:19,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 1091 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1090 trivial. 0 not checked.
[2020-11-25 02:49:19,953 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:49:19,954 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:49:19,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:49:19,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:49:19,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:49:19,954 INFO  L87              Difference]: Start difference. First operand 5997 states and 6684 transitions. cyclomatic complexity: 704 Second operand 8 states.
[2020-11-25 02:49:20,060 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:20,060 INFO  L93              Difference]: Finished difference Result 6079 states and 6766 transitions.
[2020-11-25 02:49:20,060 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:49:20,060 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6079 states and 6766 transitions.
[2020-11-25 02:49:20,069 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:20,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6079 states to 5977 states and 6656 transitions.
[2020-11-25 02:49:20,078 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 913
[2020-11-25 02:49:20,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 913
[2020-11-25 02:49:20,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5977 states and 6656 transitions.
[2020-11-25 02:49:20,081 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:20,081 INFO  L728         BuchiCegarLoop]: Abstraction has 5977 states and 6656 transitions.
[2020-11-25 02:49:20,085 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5977 states and 6656 transitions.
[2020-11-25 02:49:20,104 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5977 to 5977.
[2020-11-25 02:49:20,104 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5977 states.
[2020-11-25 02:49:20,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5977 states to 5977 states and 6656 transitions.
[2020-11-25 02:49:20,109 INFO  L751         BuchiCegarLoop]: Abstraction has 5977 states and 6656 transitions.
[2020-11-25 02:49:20,109 INFO  L631         BuchiCegarLoop]: Abstraction has 5977 states and 6656 transitions.
[2020-11-25 02:49:20,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 02:49:20,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5977 states and 6656 transitions.
[2020-11-25 02:49:20,114 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:20,114 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:20,114 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:20,115 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:20,115 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false
[L7733]   CALL        call __var_45 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7733]   RET         call __var_45 := FreshRefGenerator__success();
[L7734]   COND FALSE  !(revert)
[L7737]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7738]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] := true;
[L7739]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7740]               assume M_Ref_Ref[timelockList_ONIT[this]][from_s1322] == __var_45;
[L7741]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] == 0;
[L7743]   COND FALSE  !(Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:20,120 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:20,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 1588073957, now seen corresponding path program 1 times
[2020-11-25 02:49:20,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:20,151 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:20,803 INFO  L134       CoverageAnalysis]: Checked inductivity of 1091 backedges. 98 proven. 6 refuted. 0 times theorem prover too weak. 987 trivial. 0 not checked.
[2020-11-25 02:49:20,803 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:49:20,804 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 02:49:20,804 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:49:20,804 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 02:49:20,804 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 02:49:20,805 INFO  L87              Difference]: Start difference. First operand 5977 states and 6656 transitions. cyclomatic complexity: 696 Second operand 26 states.
[2020-11-25 02:49:32,137 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:32,138 INFO  L93              Difference]: Finished difference Result 6153 states and 6854 transitions.
[2020-11-25 02:49:32,138 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:49:32,138 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6153 states and 6854 transitions.
[2020-11-25 02:49:32,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:32,158 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6153 states to 6153 states and 6854 transitions.
[2020-11-25 02:49:32,158 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1033
[2020-11-25 02:49:32,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1033
[2020-11-25 02:49:32,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6153 states and 6854 transitions.
[2020-11-25 02:49:32,162 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:32,162 INFO  L728         BuchiCegarLoop]: Abstraction has 6153 states and 6854 transitions.
[2020-11-25 02:49:32,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6153 states and 6854 transitions.
[2020-11-25 02:49:32,187 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6153 to 5989.
[2020-11-25 02:49:32,187 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5989 states.
[2020-11-25 02:49:32,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5989 states to 5989 states and 6665 transitions.
[2020-11-25 02:49:32,192 INFO  L751         BuchiCegarLoop]: Abstraction has 5989 states and 6665 transitions.
[2020-11-25 02:49:32,192 INFO  L631         BuchiCegarLoop]: Abstraction has 5989 states and 6665 transitions.
[2020-11-25 02:49:32,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 02:49:32,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5989 states and 6665 transitions.
[2020-11-25 02:49:32,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:32,198 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:32,198 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:32,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:32,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND TRUE   choice == 19
[L12217]              gas := gas - 21000;
[L12218]  COND TRUE   gas >= 0
[L12219]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12220]              assume msgvalue_MSG == 0;
[L12221]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7728]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7728]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7729]   COND FALSE  !(revert)
[L7732]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][from_s1322] == false)
[L7743]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][from_s1322]] > 0
[L7744]   CALL        call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8338]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false
[L8339]   CALL        call __var_67 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8339]   RET         call __var_67 := FreshRefGenerator__success();
[L8340]   COND FALSE  !(revert)
[L8343]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8344]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] := true;
[L8345]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == zerointRefArr();
[L8346]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1645] == __var_67;
[L8347]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]] == 0;
[L8349]               idx_s1645 := 0;
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7744]   RET         call __var_46 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7745]   COND FALSE  !(revert)
[L7749]   COND TRUE   DType[this] == ONIT
[L7750]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7224]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7224]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7225]   COND FALSE  !(revert)
[L7228]   COND TRUE   DType[this] == ONIT
[L7229]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6749]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6749]   RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6750]   COND FALSE  !(revert)
[L6753]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6754]               _allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6755]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_ERC20[this][from_s760][msgsender_MSG];
[L6756]   COND TRUE   DType[this] == ONIT
[L6757]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6757]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6758]   COND FALSE  !(revert)
[L6774]               assert { :EventEmitted "Approval_ERC20" } true;
[L6775]               __ret_0_ := true;
[L7229]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7230]   COND FALSE  !(revert)
[L7241]               __ret_0_ := __var_32;
[L7750]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7751]   COND FALSE  !(revert)
[L7757]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12221]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:32,204 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:32,204 INFO  L82        PathProgramCache]: Analyzing trace with hash 1505041427, now seen corresponding path program 1 times
[2020-11-25 02:49:32,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:32,226 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:32,622 INFO  L134       CoverageAnalysis]: Checked inductivity of 1091 backedges. 1 proven. 98 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 02:49:32,622 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:49:32,622 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 02:49:32,623 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:49:32,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:49:32,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:49:32,623 INFO  L87              Difference]: Start difference. First operand 5989 states and 6665 transitions. cyclomatic complexity: 693 Second operand 15 states.
[2020-11-25 02:49:37,047 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:37,047 INFO  L93              Difference]: Finished difference Result 6132 states and 6826 transitions.
[2020-11-25 02:49:37,047 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:49:37,047 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6132 states and 6826 transitions.
[2020-11-25 02:49:37,059 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:37,069 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6132 states to 6132 states and 6826 transitions.
[2020-11-25 02:49:37,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1017
[2020-11-25 02:49:37,069 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1017
[2020-11-25 02:49:37,069 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6132 states and 6826 transitions.
[2020-11-25 02:49:37,072 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:37,072 INFO  L728         BuchiCegarLoop]: Abstraction has 6132 states and 6826 transitions.
[2020-11-25 02:49:37,077 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6132 states and 6826 transitions.
[2020-11-25 02:49:37,096 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6132 to 5998.
[2020-11-25 02:49:37,096 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5998 states.
[2020-11-25 02:49:37,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5998 states to 5998 states and 6680 transitions.
[2020-11-25 02:49:37,102 INFO  L751         BuchiCegarLoop]: Abstraction has 5998 states and 6680 transitions.
[2020-11-25 02:49:37,102 INFO  L631         BuchiCegarLoop]: Abstraction has 5998 states and 6680 transitions.
[2020-11-25 02:49:37,102 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 02:49:37,102 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5998 states and 6680 transitions.
[2020-11-25 02:49:37,107 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:37,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:37,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:37,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:37,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:37,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:37,112 INFO  L82        PathProgramCache]: Analyzing trace with hash -693116150, now seen corresponding path program 1 times
[2020-11-25 02:49:37,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:37,242 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:37,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:37,560 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:37,560 INFO  L82        PathProgramCache]: Analyzing trace with hash 355764367, now seen corresponding path program 1 times
[2020-11-25 02:49:37,561 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:37,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:49:37,569 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:49:37,569 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:49:37,569 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:49:37,570 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 02:49:37,570 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:49:37,570 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:49:37,570 INFO  L87              Difference]: Start difference. First operand 5998 states and 6680 transitions. cyclomatic complexity: 699 Second operand 4 states.
[2020-11-25 02:49:38,491 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:49:38,491 INFO  L93              Difference]: Finished difference Result 6220 states and 6885 transitions.
[2020-11-25 02:49:38,491 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:49:38,492 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6220 states and 6885 transitions.
[2020-11-25 02:49:38,510 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:49:38,523 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6220 states to 6220 states and 6885 transitions.
[2020-11-25 02:49:38,523 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 917
[2020-11-25 02:49:38,524 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 917
[2020-11-25 02:49:38,524 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6220 states and 6885 transitions.
[2020-11-25 02:49:38,527 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:49:38,527 INFO  L728         BuchiCegarLoop]: Abstraction has 6220 states and 6885 transitions.
[2020-11-25 02:49:38,533 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6220 states and 6885 transitions.
[2020-11-25 02:49:38,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6220 to 5998.
[2020-11-25 02:49:38,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5998 states.
[2020-11-25 02:49:38,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5998 states to 5998 states and 6614 transitions.
[2020-11-25 02:49:38,601 INFO  L751         BuchiCegarLoop]: Abstraction has 5998 states and 6614 transitions.
[2020-11-25 02:49:38,601 INFO  L631         BuchiCegarLoop]: Abstraction has 5998 states and 6614 transitions.
[2020-11-25 02:49:38,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 02:49:38,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5998 states and 6614 transitions.
[2020-11-25 02:49:38,610 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:49:38,610 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:49:38,610 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:49:38,612 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:49:38,612 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ONIT0 := false;
[L2]                  call_transfer_ONIT0 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND FALSE  !(choice == 16)
[L12241]  COND FALSE  !(choice == 15)
[L12248]  COND FALSE  !(choice == 14)
[L12255]  COND FALSE  !(choice == 13)
[L12261]  COND FALSE  !(choice == 12)
[L12267]  COND FALSE  !(choice == 11)
[L12273]  COND FALSE  !(choice == 10)
[L12279]  COND FALSE  !(choice == 9)
[L12286]  COND FALSE  !(choice == 8)
[L12292]  COND FALSE  !(choice == 7)
[L12298]  COND FALSE  !(choice == 6)
[L12304]  COND TRUE   choice == 5
[L12305]              gas := gas - 21000;
[L12306]  COND TRUE   gas >= 0
[L12307]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12308]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12309]              assume msgvalue_MSG == 0;
[L12310]  CALL        call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12358]  RET         call CorralChoice_ONIT(this);
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND TRUE   choice == 21
[L12203]              gas := gas - 21000;
[L12204]  COND TRUE   gas >= 0
[L12205]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12206]              assume msgvalue_MSG == 0;
[L12207]  CALL        call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND TRUE   gas >= 0
[L12133]              assume msgvalue_MSG == 0;
[L12134]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6047]               __ret_0_ := owner_Ownable[this];
[L652]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L12134]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:49:38,649 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:38,649 INFO  L82        PathProgramCache]: Analyzing trace with hash -693116150, now seen corresponding path program 2 times
[2020-11-25 02:49:38,650 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:38,739 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:38,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:38,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:38,939 INFO  L82        PathProgramCache]: Analyzing trace with hash 1066161759, now seen corresponding path program 1 times
[2020-11-25 02:49:38,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:38,942 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:38,945 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:38,952 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:49:38,953 INFO  L82        PathProgramCache]: Analyzing trace with hash -720779288, now seen corresponding path program 1 times
[2020-11-25 02:49:38,953 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:49:39,034 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:49:39,126 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 02:49:39,592 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification that was a NOOP. DAG size: 404
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
[2020-11-25 02:49:39,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 02:49:40,647 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:49:42,281 WARN  L188               SmtUtils]: Spent 1.29 s on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:49:42,625 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:49:42,862 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:49:43,040 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 02:49:43,286 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 153
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 02:49:43,459 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 170
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-25 02:49:43,975 WARN  L188               SmtUtils]: Spent 252.00 ms on a formula simplification. DAG size of input: 321 DAG size of output: 316
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:49:44,169 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification that was a NOOP. DAG size: 298
[2020-11-25 02:49:44,570 WARN  L188               SmtUtils]: Spent 396.00 ms on a formula simplification. DAG size of input: 438 DAG size of output: 351
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 02:49:44,952 WARN  L188               SmtUtils]: Spent 297.00 ms on a formula simplification that was a NOOP. DAG size: 482
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 02:49:45,156 WARN  L188               SmtUtils]: Spent 197.00 ms on a formula simplification that was a NOOP. DAG size: 396
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 02:49:45,452 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification. DAG size of input: 130 DAG size of output: 126
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 02:49:46,115 WARN  L188               SmtUtils]: Spent 228.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 179
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:49:46,278 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 141
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 02:49:46,620 WARN  L188               SmtUtils]: Spent 282.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 153
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 02:49:46,730 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 112
[2020-11-25 02:49:47,321 WARN  L188               SmtUtils]: Spent 590.00 ms on a formula simplification. DAG size of input: 332 DAG size of output: 327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:49:47,818 WARN  L188               SmtUtils]: Spent 493.00 ms on a formula simplification that was a NOOP. DAG size: 308
[2020-11-25 02:49:49,040 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 400 DAG size of output: 359
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5003 to 9973
[2020-11-25 02:49:49,370 WARN  L188               SmtUtils]: Spent 320.00 ms on a formula simplification that was a NOOP. DAG size: 253
[2020-11-25 02:49:49,988 WARN  L188               SmtUtils]: Spent 616.00 ms on a formula simplification that was a NOOP. DAG size: 486
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-25 02:49:50,640 WARN  L188               SmtUtils]: Spent 642.00 ms on a formula simplification that was a NOOP. DAG size: 397
[2020-11-25 02:50:00,251 WARN  L188               SmtUtils]: Spent 9.61 s on a formula simplification. DAG size of input: 1053 DAG size of output: 1005
Garbage collection #1: 401 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 401 to 797
Garbage collection #2: 797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 797 to 1583
Garbage collection #3: 1583 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1583 to 3163
Garbage collection #4: 3163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3163 to 6323
Garbage collection #5: 6323 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6323 to 12641
Garbage collection #6: 12641 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12641 to 25261
Garbage collection #7: 25261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25261 to 50513
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 02:50:01,325 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification that was a NOOP. DAG size: 417
[2020-11-25 02:50:02,883 WARN  L188               SmtUtils]: Spent 1.52 s on a formula simplification that was a NOOP. DAG size: 542
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 02:50:03,828 WARN  L188               SmtUtils]: Spent 933.00 ms on a formula simplification that was a NOOP. DAG size: 417
[2020-11-25 02:50:07,035 WARN  L188               SmtUtils]: Spent 3.21 s on a formula simplification. DAG size of input: 544 DAG size of output: 543
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11177 to 22349
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 02:50:08,523 WARN  L188               SmtUtils]: Spent 1.48 s on a formula simplification that was a NOOP. DAG size: 539
[2020-11-25 02:50:08,573 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:50:08,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:50:08,684 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:50:08 BasicIcfg
[2020-11-25 02:50:08,684 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:50:08,685 INFO  L168              Benchmark]: Toolchain (without parser) took 151758.10 ms. Allocated memory was 1.0 GB in the beginning and 5.8 GB in the end (delta: 4.8 GB). Free memory was 919.1 MB in the beginning and 1.1 GB in the end (delta: -133.1 MB). Peak memory consumption was 4.9 GB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,685 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,685 INFO  L168              Benchmark]: Boogie Preprocessor took 183.43 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,685 INFO  L168              Benchmark]: UtopiaSpecLang took 89.52 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,685 INFO  L168              Benchmark]: Boogie Printer took 29.50 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 875.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,686 INFO  L168              Benchmark]: RCFGBuilder took 1346.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 875.9 MB in the beginning and 754.8 MB in the end (delta: 121.1 MB). Peak memory consumption was 187.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,686 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.15 ms. Allocated memory is still 1.1 GB. Free memory was 754.8 MB in the beginning and 751.3 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,686 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3339.66 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 468.2 MB). Free memory was 751.3 MB in the beginning and 820.7 MB in the end (delta: -69.4 MB). Peak memory consumption was 398.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,686 INFO  L168              Benchmark]: BlockEncodingV2 took 315.16 ms. Allocated memory is still 1.6 GB. Free memory was 820.7 MB in the beginning and 657.5 MB in the end (delta: 163.2 MB). Peak memory consumption was 163.2 MB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,686 INFO  L168              Benchmark]: BuchiAutomizer took 146416.39 ms. Allocated memory was 1.6 GB in the beginning and 5.8 GB in the end (delta: 4.2 GB). Free memory was 657.5 MB in the beginning and 1.1 GB in the end (delta: -394.7 MB). Peak memory consumption was 4.2 GB. Max. memory is 15.3 GB.
[2020-11-25 02:50:08,689 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11610 locations, 21023 edges
  - StatisticsResult: Encoded RCFG
    11358 locations, 20406 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 183.43 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 89.52 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 29.50 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 875.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1346.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 66.6 MB). Free memory was 875.9 MB in the beginning and 754.8 MB in the end (delta: 121.1 MB). Peak memory consumption was 187.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.15 ms. Allocated memory is still 1.1 GB. Free memory was 754.8 MB in the beginning and 751.3 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3339.66 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 468.2 MB). Free memory was 751.3 MB in the beginning and 820.7 MB in the end (delta: -69.4 MB). Peak memory consumption was 398.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 315.16 ms. Allocated memory is still 1.6 GB. Free memory was 820.7 MB in the beginning and 657.5 MB in the end (delta: 163.2 MB). Peak memory consumption was 163.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 146416.39 ms. Allocated memory was 1.6 GB in the beginning and 5.8 GB in the end (delta: 4.2 GB). Free memory was 657.5 MB in the beginning and 1.1 GB in the end (delta: -394.7 MB). Peak memory consumption was 4.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4677 locations, 6463 edges
  - StatisticsResult: BuchiProgram size
    11610 locations, 21023 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 39 terminating modules (39 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.39 modules have a trivial ranking function, the largest among these consists of 38 locations. The remainder module has 5998 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 146.2s and 40 iterations.  TraceHistogramMax:8. Analysis of lassos took 42.6s. Construction of modules took 76.7s. BÃ¼chi inclusion checks took 21.7s. Highest rank in rank-based complementation 0. Minimization of det autom 39. Minimization of nondet autom 0. Automata minimization 2.4s AutomataMinimizationTime, 39 MinimizatonAttempts, 10146 StatesRemovedByMinimization, 27 NontrivialMinimizations. Non-live state removal took 1.5s Buchi closure took 0.0s. Biggest automaton had 11824 states and ocurred in iteration 19.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 283774 SDtfs, 170122 SDslu, 936701 SDs, 0 SdLazy, 956330 SolverSat, 24752 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 76.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU38 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(789885600000000000000000022) = (new ONIT).gas(2)({from : 789885600000000000000000025});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
ONIT(789885600000000000000000022).lock~address~uint256~uint256.gas(3979002)({from : 789885600000000000000000025, holder : 789885600000000000000000025, value : 789885600000000000000000000, releaseTime : 1});
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7845]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10837]  COND TRUE   DType[this] == ONIT
[L10838]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6179]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6179]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6180]   COND FALSE  !(revert)
[L6183]               __ret_0_ := __var_13;
[L10838]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10839]  COND FALSE  !(revert)
[L10860]  COND TRUE   DType[this] == ONIT
[L10861]  CALL        call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND TRUE   account_s293 == owner_Ownable[this]
[L5976]               __ret_0_ := true;
[L10861]  RET         call __var_12 := isOwner~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10862]  COND FALSE  !(revert)
[L10883]  COND FALSE  !(!(__var_11 || __var_12))
[L7845]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7846]   COND FALSE  !(revert)
[L7849]   COND FALSE  !(!(_balances_ERC20[this][holder_s1410] >= value_s1410))
[L7853]   CALL        call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L8052]   CALL        call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8052]   RET         call __var_53 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1527], value_s1527);
[L8053]   COND FALSE  !(revert)
[L8056]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1527];
[L8057]               _balances_ERC20[this][holder_s1527] := __var_53;
[L8058]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1527];
[L8059]   COND TRUE   alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] == false
[L8060]   CALL        call __var_54 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8060]   RET         call __var_54 := FreshRefGenerator__success();
[L8061]   COND FALSE  !(revert)
[L8064]               assume Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8065]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1527] := true;
[L8066]               assume M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == zerointRefArr();
[L8067]               assume M_Ref_Ref[timelockList_ONIT[this]][holder_s1527] == __var_54;
[L8068]               assume sum[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] == 0;
[L8070]   CALL        call __var_56 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L8070]   RET         call __var_56 := FreshRefGenerator__success();
[L8071]   COND FALSE  !(revert)
[L8074]               assume DType[__var_56] == ONIT.LockInfo;
[L8075]   CALL        call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5620]               _releaseTime_ONIT.LockInfo[this] := _releaseTime;
[L5621]               _amount_ONIT.LockInfo[this] := _amount;
[L8075]   RET         call ONIT.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L8076]   COND FALSE  !(revert)
[L8079]               __var_55 := __var_56;
[L8080]               __var_58 := Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]];
[L8081]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]][__var_58] := __var_55;
[L8082]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1527]] := __var_58 + 1;
[L8083]               assert { :EventEmitted "Lock_ONIT" } true;
[L8084]               __ret_0_ := true;
[L7853]   RET         call __var_49 := _lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7854]   COND FALSE  !(revert)
[L7857]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12310]  RET         call __ret_0_lock := lock~address~uint256~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
ONIT(789885600000000000000000022).transfer~address~uint256.gas(3979003)({from : 789885600000000000000000025, to : 789885600000000000000000023, value : 789885600000000000000000000});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1288] >= 0) && _balances_ERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ONIT0 := true;
[L2]                  call_transfer_ONIT0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7650]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10931]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7650]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7651]   COND FALSE  !(revert)
[L7654]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][msgsender_MSG] == false)
[L7665]   COND TRUE   Length[M_Ref_Ref[timelockList_ONIT[this]][msgsender_MSG]] > 0
[L7666]   CALL        call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8338]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8349]               idx_s1645 := 0;
[L8350]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]]
[L8352]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1645] == false)
[L8363]   COND TRUE   _releaseTime_ONIT.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]][idx_s1645]] <= now
[L8364]   CALL        call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8197]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8208]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600];
[L8209]               releaseAmount_s1600 := _amount_ONIT.LockInfo[lockinfo_s1600];
[L8210]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8221]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8232]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8243]   CALL        call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L8243]   RET         call __var_62 := sub~uint256~uint256_SafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]], 1);
[L8244]   COND FALSE  !(revert)
[L8247]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8258]               M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]][__var_62];
[L8259]   COND FALSE  !(alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]][holder_s1600] == false)
[L8270]               Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8271]               assert { :EventEmitted "Unlock_ONIT" } true;
[L8272]   CALL        call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L8272]   RET         call __var_66 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][holder_s1600], releaseAmount_s1600);
[L8273]   COND FALSE  !(revert)
[L8276]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][holder_s1600];
[L8277]               _balances_ERC20[this][holder_s1600] := __var_66;
[L8278]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][holder_s1600];
[L8279]               __ret_0_ := true;
[L8364]   RET         call __var_69 := _unlock~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8365]   COND FALSE  !(revert)
[L8368]   COND TRUE   __var_69
[L8369]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8372]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8373]   COND FALSE  !(gas < 0)
[L8350]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_ONIT[this]][holder_s1645]])
[L8377]               __ret_0_ := true;
[L7666]   RET         call __var_42 := _autoUnlock~address_ONIT__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7667]   COND FALSE  !(revert)
[L7671]   COND TRUE   DType[this] == ONIT
[L7672]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7174]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10899]  COND FALSE  !(!!_paused_Pausable[this])
[L7174]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7175]   COND FALSE  !(revert)
[L7178]   COND TRUE   DType[this] == ONIT
[L7179]   CALL        call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6661]   COND TRUE   DType[this] == ONIT
[L6662]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6892]               __var_20 := null;
[L6893]   COND FALSE  !(!(to_s904 != null))
[L6897]   CALL        call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L5727]   COND FALSE  !(!(b_s82 <= a_s82))
[L5731]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5732]               __ret_0_ := c_s82;
[L6897]   RET         call __var_21 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s904], value_s904);
[L6898]   COND FALSE  !(revert)
[L6901]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s904];
[L6902]               _balances_ERC20[this][from_s904] := __var_21;
[L6903]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s904];
[L6904]   CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6904]   RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s904], value_s904);
[L6905]   COND FALSE  !(revert)
[L6908]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s904];
[L6909]               _balances_ERC20[this][to_s904] := __var_22;
[L6910]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s904];
[L6911]               assert { :EventEmitted "Transfer_ERC20" } true;
[L6662]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6663]   COND FALSE  !(revert)
[L6679]               __ret_0_ := true;
[L7179]   RET         call __var_30 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7180]   COND FALSE  !(revert)
[L7191]               __ret_0_ := __var_30;
[L7672]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7673]   COND FALSE  !(revert)
[L7679]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12207]  RET         call __ret_0_transfer := transfer~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
Ownable(789885600000000000000000022).owner.gas(3979001)({from : 789885600000000000000000029});
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6047]               __ret_0_ := owner_Ownable[this];
[L652]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L12134]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
