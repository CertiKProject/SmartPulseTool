This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:38:57,848 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:38:57,849 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:38:57,859 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:38:57,860 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:38:57,860 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:38:57,861 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:38:57,863 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:38:57,864 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:38:57,865 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:38:57,866 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:38:57,866 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:38:57,866 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:38:57,867 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:38:57,868 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:38:57,868 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:38:57,869 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:38:57,870 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:38:57,871 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:38:57,873 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:38:57,873 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:38:57,874 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:38:57,876 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:38:57,876 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:38:57,876 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:38:57,877 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:38:57,877 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:38:57,878 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:38:57,878 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:38:57,878 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:38:57,878 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:38:57,879 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:38:57,879 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:38:57,880 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:38:57,880 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:38:57,881 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:38:57,881 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:38:57,881 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:38:57,881 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:38:57,882 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:38:57,882 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:38:57,883 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:38:57,890 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:38:57,890 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:38:57,891 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:38:57,891 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:38:57,891 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:38:57,891 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:38:57,891 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:38:57,891 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:38:57,892 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:38:57,892 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:38:57,892 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:38:57,892 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:38:57,892 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:38:57,892 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:38:57,892 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:38:57,892 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:38:57,893 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:38:57,893 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:38:57,894 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:38:57,894 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:38:57,914 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:38:57,924 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:38:57,927 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:38:57,928 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:38:57,928 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:38:57,929 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl
[2020-11-25 03:38:57,929 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl'
[2020-11-25 03:38:58,052 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:38:58,053 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:38:58,053 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:38:58,053 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:38:58,054 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:38:58,070 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,072 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,125 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,126 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,162 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,184 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,203 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,224 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:38:58,225 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:38:58,225 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:38:58,227 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:38:58,231 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/1) ...
[2020-11-25 03:38:58,255 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 03:38:58,262 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 03:38:58,269 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 03:38:58,278 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s383!=recipient_s383 && ( ( amount_s383>_balances_ERC20[this][sender_s383] || amount_s383>_allowances_ERC20[this][sender_s383][msg.sender] ) || ( _balances_ERC20[this][recipient_s383] + amount_s383 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s383>=0 ) && amount_s383<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s383]>=0 ) && _balances_ERC20[this][recipient_s383]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s383]>=0 ) && _balances_ERC20[this][sender_s383]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s383][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s383][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IdentifierExpression[amount_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s383,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:38:58,289 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 03:38:58,289 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:38:58,310 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:38:58 PropertyContainer
[2020-11-25 03:38:58,310 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:38:58,311 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:38:58,311 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:38:58,311 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:38:58,312 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/2) ...
[2020-11-25 03:38:58,312 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:38:58,312 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:38:58,339 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:38:58" (2/2) ...
[2020-11-25 03:38:58,339 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:38:58,340 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:38:58,340 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:38:58,340 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:38:58,341 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/2) ...
[2020-11-25 03:38:58,396 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:38:58,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:38:58,397 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:38:58,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:38:58,398 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:38:58,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,399 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:38:58,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:38:58,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:38:58,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:38:58,400 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:38:58,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:38:58,400 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:38:58,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:38:58,400 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:38:58,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:38:58,400 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:38:58,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:38:58,401 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:38:58,401 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:38:58,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:38:58,402 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:38:58,403 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:38:58,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:38:58,403 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:38:58,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:38:58,403 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:38:58,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:38:58,403 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:38:58,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:38:58,403 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:38:58,403 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:38:58,404 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:38:58,404 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:38:58,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:38:58,404 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:38:58,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:38:58,404 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:38:58,404 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:38:58,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:38:58,404 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:38:58,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:38:58,405 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:38:58,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:38:58,405 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:38:58,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:38:58,406 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:38:58,406 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:38:58,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:38:58,406 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:38:58,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:38:58,406 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 03:38:58,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 03:38:58,406 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 03:38:58,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 03:38:58,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:38:58,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage
[2020-11-25 03:38:58,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage
[2020-11-25 03:38:58,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage
[2020-11-25 03:38:58,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage
[2020-11-25 03:38:58,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage
[2020-11-25 03:38:58,407 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage
[2020-11-25 03:38:58,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage
[2020-11-25 03:38:58,408 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage
[2020-11-25 03:38:58,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage
[2020-11-25 03:38:58,408 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage
[2020-11-25 03:38:58,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage
[2020-11-25 03:38:58,408 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:38:58,408 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable
[2020-11-25 03:38:58,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable
[2020-11-25 03:38:58,408 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable
[2020-11-25 03:38:58,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable
[2020-11-25 03:38:58,409 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable
[2020-11-25 03:38:58,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable
[2020-11-25 03:38:58,409 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable
[2020-11-25 03:38:58,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable
[2020-11-25 03:38:58,409 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:38:58,409 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken
[2020-11-25 03:38:58,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken
[2020-11-25 03:38:58,409 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken
[2020-11-25 03:38:58,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken
[2020-11-25 03:38:58,409 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken
[2020-11-25 03:38:58,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:38:58,410 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:38:58,411 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:38:58,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Storage
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Storage
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Governable
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Governable
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RewardToken
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:38:58,413 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:38:58,414 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:38:58,415 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:38:58,416 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:38:58,417 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:38:58,418 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:38:58,419 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:38:58,420 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:38:58,421 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__success
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__success
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__success
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__success
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__fail
[2020-11-25 03:38:58,422 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__success
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__fail
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__success
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__fail
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__success
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__fail
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__success
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__fail
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__success
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__fail
[2020-11-25 03:38:58,423 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__success
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__fail
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__success
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__fail
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__success
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__fail
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__success
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:38:58,424 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__fail
[2020-11-25 03:38:58,425 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:38:58,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:38:58,425 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:38:58,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:38:58,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:38:58,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:38:58,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:38:58,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:38:58,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:38:58,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:38:58,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:38:58,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__fail
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__success
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__fail
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__success
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__fail
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__success
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__fail
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__success
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__fail
[2020-11-25 03:38:58,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__fail
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__fail
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__fail
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__fail
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__fail
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__success
[2020-11-25 03:38:58,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:38:58,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__fail
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__success
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:38:58,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:38:58,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Storage
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Storage
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Governable
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Governable
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RewardToken
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:38:58,441 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:38:58,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:38:58,884 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:38:58,884 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:38:59,908 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:38:59,908 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 03:38:59,911 INFO  L202        PluginConnector]: Adding new model RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:38:59 BoogieIcfgContainer
[2020-11-25 03:38:59,911 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:38:58" (2/2) ...
[2020-11-25 03:38:59,911 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:38:59,911 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2e0f2e86 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:38:59, skipping insertion in model container
[2020-11-25 03:38:59,911 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:38:59,912 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:38:59,912 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:38:59,913 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:38:59,913 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/3) ...
[2020-11-25 03:38:59,913 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@41a65271 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:38:59, skipping insertion in model container
[2020-11-25 03:38:59,913 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:38:58" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:38:59,946 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:38:59 NWAContainer
[2020-11-25 03:38:59,946 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:38:59,947 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:38:59,947 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:38:59,947 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:38:59,948 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:38:59" (3/4) ...
[2020-11-25 03:38:59,949 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@29ca7ed6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:38:59, skipping insertion in model container
[2020-11-25 03:38:59,949 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:38:59" (4/4) ...
[2020-11-25 03:38:59,952 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:38:59,958 INFO  L110   BuchiProductObserver]: Initial RCFG 4290 locations, 6250 edges
[2020-11-25 03:38:59,959 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:38:59,970 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:39:03,536 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:39:03,550 INFO  L110   BuchiProductObserver]: BuchiProgram size 11010 locations, 20406 edges
[2020-11-25 03:39:03,551 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:39:03 BoogieIcfgContainer
[2020-11-25 03:39:03,551 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:39:03,551 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:39:03,551 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:39:03,553 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:39:03,553 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:39:03" (1/1) ...
[2020-11-25 03:39:03,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:39:03,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:39:03,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:39:03,724 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:39:03,740 INFO  L313           BlockEncoder]: Initial Icfg 11010 locations, 20406 edges
[2020-11-25 03:39:03,741 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:39:03,741 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:39:03,741 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:39:03,742 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:39:03,760 INFO  L70    emoveInfeasibleEdges]: Removed 309 edges and 29 locations because of local infeasibility
[2020-11-25 03:39:03,780 INFO  L70        RemoveSinkStates]: Removed 258 edges and 162 locations by removing sink states
[2020-11-25 03:39:03,802 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:39:03,812 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:39:03,819 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:39:03,820 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:39:03,824 INFO  L313           BlockEncoder]: Encoded RCFG 10775 locations, 19774 edges
[2020-11-25 03:39:03,825 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:39:03 BasicIcfg
[2020-11-25 03:39:03,825 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:39:03,825 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:39:03,825 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:39:03,827 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:39:03,827 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:39:03,827 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:38:58" (1/6) ...
[2020-11-25 03:39:03,828 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4bf8d13a and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:39:03, skipping insertion in model container
[2020-11-25 03:39:03,828 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:39:03,828 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:38:58" (2/6) ...
[2020-11-25 03:39:03,829 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4bf8d13a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:39:03, skipping insertion in model container
[2020-11-25 03:39:03,829 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:39:03,829 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:38:59" (3/6) ...
[2020-11-25 03:39:03,829 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4bf8d13a and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:39:03, skipping insertion in model container
[2020-11-25 03:39:03,829 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:39:03,829 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:38:59" (4/6) ...
[2020-11-25 03:39:03,830 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4bf8d13a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:39:03, skipping insertion in model container
[2020-11-25 03:39:03,830 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:39:03,830 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:39:03" (5/6) ...
[2020-11-25 03:39:03,830 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4bf8d13a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:39:03, skipping insertion in model container
[2020-11-25 03:39:03,830 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:39:03,830 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:39:03" (6/6) ...
[2020-11-25 03:39:03,831 INFO  L404   chiAutomizerObserver]: Analyzing ICFG RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transferfrom-fail.bpl_BEv2
[2020-11-25 03:39:03,866 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:39:03,866 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:39:03,867 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:39:03,867 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:39:03,867 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:39:03,867 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:39:03,867 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:39:03,867 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:39:03,867 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:39:03,945 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10775 states.
[2020-11-25 03:39:04,027 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:04,028 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:04,028 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:04,038 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:04,038 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:04,038 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:39:04,038 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10775 states.
[2020-11-25 03:39:04,087 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:04,087 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:04,087 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:04,089 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:04,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:04,108 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:04,108 INFO  L82        PathProgramCache]: Analyzing trace with hash 490836586, now seen corresponding path program 1 times
[2020-11-25 03:39:04,114 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:04,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:04,231 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:39:04,232 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:04,233 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:39:04,594 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:04,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:39:04,607 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:39:04,608 INFO  L87              Difference]: Start difference. First operand 10775 states. Second operand 4 states.
[2020-11-25 03:39:05,564 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:05,564 INFO  L93              Difference]: Finished difference Result 5094 states and 6374 transitions.
[2020-11-25 03:39:05,564 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:39:05,565 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5094 states and 6374 transitions.
[2020-11-25 03:39:05,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:05,626 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5094 states to 5094 states and 6374 transitions.
[2020-11-25 03:39:05,627 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 03:39:05,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 968
[2020-11-25 03:39:05,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5094 states and 6374 transitions.
[2020-11-25 03:39:05,642 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:05,642 INFO  L728         BuchiCegarLoop]: Abstraction has 5094 states and 6374 transitions.
[2020-11-25 03:39:05,659 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5094 states and 6374 transitions.
[2020-11-25 03:39:05,732 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5094 to 5094.
[2020-11-25 03:39:05,732 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5094 states.
[2020-11-25 03:39:05,741 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5094 states to 5094 states and 6374 transitions.
[2020-11-25 03:39:05,742 INFO  L751         BuchiCegarLoop]: Abstraction has 5094 states and 6374 transitions.
[2020-11-25 03:39:05,742 INFO  L631         BuchiCegarLoop]: Abstraction has 5094 states and 6374 transitions.
[2020-11-25 03:39:05,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:39:05,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5094 states and 6374 transitions.
[2020-11-25 03:39:05,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:05,753 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:05,753 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:05,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:05,756 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:05,764 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:05,764 INFO  L82        PathProgramCache]: Analyzing trace with hash 1711356087, now seen corresponding path program 1 times
[2020-11-25 03:39:05,766 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:05,778 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:05,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:39:05,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:05,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:05,812 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:05,812 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:05,812 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:05,813 INFO  L87              Difference]: Start difference. First operand 5094 states and 6374 transitions. cyclomatic complexity: 1282 Second operand 3 states.
[2020-11-25 03:39:06,073 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:06,073 INFO  L93              Difference]: Finished difference Result 6477 states and 7880 transitions.
[2020-11-25 03:39:06,073 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:06,073 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6477 states and 7880 transitions.
[2020-11-25 03:39:06,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:06,134 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6477 states to 6477 states and 7880 transitions.
[2020-11-25 03:39:06,134 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1341
[2020-11-25 03:39:06,135 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1341
[2020-11-25 03:39:06,135 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6477 states and 7880 transitions.
[2020-11-25 03:39:06,142 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:06,142 INFO  L728         BuchiCegarLoop]: Abstraction has 6477 states and 7880 transitions.
[2020-11-25 03:39:06,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6477 states and 7880 transitions.
[2020-11-25 03:39:06,209 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6477 to 5979.
[2020-11-25 03:39:06,209 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5979 states.
[2020-11-25 03:39:06,218 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5979 states to 5979 states and 7279 transitions.
[2020-11-25 03:39:06,219 INFO  L751         BuchiCegarLoop]: Abstraction has 5979 states and 7279 transitions.
[2020-11-25 03:39:06,219 INFO  L631         BuchiCegarLoop]: Abstraction has 5979 states and 7279 transitions.
[2020-11-25 03:39:06,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:39:06,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5979 states and 7279 transitions.
[2020-11-25 03:39:06,227 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:06,227 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:06,227 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:06,229 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:06,229 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND TRUE   DType[this] == ERC20Capped
[L6413]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND TRUE   !(account_s734 != null)
[L6301]               revert := true;
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND TRUE   revert
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6413]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6414]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:06,233 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:06,233 INFO  L82        PathProgramCache]: Analyzing trace with hash 1153662044, now seen corresponding path program 1 times
[2020-11-25 03:39:06,234 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:06,245 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:06,291 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:39:06,291 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:06,292 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:06,292 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:06,292 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:06,292 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:06,292 INFO  L87              Difference]: Start difference. First operand 5979 states and 7279 transitions. cyclomatic complexity: 1302 Second operand 3 states.
[2020-11-25 03:39:06,370 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:06,370 INFO  L93              Difference]: Finished difference Result 5984 states and 7284 transitions.
[2020-11-25 03:39:06,370 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:06,371 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5984 states and 7284 transitions.
[2020-11-25 03:39:06,385 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:06,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5984 states to 5984 states and 7284 transitions.
[2020-11-25 03:39:06,406 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1252
[2020-11-25 03:39:06,406 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1252
[2020-11-25 03:39:06,407 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5984 states and 7284 transitions.
[2020-11-25 03:39:06,413 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:06,413 INFO  L728         BuchiCegarLoop]: Abstraction has 5984 states and 7284 transitions.
[2020-11-25 03:39:06,419 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5984 states and 7284 transitions.
[2020-11-25 03:39:06,468 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5984 to 5980.
[2020-11-25 03:39:06,469 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5980 states.
[2020-11-25 03:39:06,476 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5980 states to 5980 states and 7280 transitions.
[2020-11-25 03:39:06,476 INFO  L751         BuchiCegarLoop]: Abstraction has 5980 states and 7280 transitions.
[2020-11-25 03:39:06,476 INFO  L631         BuchiCegarLoop]: Abstraction has 5980 states and 7280 transitions.
[2020-11-25 03:39:06,476 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:39:06,476 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5980 states and 7280 transitions.
[2020-11-25 03:39:06,485 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:06,485 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:06,485 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:06,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:06,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND TRUE   !(account_s734 != null)
[L6301]               revert := true;
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND TRUE   revert
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:06,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:06,491 INFO  L82        PathProgramCache]: Analyzing trace with hash 904119397, now seen corresponding path program 1 times
[2020-11-25 03:39:06,492 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:06,500 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:06,622 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:39:06,622 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:39:06,622 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:39:06,623 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:06,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:39:06,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:39:06,624 INFO  L87              Difference]: Start difference. First operand 5980 states and 7280 transitions. cyclomatic complexity: 1302 Second operand 12 states.
[2020-11-25 03:39:06,982 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:06,982 INFO  L93              Difference]: Finished difference Result 6040 states and 7373 transitions.
[2020-11-25 03:39:06,982 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:39:06,983 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6040 states and 7373 transitions.
[2020-11-25 03:39:06,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:07,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6040 states to 6040 states and 7373 transitions.
[2020-11-25 03:39:07,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1268
[2020-11-25 03:39:07,011 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1268
[2020-11-25 03:39:07,011 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6040 states and 7373 transitions.
[2020-11-25 03:39:07,016 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:07,017 INFO  L728         BuchiCegarLoop]: Abstraction has 6040 states and 7373 transitions.
[2020-11-25 03:39:07,021 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6040 states and 7373 transitions.
[2020-11-25 03:39:07,055 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6040 to 6024.
[2020-11-25 03:39:07,056 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6024 states.
[2020-11-25 03:39:07,062 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6024 states to 6024 states and 7349 transitions.
[2020-11-25 03:39:07,062 INFO  L751         BuchiCegarLoop]: Abstraction has 6024 states and 7349 transitions.
[2020-11-25 03:39:07,062 INFO  L631         BuchiCegarLoop]: Abstraction has 6024 states and 7349 transitions.
[2020-11-25 03:39:07,062 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:39:07,062 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6024 states and 7349 transitions.
[2020-11-25 03:39:07,068 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:07,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:07,068 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:07,069 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:07,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND TRUE   !!__var_29
[L6250]               revert := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND TRUE   revert
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:07,072 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:07,073 INFO  L82        PathProgramCache]: Analyzing trace with hash 887280220, now seen corresponding path program 1 times
[2020-11-25 03:39:07,073 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:07,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:07,116 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:39:07,116 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:07,116 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:07,117 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:07,117 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:07,117 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:07,117 INFO  L87              Difference]: Start difference. First operand 6024 states and 7349 transitions. cyclomatic complexity: 1327 Second operand 3 states.
[2020-11-25 03:39:07,218 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:07,218 INFO  L93              Difference]: Finished difference Result 6499 states and 7629 transitions.
[2020-11-25 03:39:07,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:07,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6499 states and 7629 transitions.
[2020-11-25 03:39:07,231 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:07,246 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6499 states to 5963 states and 6966 transitions.
[2020-11-25 03:39:07,246 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1194
[2020-11-25 03:39:07,247 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1233
[2020-11-25 03:39:07,247 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5963 states and 6966 transitions.
[2020-11-25 03:39:07,251 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:07,252 INFO  L728         BuchiCegarLoop]: Abstraction has 5963 states and 6966 transitions.
[2020-11-25 03:39:07,256 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5963 states and 6966 transitions.
[2020-11-25 03:39:07,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5963 to 5554.
[2020-11-25 03:39:07,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5554 states.
[2020-11-25 03:39:07,297 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5554 states to 5554 states and 6454 transitions.
[2020-11-25 03:39:07,297 INFO  L751         BuchiCegarLoop]: Abstraction has 5554 states and 6454 transitions.
[2020-11-25 03:39:07,297 INFO  L631         BuchiCegarLoop]: Abstraction has 5554 states and 6454 transitions.
[2020-11-25 03:39:07,297 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:39:07,297 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5554 states and 6454 transitions.
[2020-11-25 03:39:07,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:07,303 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:07,303 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:07,307 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:07,307 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6351]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6351]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6352]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6351]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6351]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6352]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6351]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6351]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6352]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6351]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6351]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6352]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND TRUE   __tmp__DType[this] == RewardToken
[L6548]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6548]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6549]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6576]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6576]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6577]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:07,314 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:07,314 INFO  L82        PathProgramCache]: Analyzing trace with hash -561127572, now seen corresponding path program 1 times
[2020-11-25 03:39:07,315 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:07,330 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:07,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 1653 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1611 trivial. 0 not checked.
[2020-11-25 03:39:07,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:39:07,550 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:39:07,550 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:07,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:07,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:07,551 INFO  L87              Difference]: Start difference. First operand 5554 states and 6454 transitions. cyclomatic complexity: 902 Second operand 3 states.
[2020-11-25 03:39:07,592 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:07,592 INFO  L93              Difference]: Finished difference Result 5557 states and 6457 transitions.
[2020-11-25 03:39:07,592 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:07,593 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5557 states and 6457 transitions.
[2020-11-25 03:39:07,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:07,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5557 states to 5557 states and 6457 transitions.
[2020-11-25 03:39:07,612 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-25 03:39:07,613 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1182
[2020-11-25 03:39:07,613 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5557 states and 6457 transitions.
[2020-11-25 03:39:07,616 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:07,616 INFO  L728         BuchiCegarLoop]: Abstraction has 5557 states and 6457 transitions.
[2020-11-25 03:39:07,620 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5557 states and 6457 transitions.
[2020-11-25 03:39:07,644 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5557 to 5555.
[2020-11-25 03:39:07,645 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5555 states.
[2020-11-25 03:39:07,650 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5555 states to 5555 states and 6455 transitions.
[2020-11-25 03:39:07,650 INFO  L751         BuchiCegarLoop]: Abstraction has 5555 states and 6455 transitions.
[2020-11-25 03:39:07,650 INFO  L631         BuchiCegarLoop]: Abstraction has 5555 states and 6455 transitions.
[2020-11-25 03:39:07,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:39:07,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5555 states and 6455 transitions.
[2020-11-25 03:39:07,655 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:07,655 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:07,655 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:07,658 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:07,658 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6557]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6558]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6558]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6570]   COND TRUE   __tmp__DType[this] == RewardToken
[L6571]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6571]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6572]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:07,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:07,665 INFO  L82        PathProgramCache]: Analyzing trace with hash -552079284, now seen corresponding path program 1 times
[2020-11-25 03:39:07,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:07,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:07,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:07,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:07,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:07,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:07,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:07,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:07,970 INFO  L87              Difference]: Start difference. First operand 5555 states and 6455 transitions. cyclomatic complexity: 902 Second operand 3 states.
[2020-11-25 03:39:08,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:08,018 INFO  L93              Difference]: Finished difference Result 5565 states and 6466 transitions.
[2020-11-25 03:39:08,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:08,018 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5565 states and 6466 transitions.
[2020-11-25 03:39:08,026 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:08,036 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5565 states to 5565 states and 6466 transitions.
[2020-11-25 03:39:08,036 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1186
[2020-11-25 03:39:08,037 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1186
[2020-11-25 03:39:08,037 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5565 states and 6466 transitions.
[2020-11-25 03:39:08,040 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:08,040 INFO  L728         BuchiCegarLoop]: Abstraction has 5565 states and 6466 transitions.
[2020-11-25 03:39:08,044 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5565 states and 6466 transitions.
[2020-11-25 03:39:08,069 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5565 to 5557.
[2020-11-25 03:39:08,069 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5557 states.
[2020-11-25 03:39:08,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5557 states to 5557 states and 6457 transitions.
[2020-11-25 03:39:08,074 INFO  L751         BuchiCegarLoop]: Abstraction has 5557 states and 6457 transitions.
[2020-11-25 03:39:08,075 INFO  L631         BuchiCegarLoop]: Abstraction has 5557 states and 6457 transitions.
[2020-11-25 03:39:08,075 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:39:08,075 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5557 states and 6457 transitions.
[2020-11-25 03:39:08,080 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:08,080 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:08,080 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:08,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:08,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND TRUE   __tmp__DType[this] == RewardToken
[L6548]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6548]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6549]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6580]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6585]   COND TRUE   __tmp__DType[this] == MinterRole
[L6586]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6586]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6587]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5421]   COND TRUE   DType[this] == ERC20
[L5422]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5422]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5421]   COND TRUE   DType[this] == ERC20
[L5422]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5422]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:08,088 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:08,088 INFO  L82        PathProgramCache]: Analyzing trace with hash 921455699, now seen corresponding path program 1 times
[2020-11-25 03:39:08,089 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:08,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:08,343 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:08,344 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:08,344 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:08,344 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:08,344 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:08,344 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:08,345 INFO  L87              Difference]: Start difference. First operand 5557 states and 6457 transitions. cyclomatic complexity: 902 Second operand 3 states.
[2020-11-25 03:39:08,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:08,387 INFO  L93              Difference]: Finished difference Result 5565 states and 6464 transitions.
[2020-11-25 03:39:08,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:08,387 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5565 states and 6464 transitions.
[2020-11-25 03:39:08,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:08,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5565 states to 5565 states and 6464 transitions.
[2020-11-25 03:39:08,405 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1186
[2020-11-25 03:39:08,406 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1186
[2020-11-25 03:39:08,406 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5565 states and 6464 transitions.
[2020-11-25 03:39:08,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:08,409 INFO  L728         BuchiCegarLoop]: Abstraction has 5565 states and 6464 transitions.
[2020-11-25 03:39:08,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5565 states and 6464 transitions.
[2020-11-25 03:39:08,437 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5565 to 5557.
[2020-11-25 03:39:08,437 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5557 states.
[2020-11-25 03:39:08,442 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5557 states to 5557 states and 6455 transitions.
[2020-11-25 03:39:08,442 INFO  L751         BuchiCegarLoop]: Abstraction has 5557 states and 6455 transitions.
[2020-11-25 03:39:08,442 INFO  L631         BuchiCegarLoop]: Abstraction has 5557 states and 6455 transitions.
[2020-11-25 03:39:08,442 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:39:08,442 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5557 states and 6455 transitions.
[2020-11-25 03:39:08,447 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:08,447 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:08,447 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:08,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:08,449 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6557]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6562]   COND TRUE   __tmp__DType[this] == MinterRole
[L6563]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6563]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6564]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6580]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6581]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6581]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6582]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:08,456 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:08,456 INFO  L82        PathProgramCache]: Analyzing trace with hash 808041331, now seen corresponding path program 1 times
[2020-11-25 03:39:08,457 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:08,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:08,786 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:08,787 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:08,787 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:08,788 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:08,788 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:08,788 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:08,789 INFO  L87              Difference]: Start difference. First operand 5557 states and 6455 transitions. cyclomatic complexity: 900 Second operand 3 states.
[2020-11-25 03:39:08,863 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:08,863 INFO  L93              Difference]: Finished difference Result 5571 states and 6472 transitions.
[2020-11-25 03:39:08,863 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:08,863 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5571 states and 6472 transitions.
[2020-11-25 03:39:08,876 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:08,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5571 states to 5571 states and 6472 transitions.
[2020-11-25 03:39:08,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1186
[2020-11-25 03:39:08,892 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1186
[2020-11-25 03:39:08,892 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5571 states and 6472 transitions.
[2020-11-25 03:39:08,895 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:08,895 INFO  L728         BuchiCegarLoop]: Abstraction has 5571 states and 6472 transitions.
[2020-11-25 03:39:08,900 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5571 states and 6472 transitions.
[2020-11-25 03:39:08,934 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5571 to 5563.
[2020-11-25 03:39:08,934 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5563 states.
[2020-11-25 03:39:08,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5563 states to 5563 states and 6463 transitions.
[2020-11-25 03:39:08,941 INFO  L751         BuchiCegarLoop]: Abstraction has 5563 states and 6463 transitions.
[2020-11-25 03:39:08,941 INFO  L631         BuchiCegarLoop]: Abstraction has 5563 states and 6463 transitions.
[2020-11-25 03:39:08,942 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:39:08,942 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5563 states and 6463 transitions.
[2020-11-25 03:39:08,949 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:39:08,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:08,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:08,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:08,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6557]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6558]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6558]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6580]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6581]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6581]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6582]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:08,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:08,962 INFO  L82        PathProgramCache]: Analyzing trace with hash -1436289478, now seen corresponding path program 1 times
[2020-11-25 03:39:08,963 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:08,989 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:09,252 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:09,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:09,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:39:09,253 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:09,253 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:39:09,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:39:09,254 INFO  L87              Difference]: Start difference. First operand 5563 states and 6463 transitions. cyclomatic complexity: 902 Second operand 8 states.
[2020-11-25 03:39:10,366 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:10,366 INFO  L93              Difference]: Finished difference Result 7730 states and 9095 transitions.
[2020-11-25 03:39:10,366 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:39:10,366 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7730 states and 9095 transitions.
[2020-11-25 03:39:10,390 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:10,411 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7730 states to 7727 states and 9092 transitions.
[2020-11-25 03:39:10,412 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1645
[2020-11-25 03:39:10,413 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1645
[2020-11-25 03:39:10,413 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7727 states and 9092 transitions.
[2020-11-25 03:39:10,418 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:10,418 INFO  L728         BuchiCegarLoop]: Abstraction has 7727 states and 9092 transitions.
[2020-11-25 03:39:10,423 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7727 states and 9092 transitions.
[2020-11-25 03:39:10,483 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7727 to 7641.
[2020-11-25 03:39:10,483 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7641 states.
[2020-11-25 03:39:10,494 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7641 states to 7641 states and 9006 transitions.
[2020-11-25 03:39:10,494 INFO  L751         BuchiCegarLoop]: Abstraction has 7641 states and 9006 transitions.
[2020-11-25 03:39:10,494 INFO  L631         BuchiCegarLoop]: Abstraction has 7641 states and 9006 transitions.
[2020-11-25 03:39:10,494 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:39:10,494 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7641 states and 9006 transitions.
[2020-11-25 03:39:10,505 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:10,505 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:10,505 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:10,508 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:10,508 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6553]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6553]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6580]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6585]   COND TRUE   __tmp__DType[this] == MinterRole
[L6586]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6586]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6587]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5421]   COND TRUE   DType[this] == ERC20
[L5422]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5422]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5421]   COND TRUE   DType[this] == ERC20
[L5422]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5422]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:10,517 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:10,517 INFO  L82        PathProgramCache]: Analyzing trace with hash 1224342060, now seen corresponding path program 1 times
[2020-11-25 03:39:10,518 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:10,544 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:10,783 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:10,783 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:10,783 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:10,784 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:10,784 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:10,784 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:10,784 INFO  L87              Difference]: Start difference. First operand 7641 states and 9006 transitions. cyclomatic complexity: 1369 Second operand 3 states.
[2020-11-25 03:39:10,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:10,838 INFO  L93              Difference]: Finished difference Result 7653 states and 9019 transitions.
[2020-11-25 03:39:10,838 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:10,838 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7653 states and 9019 transitions.
[2020-11-25 03:39:10,852 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:10,866 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7653 states to 7653 states and 9019 transitions.
[2020-11-25 03:39:10,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1627
[2020-11-25 03:39:10,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1627
[2020-11-25 03:39:10,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7653 states and 9019 transitions.
[2020-11-25 03:39:10,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:10,870 INFO  L728         BuchiCegarLoop]: Abstraction has 7653 states and 9019 transitions.
[2020-11-25 03:39:10,875 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7653 states and 9019 transitions.
[2020-11-25 03:39:10,915 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7653 to 7645.
[2020-11-25 03:39:10,915 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7645 states.
[2020-11-25 03:39:10,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7645 states to 7645 states and 9010 transitions.
[2020-11-25 03:39:10,923 INFO  L751         BuchiCegarLoop]: Abstraction has 7645 states and 9010 transitions.
[2020-11-25 03:39:10,923 INFO  L631         BuchiCegarLoop]: Abstraction has 7645 states and 9010 transitions.
[2020-11-25 03:39:10,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:39:10,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7645 states and 9010 transitions.
[2020-11-25 03:39:10,931 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:10,931 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:10,931 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:10,933 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:10,933 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6557]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6562]   COND TRUE   __tmp__DType[this] == MinterRole
[L6563]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6563]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6564]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6576]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6576]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6577]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:10,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:10,939 INFO  L82        PathProgramCache]: Analyzing trace with hash -1048804098, now seen corresponding path program 1 times
[2020-11-25 03:39:10,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:10,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:11,270 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:11,270 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:11,270 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:11,271 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:11,271 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:11,271 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:11,271 INFO  L87              Difference]: Start difference. First operand 7645 states and 9010 transitions. cyclomatic complexity: 1369 Second operand 3 states.
[2020-11-25 03:39:11,322 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:11,322 INFO  L93              Difference]: Finished difference Result 7653 states and 9017 transitions.
[2020-11-25 03:39:11,322 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:11,322 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7653 states and 9017 transitions.
[2020-11-25 03:39:11,334 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:11,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7653 states to 7653 states and 9017 transitions.
[2020-11-25 03:39:11,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1627
[2020-11-25 03:39:11,347 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1627
[2020-11-25 03:39:11,348 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7653 states and 9017 transitions.
[2020-11-25 03:39:11,351 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:11,351 INFO  L728         BuchiCegarLoop]: Abstraction has 7653 states and 9017 transitions.
[2020-11-25 03:39:11,355 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7653 states and 9017 transitions.
[2020-11-25 03:39:11,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7653 to 7645.
[2020-11-25 03:39:11,388 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7645 states.
[2020-11-25 03:39:11,396 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7645 states to 7645 states and 9008 transitions.
[2020-11-25 03:39:11,396 INFO  L751         BuchiCegarLoop]: Abstraction has 7645 states and 9008 transitions.
[2020-11-25 03:39:11,396 INFO  L631         BuchiCegarLoop]: Abstraction has 7645 states and 9008 transitions.
[2020-11-25 03:39:11,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 03:39:11,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7645 states and 9008 transitions.
[2020-11-25 03:39:11,403 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:11,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:11,403 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:11,405 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:11,405 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6553]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6553]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6576]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6576]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6577]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5421]   COND TRUE   DType[this] == ERC20
[L5422]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5422]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND FALSE  !(DType[this] == ERC20Mintable)
[L5421]   COND TRUE   DType[this] == ERC20
[L5422]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5422]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:11,411 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:11,411 INFO  L82        PathProgramCache]: Analyzing trace with hash 812948892, now seen corresponding path program 1 times
[2020-11-25 03:39:11,412 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:11,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:11,671 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1647 trivial. 0 not checked.
[2020-11-25 03:39:11,671 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:11,671 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:39:11,671 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:11,672 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:39:11,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:39:11,672 INFO  L87              Difference]: Start difference. First operand 7645 states and 9008 transitions. cyclomatic complexity: 1367 Second operand 8 states.
[2020-11-25 03:39:12,950 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:12,950 INFO  L93              Difference]: Finished difference Result 7734 states and 9097 transitions.
[2020-11-25 03:39:12,950 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:39:12,950 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7734 states and 9097 transitions.
[2020-11-25 03:39:12,965 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:12,979 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7734 states to 7731 states and 9094 transitions.
[2020-11-25 03:39:12,979 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1645
[2020-11-25 03:39:12,980 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1645
[2020-11-25 03:39:12,980 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7731 states and 9094 transitions.
[2020-11-25 03:39:12,984 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:12,984 INFO  L728         BuchiCegarLoop]: Abstraction has 7731 states and 9094 transitions.
[2020-11-25 03:39:12,988 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7731 states and 9094 transitions.
[2020-11-25 03:39:13,020 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7731 to 7645.
[2020-11-25 03:39:13,020 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7645 states.
[2020-11-25 03:39:13,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7645 states to 7645 states and 9008 transitions.
[2020-11-25 03:39:13,028 INFO  L751         BuchiCegarLoop]: Abstraction has 7645 states and 9008 transitions.
[2020-11-25 03:39:13,028 INFO  L631         BuchiCegarLoop]: Abstraction has 7645 states and 9008 transitions.
[2020-11-25 03:39:13,028 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 03:39:13,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7645 states and 9008 transitions.
[2020-11-25 03:39:13,035 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:13,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:13,035 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:13,037 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:13,037 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND TRUE   __tmp__DType[this] == RewardToken
[L6548]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6548]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6549]   COND FALSE  !(revert)
[L6570]   COND TRUE   __tmp__DType[this] == RewardToken
[L6571]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6571]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6572]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:13,043 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:13,043 INFO  L82        PathProgramCache]: Analyzing trace with hash 262900965, now seen corresponding path program 1 times
[2020-11-25 03:39:13,043 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:13,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:13,281 INFO  L134       CoverageAnalysis]: Checked inductivity of 1647 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 1615 trivial. 0 not checked.
[2020-11-25 03:39:13,281 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:13,281 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:39:13,281 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:13,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:39:13,281 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:39:13,282 INFO  L87              Difference]: Start difference. First operand 7645 states and 9008 transitions. cyclomatic complexity: 1367 Second operand 4 states.
[2020-11-25 03:39:14,521 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:14,521 INFO  L93              Difference]: Finished difference Result 8384 states and 9917 transitions.
[2020-11-25 03:39:14,521 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:39:14,521 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8384 states and 9917 transitions.
[2020-11-25 03:39:14,538 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 03:39:14,554 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8384 states to 8088 states and 9591 transitions.
[2020-11-25 03:39:14,554 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1739
[2020-11-25 03:39:14,555 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1739
[2020-11-25 03:39:14,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8088 states and 9591 transitions.
[2020-11-25 03:39:14,559 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:14,559 INFO  L728         BuchiCegarLoop]: Abstraction has 8088 states and 9591 transitions.
[2020-11-25 03:39:14,563 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8088 states and 9591 transitions.
[2020-11-25 03:39:14,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8088 to 7669.
[2020-11-25 03:39:14,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7669 states.
[2020-11-25 03:39:14,604 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7669 states to 7669 states and 9057 transitions.
[2020-11-25 03:39:14,604 INFO  L751         BuchiCegarLoop]: Abstraction has 7669 states and 9057 transitions.
[2020-11-25 03:39:14,604 INFO  L631         BuchiCegarLoop]: Abstraction has 7669 states and 9057 transitions.
[2020-11-25 03:39:14,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 03:39:14,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7669 states and 9057 transitions.
[2020-11-25 03:39:14,613 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:14,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:14,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:14,616 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:14,616 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND FALSE  !(DType[this] == RewardToken)
[L6603]   COND FALSE  !(DType[this] == ERC20Capped)
[L6608]   COND TRUE   DType[this] == ERC20Mintable
[L6609]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6609]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6610]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND FALSE  !(DType[this] == ERC20Capped)
[L6631]   COND TRUE   DType[this] == ERC20Mintable
[L6632]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6632]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6633]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND FALSE  !(DType[this] == ERC20Capped)
[L5416]   COND TRUE   DType[this] == ERC20Mintable
[L5417]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5417]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5418]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:14,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:14,622 INFO  L82        PathProgramCache]: Analyzing trace with hash -1115700283, now seen corresponding path program 1 times
[2020-11-25 03:39:14,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:14,643 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:15,085 INFO  L134       CoverageAnalysis]: Checked inductivity of 1681 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1681 trivial. 0 not checked.
[2020-11-25 03:39:15,085 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:15,085 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:39:15,086 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:15,086 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:39:15,086 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:39:15,086 INFO  L87              Difference]: Start difference. First operand 7669 states and 9057 transitions. cyclomatic complexity: 1392 Second operand 7 states.
[2020-11-25 03:39:15,263 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:15,263 INFO  L93              Difference]: Finished difference Result 7692 states and 9080 transitions.
[2020-11-25 03:39:15,263 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:39:15,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7692 states and 9080 transitions.
[2020-11-25 03:39:15,276 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:15,290 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7692 states to 7689 states and 9077 transitions.
[2020-11-25 03:39:15,290 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1688
[2020-11-25 03:39:15,291 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1688
[2020-11-25 03:39:15,291 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7689 states and 9077 transitions.
[2020-11-25 03:39:15,295 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:15,295 INFO  L728         BuchiCegarLoop]: Abstraction has 7689 states and 9077 transitions.
[2020-11-25 03:39:15,299 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7689 states and 9077 transitions.
[2020-11-25 03:39:15,330 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7689 to 7683.
[2020-11-25 03:39:15,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7683 states.
[2020-11-25 03:39:15,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7683 states to 7683 states and 9071 transitions.
[2020-11-25 03:39:15,338 INFO  L751         BuchiCegarLoop]: Abstraction has 7683 states and 9071 transitions.
[2020-11-25 03:39:15,338 INFO  L631         BuchiCegarLoop]: Abstraction has 7683 states and 9071 transitions.
[2020-11-25 03:39:15,338 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 03:39:15,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7683 states and 9071 transitions.
[2020-11-25 03:39:15,345 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:15,345 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:15,345 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:15,347 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:15,347 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND TRUE   DType[this] == ERC20Capped
[L5412]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5412]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5413]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND FALSE  !(DType[this] == RewardToken)
[L5411]   COND TRUE   DType[this] == ERC20Capped
[L5412]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5412]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5413]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:15,352 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:15,352 INFO  L82        PathProgramCache]: Analyzing trace with hash 1289122153, now seen corresponding path program 1 times
[2020-11-25 03:39:15,353 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:15,372 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:15,577 INFO  L134       CoverageAnalysis]: Checked inductivity of 1681 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1681 trivial. 0 not checked.
[2020-11-25 03:39:15,577 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:15,577 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:15,578 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:15,578 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:15,578 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:15,578 INFO  L87              Difference]: Start difference. First operand 7683 states and 9071 transitions. cyclomatic complexity: 1392 Second operand 3 states.
[2020-11-25 03:39:15,632 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:15,632 INFO  L93              Difference]: Finished difference Result 7719 states and 9111 transitions.
[2020-11-25 03:39:15,632 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:15,632 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7719 states and 9111 transitions.
[2020-11-25 03:39:15,645 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:15,660 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7719 states to 7719 states and 9111 transitions.
[2020-11-25 03:39:15,661 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1696
[2020-11-25 03:39:15,661 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1696
[2020-11-25 03:39:15,661 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7719 states and 9111 transitions.
[2020-11-25 03:39:15,665 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:15,665 INFO  L728         BuchiCegarLoop]: Abstraction has 7719 states and 9111 transitions.
[2020-11-25 03:39:15,669 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7719 states and 9111 transitions.
[2020-11-25 03:39:15,717 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7719 to 7707.
[2020-11-25 03:39:15,717 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7707 states.
[2020-11-25 03:39:15,725 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7707 states to 7707 states and 9099 transitions.
[2020-11-25 03:39:15,725 INFO  L751         BuchiCegarLoop]: Abstraction has 7707 states and 9099 transitions.
[2020-11-25 03:39:15,725 INFO  L631         BuchiCegarLoop]: Abstraction has 7707 states and 9099 transitions.
[2020-11-25 03:39:15,725 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 03:39:15,725 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7707 states and 9099 transitions.
[2020-11-25 03:39:15,732 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:15,732 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:15,732 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:15,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:15,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND FALSE  !(DType[this] == ERC20Capped)
[L6631]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6636]   COND TRUE   DType[this] == MinterRole
[L6637]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6637]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6638]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:15,740 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:15,740 INFO  L82        PathProgramCache]: Analyzing trace with hash 632850073, now seen corresponding path program 1 times
[2020-11-25 03:39:15,740 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:15,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:15,961 INFO  L134       CoverageAnalysis]: Checked inductivity of 1681 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1681 trivial. 0 not checked.
[2020-11-25 03:39:15,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:15,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:15,962 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:15,962 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:15,962 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:15,962 INFO  L87              Difference]: Start difference. First operand 7707 states and 9099 transitions. cyclomatic complexity: 1396 Second operand 3 states.
[2020-11-25 03:39:16,010 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:16,010 INFO  L93              Difference]: Finished difference Result 7719 states and 9112 transitions.
[2020-11-25 03:39:16,011 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:16,011 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7719 states and 9112 transitions.
[2020-11-25 03:39:16,023 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:16,038 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7719 states to 7719 states and 9112 transitions.
[2020-11-25 03:39:16,038 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1694
[2020-11-25 03:39:16,038 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1694
[2020-11-25 03:39:16,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7719 states and 9112 transitions.
[2020-11-25 03:39:16,042 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:16,042 INFO  L728         BuchiCegarLoop]: Abstraction has 7719 states and 9112 transitions.
[2020-11-25 03:39:16,046 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7719 states and 9112 transitions.
[2020-11-25 03:39:16,082 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7719 to 7711.
[2020-11-25 03:39:16,082 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7711 states.
[2020-11-25 03:39:16,090 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7711 states to 7711 states and 9103 transitions.
[2020-11-25 03:39:16,090 INFO  L751         BuchiCegarLoop]: Abstraction has 7711 states and 9103 transitions.
[2020-11-25 03:39:16,090 INFO  L631         BuchiCegarLoop]: Abstraction has 7711 states and 9103 transitions.
[2020-11-25 03:39:16,090 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 03:39:16,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7711 states and 9103 transitions.
[2020-11-25 03:39:16,098 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:16,098 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:16,098 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:16,100 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:16,100 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND FALSE  !(DType[this] == RewardToken)
[L6603]   COND FALSE  !(DType[this] == ERC20Capped)
[L6608]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6613]   COND TRUE   DType[this] == MinterRole
[L6614]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6614]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6615]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND FALSE  !(DType[this] == ERC20Capped)
[L6631]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6636]   COND TRUE   DType[this] == MinterRole
[L6637]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6637]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6638]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:16,105 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:16,105 INFO  L82        PathProgramCache]: Analyzing trace with hash -306098479, now seen corresponding path program 1 times
[2020-11-25 03:39:16,106 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:16,123 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:16,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 1681 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1681 trivial. 0 not checked.
[2020-11-25 03:39:16,342 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:16,343 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:39:16,343 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:16,343 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:39:16,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:39:16,343 INFO  L87              Difference]: Start difference. First operand 7711 states and 9103 transitions. cyclomatic complexity: 1396 Second operand 7 states.
[2020-11-25 03:39:16,486 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:16,486 INFO  L93              Difference]: Finished difference Result 7738 states and 9130 transitions.
[2020-11-25 03:39:16,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:39:16,486 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7738 states and 9130 transitions.
[2020-11-25 03:39:16,499 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:16,513 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7738 states to 7735 states and 9127 transitions.
[2020-11-25 03:39:16,513 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1694
[2020-11-25 03:39:16,514 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1694
[2020-11-25 03:39:16,514 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7735 states and 9127 transitions.
[2020-11-25 03:39:16,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:16,518 INFO  L728         BuchiCegarLoop]: Abstraction has 7735 states and 9127 transitions.
[2020-11-25 03:39:16,521 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7735 states and 9127 transitions.
[2020-11-25 03:39:16,555 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7735 to 7723.
[2020-11-25 03:39:16,555 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7723 states.
[2020-11-25 03:39:16,563 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7723 states to 7723 states and 9115 transitions.
[2020-11-25 03:39:16,563 INFO  L751         BuchiCegarLoop]: Abstraction has 7723 states and 9115 transitions.
[2020-11-25 03:39:16,563 INFO  L631         BuchiCegarLoop]: Abstraction has 7723 states and 9115 transitions.
[2020-11-25 03:39:16,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 03:39:16,563 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7723 states and 9115 transitions.
[2020-11-25 03:39:16,570 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:16,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:16,570 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:16,572 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:16,572 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND FALSE  !(DType[this] == RewardToken)
[L6603]   COND TRUE   DType[this] == ERC20Capped
[L6604]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6604]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6605]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND TRUE   DType[this] == ERC20Capped
[L6627]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6627]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6628]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:16,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:16,576 INFO  L82        PathProgramCache]: Analyzing trace with hash -2050582795, now seen corresponding path program 1 times
[2020-11-25 03:39:16,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:16,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:16,874 INFO  L134       CoverageAnalysis]: Checked inductivity of 1681 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1681 trivial. 0 not checked.
[2020-11-25 03:39:16,874 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:16,874 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:39:16,874 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:16,874 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:39:16,874 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:39:16,875 INFO  L87              Difference]: Start difference. First operand 7723 states and 9115 transitions. cyclomatic complexity: 1396 Second operand 7 states.
[2020-11-25 03:39:17,021 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:17,021 INFO  L93              Difference]: Finished difference Result 7734 states and 9122 transitions.
[2020-11-25 03:39:17,021 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:39:17,021 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7734 states and 9122 transitions.
[2020-11-25 03:39:17,034 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:17,048 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7734 states to 7731 states and 9119 transitions.
[2020-11-25 03:39:17,048 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1694
[2020-11-25 03:39:17,048 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1694
[2020-11-25 03:39:17,048 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7731 states and 9119 transitions.
[2020-11-25 03:39:17,052 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:17,052 INFO  L728         BuchiCegarLoop]: Abstraction has 7731 states and 9119 transitions.
[2020-11-25 03:39:17,056 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7731 states and 9119 transitions.
[2020-11-25 03:39:17,090 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7731 to 7723.
[2020-11-25 03:39:17,090 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7723 states.
[2020-11-25 03:39:17,098 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7723 states to 7723 states and 9111 transitions.
[2020-11-25 03:39:17,098 INFO  L751         BuchiCegarLoop]: Abstraction has 7723 states and 9111 transitions.
[2020-11-25 03:39:17,098 INFO  L631         BuchiCegarLoop]: Abstraction has 7723 states and 9111 transitions.
[2020-11-25 03:39:17,098 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 03:39:17,098 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7723 states and 9111 transitions.
[2020-11-25 03:39:17,105 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:17,105 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:17,105 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:17,107 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:17,107 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:17,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:17,112 INFO  L82        PathProgramCache]: Analyzing trace with hash -1934697337, now seen corresponding path program 1 times
[2020-11-25 03:39:17,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:17,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:17,654 INFO  L134       CoverageAnalysis]: Checked inductivity of 1681 backedges. 44 proven. 0 refuted. 0 times theorem prover too weak. 1637 trivial. 0 not checked.
[2020-11-25 03:39:17,654 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:17,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 03:39:17,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:17,655 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 03:39:17,655 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=375, Unknown=0, NotChecked=0, Total=420
[2020-11-25 03:39:17,655 INFO  L87              Difference]: Start difference. First operand 7723 states and 9111 transitions. cyclomatic complexity: 1392 Second operand 21 states.
[2020-11-25 03:39:24,794 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:24,794 INFO  L93              Difference]: Finished difference Result 7855 states and 9275 transitions.
[2020-11-25 03:39:24,795 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 03:39:24,795 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7855 states and 9275 transitions.
[2020-11-25 03:39:24,809 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:24,822 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7855 states to 7855 states and 9275 transitions.
[2020-11-25 03:39:24,822 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1714
[2020-11-25 03:39:24,823 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1714
[2020-11-25 03:39:24,823 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7855 states and 9275 transitions.
[2020-11-25 03:39:24,827 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:24,827 INFO  L728         BuchiCegarLoop]: Abstraction has 7855 states and 9275 transitions.
[2020-11-25 03:39:24,831 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7855 states and 9275 transitions.
[2020-11-25 03:39:24,865 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7855 to 7800.
[2020-11-25 03:39:24,865 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7800 states.
[2020-11-25 03:39:24,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7800 states to 7800 states and 9210 transitions.
[2020-11-25 03:39:24,873 INFO  L751         BuchiCegarLoop]: Abstraction has 7800 states and 9210 transitions.
[2020-11-25 03:39:24,873 INFO  L631         BuchiCegarLoop]: Abstraction has 7800 states and 9210 transitions.
[2020-11-25 03:39:24,873 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 03:39:24,873 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7800 states and 9210 transitions.
[2020-11-25 03:39:24,880 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:39:24,880 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:24,880 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:24,883 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:24,883 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L413]                havoc __exception;
[L414]                revert := false;
[L415]    COND TRUE   __exception
[L416]                __tmp__Balance := Balance;
[L417]                __tmp__DType := DType;
[L418]                __tmp__Alloc := Alloc;
[L419]                __tmp__balance_ADDR := balance_ADDR;
[L420]                __tmp__M_Ref_int := M_Ref_int;
[L421]                __tmp__sum__balances0 := sum__balances0;
[L422]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L423]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L424]                __tmp__sum__allowances1 := sum__allowances1;
[L425]                __tmp__M_Ref_bool := M_Ref_bool;
[L426]                __tmp__sum := sum;
[L427]                __tmp__Length := Length;
[L428]                __tmp__now := now;
[L429]                __tmp___balances_ERC20 := _balances_ERC20;
[L430]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L431]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L433]                __tmp___minters_MinterRole := _minters_MinterRole;
[L434]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L435]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L436]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L437]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L438]                __tmp___owner_Ownable := _owner_Ownable;
[L439]                __tmp__governance_Storage := governance_Storage;
[L440]                __tmp__controller_Storage := controller_Storage;
[L441]                __tmp__store_Governable := store_Governable;
[L442]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L443]    CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5004]               __ret_0_ := __tmp___totalSupply_ERC20[this];
[L443]    RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L444]                assume revert || gas < 0;
[L11094]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:24,888 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:24,889 INFO  L82        PathProgramCache]: Analyzing trace with hash 472252446, now seen corresponding path program 1 times
[2020-11-25 03:39:24,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:24,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:25,226 INFO  L134       CoverageAnalysis]: Checked inductivity of 1908 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 1904 trivial. 0 not checked.
[2020-11-25 03:39:25,226 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:39:25,226 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [5] total 5
[2020-11-25 03:39:25,227 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:25,227 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:39:25,227 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:39:25,227 INFO  L87              Difference]: Start difference. First operand 7800 states and 9210 transitions. cyclomatic complexity: 1416 Second operand 5 states.
[2020-11-25 03:39:26,186 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:26,186 INFO  L93              Difference]: Finished difference Result 8306 states and 9746 transitions.
[2020-11-25 03:39:26,186 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:39:26,186 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8306 states and 9746 transitions.
[2020-11-25 03:39:26,202 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 03:39:26,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8306 states to 7305 states and 8668 transitions.
[2020-11-25 03:39:26,216 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1259
[2020-11-25 03:39:26,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-11-25 03:39:26,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7305 states and 8668 transitions.
[2020-11-25 03:39:26,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:26,221 INFO  L728         BuchiCegarLoop]: Abstraction has 7305 states and 8668 transitions.
[2020-11-25 03:39:26,224 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7305 states and 8668 transitions.
[2020-11-25 03:39:26,246 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7305 to 4339.
[2020-11-25 03:39:26,246 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4339 states.
[2020-11-25 03:39:26,250 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4339 states to 4339 states and 5078 transitions.
[2020-11-25 03:39:26,250 INFO  L751         BuchiCegarLoop]: Abstraction has 4339 states and 5078 transitions.
[2020-11-25 03:39:26,250 INFO  L631         BuchiCegarLoop]: Abstraction has 4339 states and 5078 transitions.
[2020-11-25 03:39:26,250 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 03:39:26,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4339 states and 5078 transitions.
[2020-11-25 03:39:26,254 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:26,254 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:26,254 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:26,256 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:26,256 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:26,261 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:26,261 INFO  L82        PathProgramCache]: Analyzing trace with hash 1382461975, now seen corresponding path program 1 times
[2020-11-25 03:39:26,262 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:26,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:26,686 INFO  L134       CoverageAnalysis]: Checked inductivity of 1767 backedges. 38 proven. 0 refuted. 0 times theorem prover too weak. 1729 trivial. 0 not checked.
[2020-11-25 03:39:26,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:26,686 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 03:39:26,687 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:26,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 03:39:26,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=303, Unknown=0, NotChecked=0, Total=342
[2020-11-25 03:39:26,687 INFO  L87              Difference]: Start difference. First operand 4339 states and 5078 transitions. cyclomatic complexity: 742 Second operand 19 states.
[2020-11-25 03:39:31,221 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:31,222 INFO  L93              Difference]: Finished difference Result 4391 states and 5135 transitions.
[2020-11-25 03:39:31,222 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 03:39:31,222 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4391 states and 5135 transitions.
[2020-11-25 03:39:31,230 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:31,238 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4391 states to 4391 states and 5135 transitions.
[2020-11-25 03:39:31,238 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 703
[2020-11-25 03:39:31,238 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 703
[2020-11-25 03:39:31,238 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4391 states and 5135 transitions.
[2020-11-25 03:39:31,241 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:31,241 INFO  L728         BuchiCegarLoop]: Abstraction has 4391 states and 5135 transitions.
[2020-11-25 03:39:31,244 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4391 states and 5135 transitions.
[2020-11-25 03:39:31,261 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4391 to 4333.
[2020-11-25 03:39:31,261 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4333 states.
[2020-11-25 03:39:31,265 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4333 states to 4333 states and 5072 transitions.
[2020-11-25 03:39:31,266 INFO  L751         BuchiCegarLoop]: Abstraction has 4333 states and 5072 transitions.
[2020-11-25 03:39:31,266 INFO  L631         BuchiCegarLoop]: Abstraction has 4333 states and 5072 transitions.
[2020-11-25 03:39:31,266 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 03:39:31,266 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4333 states and 5072 transitions.
[2020-11-25 03:39:31,270 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:31,270 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:31,270 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:31,271 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:31,271 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND TRUE   choice == 16
[L11116]              gas := gas - 21000;
[L11117]  COND TRUE   gas >= 0
[L11118]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11119]              assume msgvalue_MSG == 0;
[L11120]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L697]                havoc __exception;
[L698]                revert := false;
[L699]    COND FALSE  !(__exception)
[L730]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5200]   COND FALSE  !(DType[this] == RewardToken)
[L5205]   COND FALSE  !(DType[this] == ERC20Capped)
[L5210]   COND TRUE   DType[this] == ERC20Mintable
[L5211]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5211]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5212]   COND FALSE  !(revert)
[L5223]   COND TRUE   DType[this] == RewardToken
[L5224]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5224]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5225]   COND FALSE  !(revert)
[L5246]               __ret_0_ := true;
[L730]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L731]                assume !revert && gas >= 0;
[L11120]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:31,277 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:31,277 INFO  L82        PathProgramCache]: Analyzing trace with hash -1702152527, now seen corresponding path program 1 times
[2020-11-25 03:39:31,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:31,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:31,548 INFO  L134       CoverageAnalysis]: Checked inductivity of 1769 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1768 trivial. 0 not checked.
[2020-11-25 03:39:31,548 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:31,548 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:39:31,549 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:31,549 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:39:31,549 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:39:31,549 INFO  L87              Difference]: Start difference. First operand 4333 states and 5072 transitions. cyclomatic complexity: 742 Second operand 3 states.
[2020-11-25 03:39:31,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:31,594 INFO  L93              Difference]: Finished difference Result 4341 states and 5080 transitions.
[2020-11-25 03:39:31,594 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:39:31,594 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4341 states and 5080 transitions.
[2020-11-25 03:39:31,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:31,607 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4341 states to 4341 states and 5080 transitions.
[2020-11-25 03:39:31,607 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 03:39:31,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 03:39:31,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4341 states and 5080 transitions.
[2020-11-25 03:39:31,610 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:31,610 INFO  L728         BuchiCegarLoop]: Abstraction has 4341 states and 5080 transitions.
[2020-11-25 03:39:31,613 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4341 states and 5080 transitions.
[2020-11-25 03:39:31,630 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4341 to 4335.
[2020-11-25 03:39:31,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4335 states.
[2020-11-25 03:39:31,634 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4335 states to 4335 states and 5074 transitions.
[2020-11-25 03:39:31,634 INFO  L751         BuchiCegarLoop]: Abstraction has 4335 states and 5074 transitions.
[2020-11-25 03:39:31,634 INFO  L631         BuchiCegarLoop]: Abstraction has 4335 states and 5074 transitions.
[2020-11-25 03:39:31,634 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 03:39:31,634 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4335 states and 5074 transitions.
[2020-11-25 03:39:31,639 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:31,639 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:31,639 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:31,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:31,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND TRUE   choice == 16
[L11116]              gas := gas - 21000;
[L11117]  COND TRUE   gas >= 0
[L11118]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11119]              assume msgvalue_MSG == 0;
[L11120]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L697]                havoc __exception;
[L698]                revert := false;
[L699]    COND FALSE  !(__exception)
[L730]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5200]   COND TRUE   DType[this] == RewardToken
[L5201]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5201]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5202]   COND FALSE  !(revert)
[L5223]   COND TRUE   DType[this] == RewardToken
[L5224]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5224]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5225]   COND FALSE  !(revert)
[L5246]               __ret_0_ := true;
[L730]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L731]                assume !revert && gas >= 0;
[L11120]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:31,646 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:31,646 INFO  L82        PathProgramCache]: Analyzing trace with hash -1999699488, now seen corresponding path program 1 times
[2020-11-25 03:39:31,647 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:31,670 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:32,105 INFO  L134       CoverageAnalysis]: Checked inductivity of 1769 backedges. 40 proven. 4 refuted. 0 times theorem prover too weak. 1725 trivial. 0 not checked.
[2020-11-25 03:39:32,105 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:39:32,105 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 03:39:32,106 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:32,106 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 03:39:32,106 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 03:39:32,106 INFO  L87              Difference]: Start difference. First operand 4335 states and 5074 transitions. cyclomatic complexity: 742 Second operand 17 states.
[2020-11-25 03:39:36,564 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:36,564 INFO  L93              Difference]: Finished difference Result 4394 states and 5144 transitions.
[2020-11-25 03:39:36,565 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 03:39:36,565 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4394 states and 5144 transitions.
[2020-11-25 03:39:36,572 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:36,580 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4394 states to 4394 states and 5144 transitions.
[2020-11-25 03:39:36,580 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 701
[2020-11-25 03:39:36,580 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 701
[2020-11-25 03:39:36,580 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4394 states and 5144 transitions.
[2020-11-25 03:39:36,583 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:36,583 INFO  L728         BuchiCegarLoop]: Abstraction has 4394 states and 5144 transitions.
[2020-11-25 03:39:36,586 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4394 states and 5144 transitions.
[2020-11-25 03:39:36,606 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4394 to 4349.
[2020-11-25 03:39:36,606 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4349 states.
[2020-11-25 03:39:36,610 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4349 states to 4349 states and 5098 transitions.
[2020-11-25 03:39:36,610 INFO  L751         BuchiCegarLoop]: Abstraction has 4349 states and 5098 transitions.
[2020-11-25 03:39:36,610 INFO  L631         BuchiCegarLoop]: Abstraction has 4349 states and 5098 transitions.
[2020-11-25 03:39:36,610 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 03:39:36,610 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4349 states and 5098 transitions.
[2020-11-25 03:39:36,614 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:36,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:36,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:36,616 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:36,616 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:36,621 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:36,621 INFO  L82        PathProgramCache]: Analyzing trace with hash 676673114, now seen corresponding path program 1 times
[2020-11-25 03:39:36,622 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:36,678 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:38,449 INFO  L134       CoverageAnalysis]: Checked inductivity of 1802 backedges. 42 proven. 7 refuted. 0 times theorem prover too weak. 1753 trivial. 0 not checked.
[2020-11-25 03:39:38,449 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:39:38,449 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 03:39:38,450 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:38,450 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 03:39:38,450 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1288, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 03:39:38,451 INFO  L87              Difference]: Start difference. First operand 4349 states and 5098 transitions. cyclomatic complexity: 754 Second operand 38 states.
[2020-11-25 03:39:41,425 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification. DAG size of input: 127 DAG size of output: 127
[2020-11-25 03:39:42,086 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 136
[2020-11-25 03:39:54,405 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:54,405 INFO  L93              Difference]: Finished difference Result 4411 states and 5169 transitions.
[2020-11-25 03:39:54,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 03:39:54,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4411 states and 5169 transitions.
[2020-11-25 03:39:54,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:54,420 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4411 states to 4411 states and 5169 transitions.
[2020-11-25 03:39:54,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 03:39:54,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 03:39:54,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4411 states and 5169 transitions.
[2020-11-25 03:39:54,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:54,423 INFO  L728         BuchiCegarLoop]: Abstraction has 4411 states and 5169 transitions.
[2020-11-25 03:39:54,426 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4411 states and 5169 transitions.
[2020-11-25 03:39:54,442 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4411 to 4351.
[2020-11-25 03:39:54,442 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4351 states.
[2020-11-25 03:39:54,446 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4351 states to 4351 states and 5104 transitions.
[2020-11-25 03:39:54,446 INFO  L751         BuchiCegarLoop]: Abstraction has 4351 states and 5104 transitions.
[2020-11-25 03:39:54,447 INFO  L631         BuchiCegarLoop]: Abstraction has 4351 states and 5104 transitions.
[2020-11-25 03:39:54,447 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 03:39:54,447 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4351 states and 5104 transitions.
[2020-11-25 03:39:54,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:39:54,451 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:39:54,451 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:39:54,453 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:39:54,453 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transferFrom_ERC200 := false;
[L2]                  call_transferFrom_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND TRUE   choice == 16
[L11116]              gas := gas - 21000;
[L11117]  COND TRUE   gas >= 0
[L11118]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11119]              assume msgvalue_MSG == 0;
[L11120]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L697]                havoc __exception;
[L698]                revert := false;
[L699]    COND FALSE  !(__exception)
[L730]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5200]   COND TRUE   DType[this] == RewardToken
[L5201]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5201]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5202]   COND FALSE  !(revert)
[L5223]   COND TRUE   DType[this] == RewardToken
[L5224]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5224]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5225]   COND FALSE  !(revert)
[L5246]               __ret_0_ := true;
[L730]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L731]                assume !revert && gas >= 0;
[L11120]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11235]  RET         call CorralChoice_RewardToken(this);
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND FALSE  !(choice == 18)
[L11109]  COND FALSE  !(choice == 17)
[L11115]  COND FALSE  !(choice == 16)
[L11122]  COND TRUE   choice == 15
[L11123]              gas := gas - 21000;
[L11124]  COND TRUE   gas >= 0
[L11125]              assume amount_s383 >= 0 && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11126]              assume msgvalue_MSG == 0;
[L11127]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((((sender_s383 != recipient_s383 && ((amount_s383 > _balances_ERC20[this][sender_s383] || amount_s383 > _allowances_ERC20[this][sender_s383][msgsender_MSG]) || _balances_ERC20[this][recipient_s383] + amount_s383 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s383 >= 0) && amount_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s383] >= 0) && _balances_ERC20[this][recipient_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s383] >= 0) && _balances_ERC20[this][sender_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s383][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s383][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transferFrom_ERC200 := true;
[L2]                  call_transferFrom_ERC200 := false;
[L2]                  revert := revert_hold;
[L771]                havoc __exception;
[L772]                revert := false;
[L773]    COND FALSE  !(__exception)
[L804]    CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5360]   COND TRUE   DType[this] == RewardToken
[L5361]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5361]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L5362]   COND FALSE  !(revert)
[L5383]   COND TRUE   DType[this] == RewardToken
[L5384]   CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5384]   RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5385]   COND FALSE  !(revert)
[L5406]   COND TRUE   DType[this] == RewardToken
[L5407]   CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5407]   RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5408]   COND FALSE  !(revert)
[L5429]   CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5429]   RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s383][__var_7], amount_s383, 589247433);
[L5430]   COND FALSE  !(revert)
[L5433]   COND TRUE   DType[this] == RewardToken
[L5434]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5974]               __var_24 := null;
[L5975]   COND FALSE  !(!(owner_s625 != null))
[L5979]               __var_25 := null;
[L5980]   COND FALSE  !(!(spender_s625 != null))
[L5984]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5985]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5986]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5987]               assert { :EventEmitted "Approval_ERC20" } true;
[L5434]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, __var_5, __var_6);
[L5435]   COND FALSE  !(revert)
[L5456]               __ret_0_ := true;
[L804]    RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L805]                assume !revert && gas >= 0;
[L11127]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s383, recipient_s383, amount_s383);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:39:54,458 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:39:54,459 INFO  L82        PathProgramCache]: Analyzing trace with hash -1332704400, now seen corresponding path program 1 times
[2020-11-25 03:39:54,459 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:39:54,489 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:39:55,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 1932 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1930 trivial. 0 not checked.
[2020-11-25 03:39:55,065 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:39:55,065 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 03:39:55,066 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:39:55,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 03:39:55,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=234, Unknown=0, NotChecked=0, Total=272
[2020-11-25 03:39:55,066 INFO  L87              Difference]: Start difference. First operand 4351 states and 5104 transitions. cyclomatic complexity: 759 Second operand 17 states.
[2020-11-25 03:39:59,584 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:39:59,584 INFO  L93              Difference]: Finished difference Result 2625 states and 3070 transitions.
[2020-11-25 03:39:59,584 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 03:39:59,584 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2625 states and 3070 transitions.
[2020-11-25 03:39:59,590 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:39:59,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2625 states to 0 states and 0 transitions.
[2020-11-25 03:39:59,590 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:39:59,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:39:59,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:39:59,590 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:39:59,590 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:39:59,590 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:39:59,590 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:39:59,590 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 03:39:59,590 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:39:59,590 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:39:59,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:39:59,593 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:39:59 BasicIcfg
[2020-11-25 03:39:59,593 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:39:59,594 INFO  L168              Benchmark]: Toolchain (without parser) took 61541.33 ms. Allocated memory was 1.0 GB in the beginning and 4.9 GB in the end (delta: 3.8 GB). Free memory was 929.8 MB in the beginning and 962.6 MB in the end (delta: -32.8 MB). Peak memory consumption was 3.8 GB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,594 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,594 INFO  L168              Benchmark]: Boogie Preprocessor took 171.12 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 897.6 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,594 INFO  L168              Benchmark]: UtopiaSpecLang took 85.63 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,595 INFO  L168              Benchmark]: Boogie Printer took 28.82 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,595 INFO  L168              Benchmark]: RCFGBuilder took 1571.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 881.5 MB in the beginning and 777.3 MB in the end (delta: 104.2 MB). Peak memory consumption was 172.0 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,595 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.86 ms. Allocated memory is still 1.1 GB. Free memory was 777.3 MB in the beginning and 764.7 MB in the end (delta: 12.6 MB). Peak memory consumption was 12.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,595 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3604.22 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 433.1 MB). Free memory was 764.7 MB in the beginning and 880.8 MB in the end (delta: -116.1 MB). Peak memory consumption was 354.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,596 INFO  L168              Benchmark]: BlockEncodingV2 took 273.77 ms. Allocated memory is still 1.5 GB. Free memory was 880.8 MB in the beginning and 730.9 MB in the end (delta: 149.9 MB). Peak memory consumption was 149.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,596 INFO  L168              Benchmark]: BuchiAutomizer took 55768.24 ms. Allocated memory was 1.5 GB in the beginning and 4.9 GB in the end (delta: 3.3 GB). Free memory was 730.9 MB in the beginning and 962.6 MB in the end (delta: -231.7 MB). Peak memory consumption was 3.1 GB. Max. memory is 15.3 GB.
[2020-11-25 03:39:59,598 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11010 locations, 20406 edges
  - StatisticsResult: Encoded RCFG
    10775 locations, 19774 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 171.12 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 897.6 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 85.63 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.82 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1571.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 881.5 MB in the beginning and 777.3 MB in the end (delta: 104.2 MB). Peak memory consumption was 172.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.86 ms. Allocated memory is still 1.1 GB. Free memory was 777.3 MB in the beginning and 764.7 MB in the end (delta: 12.6 MB). Peak memory consumption was 12.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3604.22 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 433.1 MB). Free memory was 764.7 MB in the beginning and 880.8 MB in the end (delta: -116.1 MB). Peak memory consumption was 354.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 273.77 ms. Allocated memory is still 1.5 GB. Free memory was 880.8 MB in the beginning and 730.9 MB in the end (delta: 149.9 MB). Peak memory consumption was 149.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 55768.24 ms. Allocated memory was 1.5 GB in the beginning and 4.9 GB in the end (delta: 3.3 GB). Free memory was 730.9 MB in the beginning and 962.6 MB in the end (delta: -231.7 MB). Peak memory consumption was 3.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4290 locations, 6250 edges
  - StatisticsResult: BuchiProgram size
    11010 locations, 20406 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 26 terminating modules (26 trivial, 0 deterministic, 0 nondeterministic). 26 modules have a trivial ranking function, the largest among these consists of 38 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 55.7s and 27 iterations.  TraceHistogramMax:12. Analysis of lassos took 9.3s. Construction of modules took 33.4s. BÃ¼chi inclusion checks took 10.4s. Highest rank in rank-based complementation 0. Minimization of det autom 26. Minimization of nondet autom 0. Automata minimization 1.1s AutomataMinimizationTime, 25 MinimizatonAttempts, 4796 StatesRemovedByMinimization, 24 NontrivialMinimizations. Non-live state removal took 0.7s Buchi closure took 0.0s. Biggest automaton had 7800 states and ocurred in iteration 20.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 143729 SDtfs, 66295 SDslu, 345704 SDs, 0 SdLazy, 354815 SolverSat, 11561 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 33.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU26 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
