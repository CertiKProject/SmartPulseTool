This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:22:59,489 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:22:59,490 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:22:59,500 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:22:59,501 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:22:59,501 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:22:59,502 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:22:59,504 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:22:59,505 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:22:59,506 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:22:59,506 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:22:59,506 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:22:59,507 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:22:59,508 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:22:59,508 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:22:59,509 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:22:59,510 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:22:59,511 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:22:59,512 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:22:59,513 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:22:59,514 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:22:59,515 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:22:59,516 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:22:59,517 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:22:59,517 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:22:59,517 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:22:59,517 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:22:59,518 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:22:59,518 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:22:59,518 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:22:59,519 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:22:59,519 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:22:59,520 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:22:59,520 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:22:59,521 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:22:59,521 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:22:59,522 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:22:59,522 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:22:59,522 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:22:59,522 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:22:59,523 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:22:59,523 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:22:59,531 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:22:59,531 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:22:59,532 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:22:59,532 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:22:59,532 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:22:59,532 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:22:59,532 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:22:59,532 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:22:59,532 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:22:59,532 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:22:59,532 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:22:59,533 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:22:59,533 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:22:59,534 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:22:59,534 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:22:59,534 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:22:59,534 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:22:59,534 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:22:59,557 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:22:59,569 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:22:59,571 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:22:59,572 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:22:59,573 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:22:59,573 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl
[2020-11-25 13:22:59,573 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl'
[2020-11-25 13:22:59,695 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:22:59,696 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:22:59,696 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:22:59,696 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:22:59,697 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:22:59,713 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,714 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,755 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,756 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,784 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,803 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,819 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,838 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:22:59,838 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:22:59,839 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:22:59,841 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:22:59,845 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/1) ...
[2020-11-25 13:22:59,870 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:22:59,875 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:22:59,883 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:22:59,889 INFO  L636   opiaSpecLangObserver]: Parsed ( totalSupply__BasicToken[this]>=0 && totalSupply__BasicToken[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:22:59,894 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==totalSupply__BasicToken[this] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && owner_wallet_DEAPCoin[this]==( old(owner_wallet_DEAPCoin[this]) ) ) && unsale_owner_wallet_DEAPCoin[this]==( old(unsale_owner_wallet_DEAPCoin[this]) ) ) && group_lockup_DEAPCoin[this]==( old(group_lockup_DEAPCoin[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_BasicToken>],ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[unsale_owner_wallet_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[group_lockup_DEAPCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]]
[2020-11-25 13:22:59,904 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this]) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this]) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 13:22:59,904 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_BasicToken0) ==> ( <>AP(success_totalSupply_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:22:59,922 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:22:59 PropertyContainer
[2020-11-25 13:22:59,922 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:22:59,923 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:22:59,923 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:22:59,923 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:22:59,924 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/2) ...
[2020-11-25 13:22:59,924 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:22:59,924 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:22:59,947 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:22:59" (2/2) ...
[2020-11-25 13:22:59,948 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:22:59,948 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:22:59,948 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:22:59,948 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:22:59,949 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/2) ...
[2020-11-25 13:23:00,003 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:23:00,003 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:23:00,003 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 13:23:00,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 13:23:00,004 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 13:23:00,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 13:23:00,004 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 13:23:00,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 13:23:00,004 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:23:00,005 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:23:00,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:23:00,005 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,005 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,006 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,006 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,006 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:23:00,006 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup
[2020-11-25 13:23:00,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup
[2020-11-25 13:23:00,006 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:23:00,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup
[2020-11-25 13:23:00,007 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:23:00,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup
[2020-11-25 13:23:00,007 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup
[2020-11-25 13:23:00,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup
[2020-11-25 13:23:00,008 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:23:00,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup
[2020-11-25 13:23:00,008 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:23:00,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup
[2020-11-25 13:23:00,008 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup
[2020-11-25 13:23:00,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup
[2020-11-25 13:23:00,009 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:23:00,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup
[2020-11-25 13:23:00,009 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup
[2020-11-25 13:23:00,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup
[2020-11-25 13:23:00,009 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:23:00,009 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:23:00,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 13:23:00,010 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 13:23:00,010 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 13:23:00,010 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 13:23:00,010 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:23:00,010 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 13:23:00,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 13:23:00,011 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 13:23:00,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 13:23:00,011 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:23:00,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 13:23:00,011 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 13:23:00,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 13:23:00,011 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:23:00,011 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 13:23:00,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 13:23:00,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:23:00,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 13:23:00,012 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 13:23:00,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 13:23:00,013 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 13:23:00,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 13:23:00,013 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:00,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:00,013 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:00,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 13:23:00,013 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:23:00,013 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 13:23:00,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 13:23:00,013 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 13:23:00,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 13:23:00,014 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 13:23:00,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 13:23:00,014 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 13:23:00,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 13:23:00,014 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:23:00,014 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token
[2020-11-25 13:23:00,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token
[2020-11-25 13:23:00,014 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_ERC223Token
[2020-11-25 13:23:00,014 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:23:00,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenFallback~address~uint256~bytes_ERC223ContractInterface
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:23:00,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:23:00,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:23:00,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin
[2020-11-25 13:23:00,015 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:23:00,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin
[2020-11-25 13:23:00,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:23:00,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GroupLockup
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_GroupLockup
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 13:23:00,019 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223Token
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223Token
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DEAPCoin
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:23:00,020 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:23:00,021 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:23:00,022 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:23:00,023 INFO  L130     BoogieDeclarations]: Found specification of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:23:00,024 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:23:00,025 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 13:23:00,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:00,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__success
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DEAPCoin__fail
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__success
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DEAPCoin__fail
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__success
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DEAPCoin__fail
[2020-11-25 13:23:00,028 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:23:00,029 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:23:00,030 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:23:00,030 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:23:00,030 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:23:00,030 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 13:23:00,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__fail
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup_NoBaseCtor__success
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__fail
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure GroupLockup_GroupLockup__success
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__fail
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLockupTime~address_GroupLockup__success
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__fail
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLockup~uint256_GroupLockup__success
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__fail
[2020-11-25 13:23:00,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure inLockupList~address_GroupLockup__success
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__fail
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupList~address~uint256_GroupLockup__success
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__fail
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure updateLockupTime~uint256~uint256_GroupLockup__success
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__fail
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list~address_GroupLockup__success
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__fail
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockup_list_flag~uint256_GroupLockup__success
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__fail
[2020-11-25 13:23:00,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_list~uint256_GroupLockup__success
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 13:23:00,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 13:23:00,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 13:23:00,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__fail
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token_NoBaseCtor__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__fail
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223Token_ERC223Token__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__fail
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface_NoBaseCtor__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__fail
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC223ContractInterface_ERC223ContractInterface__success
[2020-11-25 13:23:00,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin_NoBaseCtor__success
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure DEAPCoin_DEAPCoin__success
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure sendTokens~address~uint256_DEAPCoin__success
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DEAPCoin__success
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer_ERC223~address~uint256~bytes_DEAPCoin__success
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure batchTransfer~address~arr~arr_DEAPCoin__success
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__fail
[2020-11-25 13:23:00,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DEAPCoin__success
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__fail
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DEAPCoin__success
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__fail
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DEAPCoin__success
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__fail
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_UNSALE_SUPPLY_DEAPCoin__success
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:00,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_wallet_DEAPCoin__success
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__fail
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure unsale_owner_wallet_DEAPCoin__success
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__fail
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure group_lockup_DEAPCoin__success
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:23:00,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GroupLockup
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_GroupLockup
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 13:23:00,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223Token
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223Token
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC223ContractInterface
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC223ContractInterface
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DEAPCoin
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:23:00,042 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:23:00,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:23:01,022 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:01,023 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:01,023 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:23:01,272 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:23:01,272 INFO  L286             CfgBuilder]: Removed 11 assue(true) statements.
[2020-11-25 13:23:01,275 INFO  L202        PluginConnector]: Adding new model DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:01 BoogieIcfgContainer
[2020-11-25 13:23:01,275 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:22:59" (2/2) ...
[2020-11-25 13:23:01,275 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:23:01,275 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@37a0e0a3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:01, skipping insertion in model container
[2020-11-25 13:23:01,275 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:23:01,275 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:23:01,275 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:23:01,276 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:23:01,277 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/3) ...
[2020-11-25 13:23:01,277 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7d1bed59 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:01, skipping insertion in model container
[2020-11-25 13:23:01,277 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:22:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:23:01,312 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:01 NWAContainer
[2020-11-25 13:23:01,312 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:23:01,312 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:23:01,312 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:23:01,313 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:23:01,313 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:01" (3/4) ...
[2020-11-25 13:23:01,314 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@181b63dc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:01, skipping insertion in model container
[2020-11-25 13:23:01,314 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:01" (4/4) ...
[2020-11-25 13:23:01,316 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:23:01,321 INFO  L110   BuchiProductObserver]: Initial RCFG 3981 locations, 5225 edges
[2020-11-25 13:23:01,321 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:23:01,333 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:23:04,158 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:23:04,172 INFO  L110   BuchiProductObserver]: BuchiProgram size 9590 locations, 16974 edges
[2020-11-25 13:23:04,173 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:04 BoogieIcfgContainer
[2020-11-25 13:23:04,173 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:23:04,173 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:23:04,173 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:23:04,174 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:23:04,175 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:04" (1/1) ...
[2020-11-25 13:23:04,336 INFO  L313           BlockEncoder]: Initial Icfg 9590 locations, 16974 edges
[2020-11-25 13:23:04,336 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:23:04,336 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:23:04,337 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:23:04,337 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:23:04,356 INFO  L70    emoveInfeasibleEdges]: Removed 153 edges and 25 locations because of local infeasibility
[2020-11-25 13:23:04,374 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 13:23:04,396 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:23:04,403 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:23:04,409 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:23:04,410 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:23:04,414 INFO  L313           BlockEncoder]: Encoded RCFG 9488 locations, 16706 edges
[2020-11-25 13:23:04,414 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:23:04 BasicIcfg
[2020-11-25 13:23:04,414 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:23:04,415 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:23:04,415 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:23:04,416 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:23:04,417 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:04,417 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:22:59" (1/6) ...
[2020-11-25 13:23:04,418 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4450a743 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:23:04, skipping insertion in model container
[2020-11-25 13:23:04,418 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:04,418 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:22:59" (2/6) ...
[2020-11-25 13:23:04,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4450a743 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:23:04, skipping insertion in model container
[2020-11-25 13:23:04,419 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:04,419 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:23:01" (3/6) ...
[2020-11-25 13:23:04,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4450a743 and model type DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:23:04, skipping insertion in model container
[2020-11-25 13:23:04,419 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:04,419 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:23:01" (4/6) ...
[2020-11-25 13:23:04,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4450a743 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:23:04, skipping insertion in model container
[2020-11-25 13:23:04,419 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:04,419 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:23:04" (5/6) ...
[2020-11-25 13:23:04,419 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4450a743 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:23:04, skipping insertion in model container
[2020-11-25 13:23:04,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:23:04,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:23:04" (6/6) ...
[2020-11-25 13:23:04,421 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DEAPCoin_0x1a3496c18d558bd9c6c8f609e1b129f67ab08163_totalsupply.bpl_BEv2
[2020-11-25 13:23:04,455 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:23:04,455 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:23:04,455 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:23:04,455 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:23:04,455 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:23:04,455 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:23:04,455 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:23:04,455 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:23:04,455 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:23:04,520 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9488 states.
[2020-11-25 13:23:04,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:04,584 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:04,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:04,600 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:04,600 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:04,600 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:23:04,600 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9488 states.
[2020-11-25 13:23:04,630 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:04,630 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:04,630 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:04,632 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:04,632 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND TRUE   revert
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND TRUE   choice == 25
[L10715]              gas := gas - 21000;
[L10716]  COND FALSE  !(gas >= 0)
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:04,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:04,647 INFO  L82        PathProgramCache]: Analyzing trace with hash 1019081444, now seen corresponding path program 1 times
[2020-11-25 13:23:04,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:04,675 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:04,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:23:04,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:04,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:23:05,117 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:05,126 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:23:05,127 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:23:05,128 INFO  L87              Difference]: Start difference. First operand 9488 states. Second operand 3 states.
[2020-11-25 13:23:05,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:05,531 INFO  L93              Difference]: Finished difference Result 4834 states and 5420 transitions.
[2020-11-25 13:23:05,531 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:23:05,532 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4834 states and 5420 transitions.
[2020-11-25 13:23:05,559 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:05,596 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4834 states to 4830 states and 5412 transitions.
[2020-11-25 13:23:05,597 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:23:05,599 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1202
[2020-11-25 13:23:05,600 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4830 states and 5412 transitions.
[2020-11-25 13:23:05,610 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:05,610 INFO  L728         BuchiCegarLoop]: Abstraction has 4830 states and 5412 transitions.
[2020-11-25 13:23:05,630 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4830 states and 5412 transitions.
[2020-11-25 13:23:05,698 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4830 to 4830.
[2020-11-25 13:23:05,698 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4830 states.
[2020-11-25 13:23:05,707 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4830 states to 4830 states and 5412 transitions.
[2020-11-25 13:23:05,708 INFO  L751         BuchiCegarLoop]: Abstraction has 4830 states and 5412 transitions.
[2020-11-25 13:23:05,708 INFO  L631         BuchiCegarLoop]: Abstraction has 4830 states and 5412 transitions.
[2020-11-25 13:23:05,708 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:23:05,708 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4830 states and 5412 transitions.
[2020-11-25 13:23:05,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:05,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:05,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:05,722 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:05,722 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND TRUE   revert
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:05,726 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:05,726 INFO  L82        PathProgramCache]: Analyzing trace with hash 417587792, now seen corresponding path program 1 times
[2020-11-25 13:23:05,728 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:05,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:05,764 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:23:05,764 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:05,764 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:23:05,765 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:05,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:23:05,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:23:05,766 INFO  L87              Difference]: Start difference. First operand 4830 states and 5412 transitions. cyclomatic complexity: 588 Second operand 3 states.
[2020-11-25 13:23:05,873 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:05,874 INFO  L93              Difference]: Finished difference Result 5714 states and 6358 transitions.
[2020-11-25 13:23:05,874 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:23:05,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5714 states and 6358 transitions.
[2020-11-25 13:23:05,889 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:05,913 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5714 states to 5714 states and 6358 transitions.
[2020-11-25 13:23:05,913 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1411
[2020-11-25 13:23:05,914 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1411
[2020-11-25 13:23:05,914 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5714 states and 6358 transitions.
[2020-11-25 13:23:05,923 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:05,923 INFO  L728         BuchiCegarLoop]: Abstraction has 5714 states and 6358 transitions.
[2020-11-25 13:23:05,929 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5714 states and 6358 transitions.
[2020-11-25 13:23:05,977 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5714 to 5150.
[2020-11-25 13:23:05,977 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5150 states.
[2020-11-25 13:23:05,983 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5150 states to 5150 states and 5668 transitions.
[2020-11-25 13:23:05,983 INFO  L751         BuchiCegarLoop]: Abstraction has 5150 states and 5668 transitions.
[2020-11-25 13:23:05,983 INFO  L631         BuchiCegarLoop]: Abstraction has 5150 states and 5668 transitions.
[2020-11-25 13:23:05,983 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:23:05,983 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5150 states and 5668 transitions.
[2020-11-25 13:23:05,990 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:05,990 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:05,990 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:05,995 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:05,995 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND TRUE   !(msgsender_MSG == owner_Ownable[this])
[L9398]               revert := true;
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND TRUE   revert
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND TRUE   revert
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:06,003 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:06,003 INFO  L82        PathProgramCache]: Analyzing trace with hash -2108630717, now seen corresponding path program 1 times
[2020-11-25 13:23:06,004 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:06,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:06,516 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 3850 trivial. 0 not checked.
[2020-11-25 13:23:06,516 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:06,516 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 13:23:06,517 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:06,517 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 13:23:06,517 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 13:23:06,518 INFO  L87              Difference]: Start difference. First operand 5150 states and 5668 transitions. cyclomatic complexity: 524 Second operand 10 states.
[2020-11-25 13:23:06,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:06,725 INFO  L93              Difference]: Finished difference Result 5221 states and 5760 transitions.
[2020-11-25 13:23:06,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 13:23:06,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5221 states and 5760 transitions.
[2020-11-25 13:23:06,738 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:06,755 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5221 states to 5197 states and 5726 transitions.
[2020-11-25 13:23:06,755 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1220
[2020-11-25 13:23:06,756 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1220
[2020-11-25 13:23:06,756 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5197 states and 5726 transitions.
[2020-11-25 13:23:06,761 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:06,761 INFO  L728         BuchiCegarLoop]: Abstraction has 5197 states and 5726 transitions.
[2020-11-25 13:23:06,766 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5197 states and 5726 transitions.
[2020-11-25 13:23:06,807 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5197 to 5170.
[2020-11-25 13:23:06,808 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5170 states.
[2020-11-25 13:23:06,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5170 states to 5170 states and 5693 transitions.
[2020-11-25 13:23:06,813 INFO  L751         BuchiCegarLoop]: Abstraction has 5170 states and 5693 transitions.
[2020-11-25 13:23:06,813 INFO  L631         BuchiCegarLoop]: Abstraction has 5170 states and 5693 transitions.
[2020-11-25 13:23:06,814 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:23:06,814 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5170 states and 5693 transitions.
[2020-11-25 13:23:06,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:23:06,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:06,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:06,824 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:06,824 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND TRUE   !!mintingFinished_MintableToken[this]
[L9414]               revert := true;
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND TRUE   revert
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND TRUE   revert
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:06,830 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:06,830 INFO  L82        PathProgramCache]: Analyzing trace with hash 1833378736, now seen corresponding path program 1 times
[2020-11-25 13:23:06,831 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:06,855 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:07,111 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 13:23:07,112 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:07,112 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:23:07,113 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:07,113 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:23:07,113 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:23:07,113 INFO  L87              Difference]: Start difference. First operand 5170 states and 5693 transitions. cyclomatic complexity: 529 Second operand 3 states.
[2020-11-25 13:23:07,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:07,179 INFO  L93              Difference]: Finished difference Result 5878 states and 6519 transitions.
[2020-11-25 13:23:07,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:23:07,179 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5878 states and 6519 transitions.
[2020-11-25 13:23:07,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:07,212 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5878 states to 5712 states and 6323 transitions.
[2020-11-25 13:23:07,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1358
[2020-11-25 13:23:07,213 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1374
[2020-11-25 13:23:07,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5712 states and 6323 transitions.
[2020-11-25 13:23:07,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:07,219 INFO  L728         BuchiCegarLoop]: Abstraction has 5712 states and 6323 transitions.
[2020-11-25 13:23:07,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5712 states and 6323 transitions.
[2020-11-25 13:23:07,267 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5712 to 5216.
[2020-11-25 13:23:07,267 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5216 states.
[2020-11-25 13:23:07,272 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5216 states to 5216 states and 5702 transitions.
[2020-11-25 13:23:07,273 INFO  L751         BuchiCegarLoop]: Abstraction has 5216 states and 5702 transitions.
[2020-11-25 13:23:07,273 INFO  L631         BuchiCegarLoop]: Abstraction has 5216 states and 5702 transitions.
[2020-11-25 13:23:07,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:23:07,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5216 states and 5702 transitions.
[2020-11-25 13:23:07,279 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:07,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:07,279 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:07,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:07,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND TRUE   __exception
[L2860]               __tmp__Balance := Balance;
[L2861]               __tmp__DType := DType;
[L2862]               __tmp__Alloc := Alloc;
[L2863]               __tmp__balance_ADDR := balance_ADDR;
[L2864]               __tmp__M_Ref_int := M_Ref_int;
[L2865]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L2866]               __tmp__M_int_bool := M_int_bool;
[L2867]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L2868]               __tmp__sum_balances2 := sum_balances2;
[L2869]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2870]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2871]               __tmp__sum_allowed3 := sum_allowed3;
[L2872]               __tmp__M_int_Ref := M_int_Ref;
[L2873]               __tmp__sum := sum;
[L2874]               __tmp__M_int_int := M_int_int;
[L2875]               __tmp__Length := Length;
[L2876]               __tmp__now := now;
[L2877]               __tmp__owner_Ownable := owner_Ownable;
[L2878]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L2879]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L2880]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L2881]               __tmp__balances_BasicToken := balances_BasicToken;
[L2882]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2883]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2884]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2885]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L2886]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L2887]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L2888]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L2889]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L2890]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L2891]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L2892]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L2893]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L2894]   CALL        call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6610]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6610]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6611]   COND FALSE  !(revert)
[L6614]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6614]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6615]   COND FALSE  !(revert)
[L6618]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6618]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6619]   COND FALSE  !(revert)
[L6622]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6622]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6623]   COND FALSE  !(revert)
[L6626]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6626]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6627]   COND FALSE  !(revert)
[L6630]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6236]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   COND FALSE  !(revert)
[L6240]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6240]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6241]   COND FALSE  !(revert)
[L6244]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6244]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6245]   COND FALSE  !(revert)
[L6248]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6248]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6252]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6219]               assume msgsender_MSG != null;
[L6220]               __tmp__Balance[this] := 0;
[L6221]               __tmp__mintingFinished_MintableToken[this] := false;
[L6256]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6257]   COND FALSE  !(revert)
[L6630]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6631]   COND FALSE  !(revert)
[L6634]   CALL        call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6409]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6409]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6410]   COND FALSE  !(revert)
[L6413]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6413]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6414]   COND FALSE  !(revert)
[L6417]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6417]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6418]   COND FALSE  !(revert)
[L6421]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6421]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   COND FALSE  !(revert)
[L6425]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6425]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6426]   COND FALSE  !(revert)
[L6429]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6236]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L6236]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6237]   COND FALSE  !(revert)
[L6240]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L6240]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6241]   COND FALSE  !(revert)
[L6244]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L6244]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6245]   COND FALSE  !(revert)
[L6248]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5985]   COND FALSE  !(revert)
[L5988]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5940]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5940]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5941]   COND FALSE  !(revert)
[L5944]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5925]               assume msgsender_MSG != null;
[L5926]               __tmp__Balance[this] := 0;
[L5944]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5945]   COND FALSE  !(revert)
[L5988]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5989]   COND FALSE  !(revert)
[L5992]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5811]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5773]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5758]               assume msgsender_MSG != null;
[L5759]               __tmp__Balance[this] := 0;
[L5773]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5774]   COND FALSE  !(revert)
[L5811]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5812]   COND FALSE  !(revert)
[L5815]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               assume msgsender_MSG != null;
[L5791]               __tmp__Balance[this] := 0;
[L5792]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L5793]               __tmp__sum_balances2[this] := 0;
[L5794]               __tmp__totalSupply__BasicToken[this] := 0;
[L5815]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5816]   COND FALSE  !(revert)
[L5992]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5993]   COND FALSE  !(revert)
[L5996]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5965]               assume msgsender_MSG != null;
[L5966]               __tmp__Balance[this] := 0;
[L5967]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L5968]               __tmp__sum_allowed3[this] := 0;
[L5996]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5997]   COND FALSE  !(revert)
[L6248]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6249]   COND FALSE  !(revert)
[L6252]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5253]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5234]               assume msgsender_MSG != null;
[L5235]               __tmp__Balance[this] := 0;
[L5236]               __tmp__owner_Ownable[this] := null;
[L5238]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5253]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5254]   COND FALSE  !(revert)
[L6252]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6253]   COND FALSE  !(revert)
[L6256]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6219]               assume msgsender_MSG != null;
[L6220]               __tmp__Balance[this] := 0;
[L6221]               __tmp__mintingFinished_MintableToken[this] := false;
[L6256]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6257]   COND FALSE  !(revert)
[L6429]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6430]   COND FALSE  !(revert)
[L6433]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6394]               assume msgsender_MSG != null;
[L6395]               __tmp__Balance[this] := 0;
[L6433]   RET         call ERC223Token_ERC223Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6434]   COND FALSE  !(revert)
[L6634]   RET         call ERC223Token_ERC223Token__fail(this, msgsender_MSG, msgvalue_MSG);
[L6635]   COND FALSE  !(revert)
[L6638]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6511]               assume msgsender_MSG != null;
[L6512]               __tmp__Balance[this] := 0;
[L6513]               __tmp__name_DEAPCoin[this] := -635866188;
[L6514]               __tmp__symbol_DEAPCoin[this] := -1031151507;
[L6515]               __tmp__decimals_DEAPCoin[this] := 18;
[L6516]               __var_19 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6517]               __tmp__INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6518]               __var_20 := __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6519]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, __tmp__decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6520]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (__tmp__INITIAL_SUPPLY_DEAPCoin[this] - __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6521]               __tmp__owner_wallet_DEAPCoin[this] := null;
[L6522]               __tmp__unsale_owner_wallet_DEAPCoin[this] := null;
[L6524]               __tmp__group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6525]               __tmp__owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6526]               __tmp__unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6527]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6528]   CALL        call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6294]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6294]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6295]   COND FALSE  !(revert)
[L6298]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6298]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6299]   COND FALSE  !(revert)
[L6302]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6302]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6303]   COND FALSE  !(revert)
[L6306]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6307]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6307]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6308]   COND FALSE  !(revert)
[L6311]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6312]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6313]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6314]               __ret_0_ := true;
[L6528]   RET         call __var_16 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__owner_wallet_DEAPCoin[this], __tmp__INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6529]   COND FALSE  !(revert)
[L6535]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6536]   CALL        call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6294]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6294]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6295]   COND FALSE  !(revert)
[L6298]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6298]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6299]   COND FALSE  !(revert)
[L6302]   CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6302]   RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__totalSupply__BasicToken[this], _amount_s932);
[L6303]   COND FALSE  !(revert)
[L6306]               __tmp__totalSupply__BasicToken[this] := __var_14;
[L6307]   CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L5392]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5393]               c_s146 := c_s146;
[L6307]   RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s932], _amount_s932);
[L6308]   COND FALSE  !(revert)
[L6311]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] - __tmp__balances_BasicToken[this][_to_s932];
[L6312]               __tmp__balances_BasicToken[this][_to_s932] := __var_15;
[L6313]               __tmp__sum_balances2[this] := __tmp__sum_balances2[this] + __tmp__balances_BasicToken[this][_to_s932];
[L6314]               __ret_0_ := true;
[L6536]   RET         call __var_17 := mint~address~uint256_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__unsale_owner_wallet_DEAPCoin[this], __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6537]   COND FALSE  !(revert)
[L6543]   COND TRUE   __tmp__DType[this] == DEAPCoin
[L6544]   CALL        call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6350]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9389]   COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L6350]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6351]   COND FALSE  !(revert)
[L6354]   CALL        call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9405]   COND FALSE  !(!!__tmp__mintingFinished_MintableToken[this])
[L6354]   RET         call canMint_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6355]   COND FALSE  !(revert)
[L6358]               __tmp__mintingFinished_MintableToken[this] := true;
[L6359]               __ret_0_ := true;
[L6544]   RET         call __var_18 := finishMinting_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6638]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6639]   COND FALSE  !(revert)
[L2894]   RET         call DEAPCoin_DEAPCoin__fail(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2895]               assume revert || gas < 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:07,289 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:07,289 INFO  L82        PathProgramCache]: Analyzing trace with hash 7191109, now seen corresponding path program 1 times
[2020-11-25 13:23:07,290 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:07,327 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:07,767 INFO  L134       CoverageAnalysis]: Checked inductivity of 3940 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3940 trivial. 0 not checked.
[2020-11-25 13:23:07,768 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:07,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:23:07,769 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:07,769 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:23:07,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:23:07,769 INFO  L87              Difference]: Start difference. First operand 5216 states and 5702 transitions. cyclomatic complexity: 492 Second operand 4 states.
[2020-11-25 13:23:07,999 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:07,999 INFO  L93              Difference]: Finished difference Result 6405 states and 7159 transitions.
[2020-11-25 13:23:07,999 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 13:23:07,999 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6405 states and 7159 transitions.
[2020-11-25 13:23:08,014 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 13:23:08,032 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6405 states to 6147 states and 6882 transitions.
[2020-11-25 13:23:08,033 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 13:23:08,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 13:23:08,034 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6147 states and 6882 transitions.
[2020-11-25 13:23:08,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:08,039 INFO  L728         BuchiCegarLoop]: Abstraction has 6147 states and 6882 transitions.
[2020-11-25 13:23:08,044 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6147 states and 6882 transitions.
[2020-11-25 13:23:08,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6147 to 5415.
[2020-11-25 13:23:08,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5415 states.
[2020-11-25 13:23:08,091 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5415 states to 5415 states and 5994 transitions.
[2020-11-25 13:23:08,091 INFO  L751         BuchiCegarLoop]: Abstraction has 5415 states and 5994 transitions.
[2020-11-25 13:23:08,091 INFO  L631         BuchiCegarLoop]: Abstraction has 5415 states and 5994 transitions.
[2020-11-25 13:23:08,091 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:23:08,091 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5415 states and 5994 transitions.
[2020-11-25 13:23:08,097 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 13:23:08,097 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:08,097 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:08,099 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:08,099 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND FALSE  !(revert)
[L6585]   COND TRUE   DType[this] == DEAPCoin
[L6586]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6586]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6587]   COND FALSE  !(revert)
[L6593]   COND TRUE   DType[this] == DEAPCoin
[L6594]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6365]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6365]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   COND FALSE  !(revert)
[L6369]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6369]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6370]   COND FALSE  !(revert)
[L6373]               mintingFinished_MintableToken[this] := true;
[L6374]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6375]               __ret_0_ := true;
[L6594]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND FALSE  !(__exception)
[L1451]   CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5841]               __ret_0_ := totalSupply__BasicToken[this];
[L1451]   RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1452]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_wallet_DEAPCoin[this] == old(owner_wallet_DEAPCoin[this])) && unsale_owner_wallet_DEAPCoin[this] == old(unsale_owner_wallet_DEAPCoin[this])) && group_lockup_DEAPCoin[this] == old(group_lockup_DEAPCoin[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                  revert := revert_hold;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND TRUE   choice == 25
[L10715]              gas := gas - 21000;
[L10716]  COND FALSE  !(gas >= 0)
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:08,106 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:08,106 INFO  L82        PathProgramCache]: Analyzing trace with hash 440567082, now seen corresponding path program 1 times
[2020-11-25 13:23:08,107 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:08,130 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:08,396 INFO  L134       CoverageAnalysis]: Checked inductivity of 3948 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3948 trivial. 0 not checked.
[2020-11-25 13:23:08,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:08,397 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:23:08,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:08,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:23:08,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:23:08,397 INFO  L87              Difference]: Start difference. First operand 5415 states and 5994 transitions. cyclomatic complexity: 585 Second operand 4 states.
[2020-11-25 13:23:08,429 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:08,429 INFO  L93              Difference]: Finished difference Result 5255 states and 5773 transitions.
[2020-11-25 13:23:08,430 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:23:08,430 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5255 states and 5773 transitions.
[2020-11-25 13:23:08,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:08,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5255 states to 5245 states and 5763 transitions.
[2020-11-25 13:23:08,447 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1363
[2020-11-25 13:23:08,447 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1363
[2020-11-25 13:23:08,447 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5245 states and 5763 transitions.
[2020-11-25 13:23:08,450 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:08,450 INFO  L728         BuchiCegarLoop]: Abstraction has 5245 states and 5763 transitions.
[2020-11-25 13:23:08,454 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5245 states and 5763 transitions.
[2020-11-25 13:23:08,478 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5245 to 5245.
[2020-11-25 13:23:08,478 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5245 states.
[2020-11-25 13:23:08,482 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5245 states to 5245 states and 5763 transitions.
[2020-11-25 13:23:08,483 INFO  L751         BuchiCegarLoop]: Abstraction has 5245 states and 5763 transitions.
[2020-11-25 13:23:08,483 INFO  L631         BuchiCegarLoop]: Abstraction has 5245 states and 5763 transitions.
[2020-11-25 13:23:08,483 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:23:08,483 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5245 states and 5763 transitions.
[2020-11-25 13:23:08,488 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:23:08,488 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:23:08,488 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:23:08,490 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:23:08,490 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L10885]              assume null == 0;
[L10886]  CALL        call this := FreshRefGenerator__success();
[L5225]               havoc newRef;
[L5226]               assume Alloc[newRef] == false;
[L5227]               Alloc[newRef] := true;
[L5228]               assume newRef != null;
[L10886]  RET         call this := FreshRefGenerator__success();
[L10887]              assume now >= 0;
[L10888]              assume DType[this] == DEAPCoin;
[L10889]              assume msgvalue_MSG == 0;
[L10890]              gas := gas - 53000;
[L10891]  CALL        call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2857]               havoc __exception;
[L2858]               revert := false;
[L2859]   COND FALSE  !(__exception)
[L2897]   CALL        call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6651]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6651]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6652]   COND FALSE  !(revert)
[L6655]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6655]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6656]   COND FALSE  !(revert)
[L6659]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6659]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6660]   COND FALSE  !(revert)
[L6663]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6663]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6664]   COND FALSE  !(revert)
[L6667]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6667]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6668]   COND FALSE  !(revert)
[L6671]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6671]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6675]   CALL        call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6441]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6441]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6445]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6449]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6449]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   COND FALSE  !(revert)
[L6453]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6453]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6454]   COND FALSE  !(revert)
[L6457]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6457]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6458]   COND FALSE  !(revert)
[L6461]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6264]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6264]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6265]   COND FALSE  !(revert)
[L6268]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6268]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6269]   COND FALSE  !(revert)
[L6272]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6272]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6273]   COND FALSE  !(revert)
[L6276]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6004]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L6004]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6005]   COND FALSE  !(revert)
[L6008]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5952]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]   COND FALSE  !(revert)
[L5956]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5933]               assume msgsender_MSG != null;
[L5934]               Balance[this] := 0;
[L5956]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6008]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6009]   COND FALSE  !(revert)
[L6012]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5823]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5781]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]               assume msgsender_MSG != null;
[L5767]               Balance[this] := 0;
[L5781]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]   COND FALSE  !(revert)
[L5823]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5824]   COND FALSE  !(revert)
[L5827]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5801]               assume msgsender_MSG != null;
[L5802]               Balance[this] := 0;
[L5803]               balances_BasicToken[this] := zeroRefintArr();
[L5804]               sum_balances2[this] := 0;
[L5805]               totalSupply__BasicToken[this] := 0;
[L5827]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5828]   COND FALSE  !(revert)
[L6012]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]   COND FALSE  !(revert)
[L6016]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5975]               assume msgsender_MSG != null;
[L5976]               Balance[this] := 0;
[L5977]               allowed_StandardToken[this] := zeroRefRefintArr();
[L5978]               sum_allowed3[this] := 0;
[L6016]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6017]   COND FALSE  !(revert)
[L6276]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6277]   COND FALSE  !(revert)
[L6280]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5261]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]               assume msgsender_MSG != null;
[L5245]               Balance[this] := 0;
[L5246]               owner_Ownable[this] := null;
[L5248]               owner_Ownable[this] := msgsender_MSG;
[L5261]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5262]   COND FALSE  !(revert)
[L6280]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6281]   COND FALSE  !(revert)
[L6284]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6228]               assume msgsender_MSG != null;
[L6229]               Balance[this] := 0;
[L6230]               mintingFinished_MintableToken[this] := false;
[L6284]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6285]   COND FALSE  !(revert)
[L6461]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6462]   COND FALSE  !(revert)
[L6465]   CALL        call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6402]               assume msgsender_MSG != null;
[L6403]               Balance[this] := 0;
[L6465]   RET         call ERC223Token_ERC223Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]   COND FALSE  !(revert)
[L6675]   RET         call ERC223Token_ERC223Token__success(this, msgsender_MSG, msgvalue_MSG);
[L6676]   COND FALSE  !(revert)
[L6679]   CALL        call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6561]               assume msgsender_MSG != null;
[L6562]               Balance[this] := 0;
[L6563]               name_DEAPCoin[this] := -635866188;
[L6564]               symbol_DEAPCoin[this] := -1031151507;
[L6565]               decimals_DEAPCoin[this] := 18;
[L6566]               __var_19 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6567]               INITIAL_SUPPLY_DEAPCoin[this] := 30000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6568]               __var_20 := decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6569]               INITIAL_SALE_SUPPLY_DEAPCoin[this] := 12000000000 * (nonlinearPow(10, decimals_DEAPCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6570]               INITIAL_UNSALE_SUPPLY_DEAPCoin[this] := (INITIAL_SUPPLY_DEAPCoin[this] - INITIAL_SALE_SUPPLY_DEAPCoin[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6571]               owner_wallet_DEAPCoin[this] := null;
[L6572]               unsale_owner_wallet_DEAPCoin[this] := null;
[L6574]               group_lockup_DEAPCoin[this] := _group_lockup_s1076;
[L6575]               owner_wallet_DEAPCoin[this] := _sale_owner_wallet_s1076;
[L6576]               unsale_owner_wallet_DEAPCoin[this] := _unsale_owner_wallet_s1076;
[L6577]   COND TRUE   DType[this] == DEAPCoin
[L6578]   CALL        call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6578]   RET         call __var_16 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, owner_wallet_DEAPCoin[this], INITIAL_SALE_SUPPLY_DEAPCoin[this]);
[L6579]   COND FALSE  !(revert)
[L6585]   COND TRUE   DType[this] == DEAPCoin
[L6586]   CALL        call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6322]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6322]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6326]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6330]   RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s932);
[L6331]   COND FALSE  !(revert)
[L6334]               totalSupply__BasicToken[this] := __var_14;
[L6335]   CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L5399]               c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5400]               assert c_s146 >= a_s146;
[L5401]               c_s146 := c_s146;
[L6335]   RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s932], _amount_s932);
[L6336]   COND FALSE  !(revert)
[L6339]               sum_balances2[this] := sum_balances2[this] - balances_BasicToken[this][_to_s932];
[L6340]               balances_BasicToken[this][_to_s932] := __var_15;
[L6341]               sum_balances2[this] := sum_balances2[this] + balances_BasicToken[this][_to_s932];
[L6342]               assert { :EventEmitted "Mint_MintableToken" } true;
[L6343]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L6344]               __ret_0_ := true;
[L6586]   RET         call __var_17 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, unsale_owner_wallet_DEAPCoin[this], INITIAL_UNSALE_SUPPLY_DEAPCoin[this]);
[L6587]   COND FALSE  !(revert)
[L6593]   COND TRUE   DType[this] == DEAPCoin
[L6594]   CALL        call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6365]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9397]   COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L6365]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6366]   COND FALSE  !(revert)
[L6369]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9413]   COND FALSE  !(!!mintingFinished_MintableToken[this])
[L6369]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6370]   COND FALSE  !(revert)
[L6373]               mintingFinished_MintableToken[this] := true;
[L6374]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L6375]               __ret_0_ := true;
[L6594]   RET         call __var_18 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L6679]   RET         call DEAPCoin_DEAPCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L6680]   COND FALSE  !(revert)
[L2897]   RET         call DEAPCoin_DEAPCoin__success(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L2898]               assume !revert && gas >= 0;
[L10891]  RET         call DEAPCoin_DEAPCoin(this, msgsender_MSG, msgvalue_MSG, _sale_owner_wallet_s1076, _unsale_owner_wallet_s1076, _group_lockup_s1076);
[L10892]              assume !revert && gas >= 0;
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND TRUE   __exception
[L1414]               __tmp__Balance := Balance;
[L1415]               __tmp__DType := DType;
[L1416]               __tmp__Alloc := Alloc;
[L1417]               __tmp__balance_ADDR := balance_ADDR;
[L1418]               __tmp__M_Ref_int := M_Ref_int;
[L1419]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1420]               __tmp__M_int_bool := M_int_bool;
[L1421]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1422]               __tmp__sum_balances2 := sum_balances2;
[L1423]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1425]               __tmp__sum_allowed3 := sum_allowed3;
[L1426]               __tmp__M_int_Ref := M_int_Ref;
[L1427]               __tmp__sum := sum;
[L1428]               __tmp__M_int_int := M_int_int;
[L1429]               __tmp__Length := Length;
[L1430]               __tmp__now := now;
[L1431]               __tmp__owner_Ownable := owner_Ownable;
[L1432]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1433]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1434]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1435]               __tmp__balances_BasicToken := balances_BasicToken;
[L1436]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1437]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1438]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1439]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1440]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1441]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1442]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1443]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1444]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1445]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1446]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1447]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1448]   CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5835]               __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L1448]   RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1449]               assume revert || gas < 0;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

Loop:
[L10895]  CALL        call CorralChoice_DEAPCoin(this);
[L10640]              havoc msgsender_MSG;
[L10641]              havoc msgvalue_MSG;
[L10642]              havoc choice;
[L10643]              havoc __ret_0_owner;
[L10644]              havoc newOwner_s54;
[L10645]              havoc __ret_0_totalSupply;
[L10646]              havoc _owner_s578;
[L10647]              havoc __ret_0_balanceOf;
[L10648]              havoc _to_s1284;
[L10649]              havoc _value_s1284;
[L10650]              havoc __ret_0_transfer;
[L10651]              havoc _owner_s759;
[L10652]              havoc _spender_s759;
[L10653]              havoc __ret_0_allowance;
[L10654]              havoc _from_s715;
[L10655]              havoc _to_s715;
[L10656]              havoc _value_s715;
[L10657]              havoc __ret_0_transferFrom;
[L10658]              havoc _spender_s743;
[L10659]              havoc _value_s743;
[L10660]              havoc __ret_0_approve;
[L10661]              havoc _spender_s800;
[L10662]              havoc _addedValue_s800;
[L10663]              havoc __ret_0_increaseApproval;
[L10664]              havoc _spender_s860;
[L10665]              havoc _subtractedValue_s860;
[L10666]              havoc __ret_0_decreaseApproval;
[L10667]              havoc __ret_0_mintingFinished;
[L10668]              havoc _to_s932;
[L10669]              havoc _amount_s932;
[L10670]              havoc __ret_0_mint;
[L10671]              havoc __ret_0_finishMinting;
[L10672]              havoc _to_s1413;
[L10673]              havoc _value_s1413;
[L10674]              havoc _data_s1413;
[L10675]              havoc __ret_0_transfer_ERC223;
[L10676]              havoc __ret_0_name;
[L10677]              havoc __ret_0_symbol;
[L10678]              havoc __ret_0_decimals;
[L10679]              havoc __ret_0_INITIAL_SUPPLY;
[L10680]              havoc __ret_0_INITIAL_SALE_SUPPLY;
[L10681]              havoc __ret_0_INITIAL_UNSALE_SUPPLY;
[L10682]              havoc __ret_0_owner_wallet;
[L10683]              havoc __ret_0_unsale_owner_wallet;
[L10684]              havoc __ret_0_group_lockup;
[L10685]              havoc _sale_owner_wallet_s1076;
[L10686]              havoc _unsale_owner_wallet_s1076;
[L10687]              havoc _group_lockup_s1076;
[L10688]              havoc _to_s1162;
[L10689]              havoc _value_s1162;
[L10690]              havoc __ret_0_sendTokens;
[L10691]              havoc _from_s1567;
[L10692]              havoc _users_s1567;
[L10693]              havoc _values_s1567;
[L10694]              havoc __ret_0_batchTransfer;
[L10695]              havoc tmpNow;
[L10696]              havoc gas;
[L10697]              assume gas > 4000000 && gas <= 8000000;
[L10698]              tmpNow := now;
[L10699]              havoc now;
[L10700]              assume now > tmpNow;
[L10701]              assume msgsender_MSG != null;
[L10702]              assume DType[msgsender_MSG] != Ownable;
[L10703]              assume DType[msgsender_MSG] != SafeMath;
[L10704]              assume DType[msgsender_MSG] != GroupLockup;
[L10705]              assume DType[msgsender_MSG] != ERC20Basic;
[L10706]              assume DType[msgsender_MSG] != BasicToken;
[L10707]              assume DType[msgsender_MSG] != ERC20;
[L10708]              assume DType[msgsender_MSG] != StandardToken;
[L10709]              assume DType[msgsender_MSG] != MintableToken;
[L10710]              assume DType[msgsender_MSG] != ERC223Token;
[L10711]              assume DType[msgsender_MSG] != ERC223ContractInterface;
[L10712]              assume DType[msgsender_MSG] != DEAPCoin;
[L10713]              Alloc[msgsender_MSG] := true;
[L10714]  COND FALSE  !(choice == 25)
[L10720]  COND FALSE  !(choice == 24)
[L10726]  COND TRUE   choice == 23
[L10727]              gas := gas - 21000;
[L10728]  COND TRUE   gas >= 0
[L10729]              assume msgvalue_MSG == 0;
[L10730]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L1411]               havoc __exception;
[L1412]               revert := false;
[L1413]   COND TRUE   __exception
[L1414]               __tmp__Balance := Balance;
[L1415]               __tmp__DType := DType;
[L1416]               __tmp__Alloc := Alloc;
[L1417]               __tmp__balance_ADDR := balance_ADDR;
[L1418]               __tmp__M_Ref_int := M_Ref_int;
[L1419]               __tmp__sum_lockup_list0 := sum_lockup_list0;
[L1420]               __tmp__M_int_bool := M_int_bool;
[L1421]               __tmp__sum_lockup_list_flag1 := sum_lockup_list_flag1;
[L1422]               __tmp__sum_balances2 := sum_balances2;
[L1423]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1424]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1425]               __tmp__sum_allowed3 := sum_allowed3;
[L1426]               __tmp__M_int_Ref := M_int_Ref;
[L1427]               __tmp__sum := sum;
[L1428]               __tmp__M_int_int := M_int_int;
[L1429]               __tmp__Length := Length;
[L1430]               __tmp__now := now;
[L1431]               __tmp__owner_Ownable := owner_Ownable;
[L1432]               __tmp__lockup_list_GroupLockup := lockup_list_GroupLockup;
[L1433]               __tmp__lockup_list_flag_GroupLockup := lockup_list_flag_GroupLockup;
[L1434]               __tmp__user_list_GroupLockup := user_list_GroupLockup;
[L1435]               __tmp__balances_BasicToken := balances_BasicToken;
[L1436]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1437]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L1438]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1439]               __tmp__name_DEAPCoin := name_DEAPCoin;
[L1440]               __tmp__symbol_DEAPCoin := symbol_DEAPCoin;
[L1441]               __tmp__decimals_DEAPCoin := decimals_DEAPCoin;
[L1442]               __tmp__INITIAL_SUPPLY_DEAPCoin := INITIAL_SUPPLY_DEAPCoin;
[L1443]               __tmp__INITIAL_SALE_SUPPLY_DEAPCoin := INITIAL_SALE_SUPPLY_DEAPCoin;
[L1444]               __tmp__INITIAL_UNSALE_SUPPLY_DEAPCoin := INITIAL_UNSALE_SUPPLY_DEAPCoin;
[L1445]               __tmp__owner_wallet_DEAPCoin := owner_wallet_DEAPCoin;
[L1446]               __tmp__unsale_owner_wallet_DEAPCoin := unsale_owner_wallet_DEAPCoin;
[L1447]               __tmp__group_lockup_DEAPCoin := group_lockup_DEAPCoin;
[L1448]   CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5835]               __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L1448]   RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1449]               assume revert || gas < 0;
[L10730]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L10895]  RET         call CorralChoice_DEAPCoin(this);

[2020-11-25 13:23:08,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:23:08,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 648554796, now seen corresponding path program 1 times
[2020-11-25 13:23:08,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:23:08,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:23:08,837 INFO  L134       CoverageAnalysis]: Checked inductivity of 3948 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3948 trivial. 0 not checked.
[2020-11-25 13:23:08,838 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:23:08,838 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:23:08,838 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:23:08,838 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:23:08,838 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:23:08,838 INFO  L87              Difference]: Start difference. First operand 5245 states and 5763 transitions. cyclomatic complexity: 524 Second operand 5 states.
[2020-11-25 13:23:09,057 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:23:09,057 INFO  L93              Difference]: Finished difference Result 3218 states and 3532 transitions.
[2020-11-25 13:23:09,057 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:23:09,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3218 states and 3532 transitions.
[2020-11-25 13:23:09,063 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:23:09,063 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3218 states to 0 states and 0 transitions.
[2020-11-25 13:23:09,063 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:23:09,063 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:23:09,063 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:23:09,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:23:09,063 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:23:09,063 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:23:09,064 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:23:09,064 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:23:09,064 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:23:09,064 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:23:09,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:23:09,067 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:23:09 BasicIcfg
[2020-11-25 13:23:09,067 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:23:09,067 INFO  L168              Benchmark]: Toolchain (without parser) took 9371.90 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 924.5 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 456.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,068 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,068 INFO  L168              Benchmark]: Boogie Preprocessor took 141.78 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,068 INFO  L168              Benchmark]: UtopiaSpecLang took 84.17 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,069 INFO  L168              Benchmark]: Boogie Printer took 24.95 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,069 INFO  L168              Benchmark]: RCFGBuilder took 1327.15 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 63.4 MB). Free memory was 881.5 MB in the beginning and 838.7 MB in the end (delta: 42.8 MB). Peak memory consumption was 171.9 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,069 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.62 ms. Allocated memory is still 1.1 GB. Free memory was 838.7 MB in the beginning and 835.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,070 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2860.80 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 466.1 MB). Free memory was 835.3 MB in the beginning and 1.3 GB in the end (delta: -451.3 MB). Peak memory consumption was 432.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,070 INFO  L168              Benchmark]: BlockEncodingV2 took 241.31 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 131.5 MB). Peak memory consumption was 131.5 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,070 INFO  L168              Benchmark]: BuchiAutomizer took 4652.30 ms. Allocated memory was 1.6 GB in the beginning and 2.5 GB in the end (delta: 963.6 MB). Free memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: -806.0 MB). Peak memory consumption was 157.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:23:09,073 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9590 locations, 16974 edges
  - StatisticsResult: Encoded RCFG
    9488 locations, 16706 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 141.78 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 84.17 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.95 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1327.15 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 63.4 MB). Free memory was 881.5 MB in the beginning and 838.7 MB in the end (delta: 42.8 MB). Peak memory consumption was 171.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.62 ms. Allocated memory is still 1.1 GB. Free memory was 838.7 MB in the beginning and 835.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2860.80 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 466.1 MB). Free memory was 835.3 MB in the beginning and 1.3 GB in the end (delta: -451.3 MB). Peak memory consumption was 432.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 241.31 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.2 GB in the end (delta: 131.5 MB). Peak memory consumption was 131.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4652.30 ms. Allocated memory was 1.6 GB in the beginning and 2.5 GB in the end (delta: 963.6 MB). Free memory was 1.2 GB in the beginning and 2.0 GB in the end (delta: -806.0 MB). Peak memory consumption was 157.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3981 locations, 5225 edges
  - StatisticsResult: BuchiProgram size
    9590 locations, 16974 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.6s and 8 iterations.  TraceHistogramMax:24. Analysis of lassos took 2.4s. Construction of modules took 0.6s. BÃ¼chi inclusion checks took 0.6s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 6 MinimizatonAttempts, 1819 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5415 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 35542 SDtfs, 21827 SDslu, 66051 SDs, 0 SdLazy, 3802 SolverSat, 3944 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_(success_totalSupply_BasicToken0)asicToken0) ==> ( <>(success_totalSupply_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
