This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:16:22,024 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:16:22,025 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:16:22,035 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:16:22,036 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:16:22,036 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:16:22,037 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:16:22,039 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:16:22,040 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:16:22,041 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:16:22,041 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:16:22,042 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:16:22,042 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:16:22,043 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:16:22,044 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:16:22,044 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:16:22,045 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:16:22,046 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:16:22,049 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:16:22,051 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:16:22,053 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:16:22,054 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:16:22,058 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:16:22,058 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:16:22,059 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:16:22,060 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:16:22,060 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:16:22,061 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:16:22,061 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:16:22,061 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:16:22,062 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:16:22,062 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:16:22,063 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:16:22,063 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:16:22,064 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:16:22,064 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:16:22,064 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:16:22,065 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:16:22,065 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:16:22,065 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:16:22,066 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:16:22,066 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:16:22,074 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:16:22,074 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:16:22,075 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:16:22,075 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:16:22,075 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:16:22,076 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:16:22,076 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:16:22,076 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:16:22,076 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:16:22,076 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:16:22,076 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:16:22,076 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:16:22,076 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:16:22,077 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:16:22,077 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:16:22,078 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:16:22,078 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:16:22,078 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:16:22,078 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:16:22,078 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:16:22,102 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:16:22,115 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:16:22,117 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:16:22,118 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:16:22,118 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:16:22,119 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl
[2020-11-25 18:16:22,119 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl'
[2020-11-25 18:16:22,211 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:16:22,212 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:16:22,213 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:16:22,213 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:16:22,213 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:16:22,228 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,230 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,264 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,265 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,296 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,309 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,319 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,330 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:16:22,330 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:16:22,330 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:16:22,332 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:16:22,336 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/1) ...
[2020-11-25 18:16:22,354 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Protected.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Protected.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this]) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this]) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 18:16:22,360 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Protected.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Protected.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this]) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this]) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 18:16:22,367 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Protected.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Protected.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this]) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this]) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 18:16:22,375 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s717 && value_s717<=_balances_ERC20[this][msg.sender] ) && value_s717>=0 ) && value_s717<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s717]>=0 ) && _balances_ERC20[this][to_s717]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:16:22,378 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _name_ERC20DetailedChangeable[this]==( old(_name_ERC20DetailedChangeable[this]) ) ) && _symbol_ERC20DetailedChangeable[this]==( old(_symbol_ERC20DetailedChangeable[this]) ) ) && _decimals_ERC20DetailedChangeable[this]==( old(_decimals_ERC20DetailedChangeable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Protected>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20DetailedChangeable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20DetailedChangeable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20DetailedChangeable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20DetailedChangeable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20DetailedChangeable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20DetailedChangeable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]]]]
[2020-11-25 18:16:22,383 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Protected.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Protected.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this]) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this]) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 18:16:22,383 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Protected0) ==> ( <>AP(success_transfer_ERC20Protected0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:16:22,395 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:22 PropertyContainer
[2020-11-25 18:16:22,395 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:16:22,395 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:16:22,396 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:16:22,396 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:16:22,397 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/2) ...
[2020-11-25 18:16:22,397 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:16:22,397 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:16:22,417 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:22" (2/2) ...
[2020-11-25 18:16:22,417 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:16:22,418 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:16:22,418 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:16:22,418 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:16:22,419 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/2) ...
[2020-11-25 18:16:22,473 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:16:22,473 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:16:22,473 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 18:16:22,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 18:16:22,473 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 18:16:22,473 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 18:16:22,473 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 18:16:22,474 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 18:16:22,474 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 18:16:22,474 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 18:16:22,474 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:16:22,474 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:16:22,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:16:22,475 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 18:16:22,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 18:16:22,476 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 18:16:22,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 18:16:22,476 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 18:16:22,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 18:16:22,476 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 18:16:22,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 18:16:22,476 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 18:16:22,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 18:16:22,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 18:16:22,478 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 18:16:22,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 18:16:22,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 18:16:22,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 18:16:22,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected_NoBaseCtor__success
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected
[2020-11-25 18:16:22,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected
[2020-11-25 18:16:22,479 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Protected__success
[2020-11-25 18:16:22,480 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected
[2020-11-25 18:16:22,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected
[2020-11-25 18:16:22,480 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected
[2020-11-25 18:16:22,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected
[2020-11-25 18:16:22,480 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success
[2020-11-25 18:16:22,480 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable
[2020-11-25 18:16:22,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable
[2020-11-25 18:16:22,480 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable
[2020-11-25 18:16:22,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable
[2020-11-25 18:16:22,480 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable
[2020-11-25 18:16:22,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable
[2020-11-25 18:16:22,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF_NoBaseCtor__success
[2020-11-25 18:16:22,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF
[2020-11-25 18:16:22,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF
[2020-11-25 18:16:22,481 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF
[2020-11-25 18:16:22,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF
[2020-11-25 18:16:22,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF
[2020-11-25 18:16:22,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:16:22,482 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Protected
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Protected
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20DetailedChangeable
[2020-11-25 18:16:22,483 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20DetailedChangeable
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ISF
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:16:22,484 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 18:16:22,485 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 18:16:22,486 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 18:16:22,486 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 18:16:22,486 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:16:22,486 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 18:16:22,486 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:16:22,487 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:16:22,488 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:16:22,488 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:16:22,488 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:16:22,488 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:16:22,488 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 18:16:22,488 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 18:16:22,489 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 18:16:22,490 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected_NoBaseCtor__fail
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected__success
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected__fail
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Protected__fail
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected__success
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected__fail
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected__success
[2020-11-25 18:16:22,491 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected__fail
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,492 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF_NoBaseCtor__fail
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF__success
[2020-11-25 18:16:22,493 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF__fail
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF__success
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF__fail
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF__success
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF__fail
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF__success
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF__fail
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:16:22,494 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:16:22,495 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:16:22,495 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:16:22,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:16:22,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:16:22,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:16:22,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:16:22,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 18:16:22,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:16:22,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 18:16:22,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:16:22,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 18:16:22,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 18:16:22,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected_NoBaseCtor__fail
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected_NoBaseCtor__success
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected__fail
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected__success
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Protected__fail
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Protected__success
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected__fail
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected__success
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected__fail
[2020-11-25 18:16:22,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable__fail
[2020-11-25 18:16:22,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable__success
[2020-11-25 18:16:22,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF_NoBaseCtor__fail
[2020-11-25 18:16:22,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF_NoBaseCtor__success
[2020-11-25 18:16:22,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF__fail
[2020-11-25 18:16:22,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF__success
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF__fail
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF__success
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF__fail
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF__success
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF__fail
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF__success
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:16:22,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 18:16:22,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Protected
[2020-11-25 18:16:22,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Protected
[2020-11-25 18:16:22,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20DetailedChangeable
[2020-11-25 18:16:22,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20DetailedChangeable
[2020-11-25 18:16:22,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ISF
[2020-11-25 18:16:22,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:16:22,507 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:16:22,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:16:23,258 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:16:23,258 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:16:23,258 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:16:23,354 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:16:23,354 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-25 18:16:23,357 INFO  L202        PluginConnector]: Adding new model ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:23 BoogieIcfgContainer
[2020-11-25 18:16:23,357 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:22" (2/2) ...
[2020-11-25 18:16:23,357 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:16:23,357 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3960d809 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:23, skipping insertion in model container
[2020-11-25 18:16:23,357 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:16:23,358 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:16:23,358 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:16:23,359 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:16:23,359 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/3) ...
[2020-11-25 18:16:23,359 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@31327117 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:23, skipping insertion in model container
[2020-11-25 18:16:23,360 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:22" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:16:23,398 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:23 NWAContainer
[2020-11-25 18:16:23,398 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:16:23,398 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:16:23,398 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:16:23,399 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:16:23,400 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:23" (3/4) ...
[2020-11-25 18:16:23,401 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@ad73752 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:23, skipping insertion in model container
[2020-11-25 18:16:23,402 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:23" (4/4) ...
[2020-11-25 18:16:23,406 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:16:23,411 INFO  L110   BuchiProductObserver]: Initial RCFG 2327 locations, 3364 edges
[2020-11-25 18:16:23,412 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:16:23,424 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:16:24,937 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:16:24,945 INFO  L110   BuchiProductObserver]: BuchiProgram size 5978 locations, 11096 edges
[2020-11-25 18:16:24,945 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:24 BoogieIcfgContainer
[2020-11-25 18:16:24,945 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:16:24,945 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:16:24,946 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:16:24,947 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:16:24,947 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:24" (1/1) ...
[2020-11-25 18:16:25,053 INFO  L313           BlockEncoder]: Initial Icfg 5978 locations, 11096 edges
[2020-11-25 18:16:25,053 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:16:25,053 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:16:25,054 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:16:25,054 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:16:25,065 INFO  L70    emoveInfeasibleEdges]: Removed 147 edges and 17 locations because of local infeasibility
[2020-11-25 18:16:25,074 INFO  L70        RemoveSinkStates]: Removed 74 edges and 49 locations by removing sink states
[2020-11-25 18:16:25,085 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:16:25,089 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:16:25,092 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:16:25,093 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:16:25,095 INFO  L313           BlockEncoder]: Encoded RCFG 5880 locations, 10828 edges
[2020-11-25 18:16:25,096 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:16:25 BasicIcfg
[2020-11-25 18:16:25,096 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:16:25,096 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:16:25,096 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:16:25,098 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:16:25,098 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:16:25,098 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:16:22" (1/6) ...
[2020-11-25 18:16:25,100 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35b1301e and model type ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:16:25, skipping insertion in model container
[2020-11-25 18:16:25,100 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:16:25,100 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:16:22" (2/6) ...
[2020-11-25 18:16:25,100 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35b1301e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:16:25, skipping insertion in model container
[2020-11-25 18:16:25,100 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:16:25,100 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:16:23" (3/6) ...
[2020-11-25 18:16:25,100 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35b1301e and model type ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:16:25, skipping insertion in model container
[2020-11-25 18:16:25,101 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:16:25,101 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:16:23" (4/6) ...
[2020-11-25 18:16:25,101 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35b1301e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:16:25, skipping insertion in model container
[2020-11-25 18:16:25,101 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:16:25,101 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:16:24" (5/6) ...
[2020-11-25 18:16:25,101 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35b1301e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:16:25, skipping insertion in model container
[2020-11-25 18:16:25,101 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:16:25,101 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:16:25" (6/6) ...
[2020-11-25 18:16:25,102 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-self.bpl_BEv2
[2020-11-25 18:16:25,127 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:16:25,127 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:16:25,127 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:16:25,127 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:16:25,127 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:16:25,127 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:16:25,127 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:16:25,127 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:16:25,127 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:16:25,169 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5880 states.
[2020-11-25 18:16:25,223 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:25,224 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:25,224 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:25,230 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:25,231 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:25,231 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:16:25,231 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5880 states.
[2020-11-25 18:16:25,254 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:25,254 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:25,254 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:25,255 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:25,255 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:25,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:25,268 INFO  L82        PathProgramCache]: Analyzing trace with hash -1890004665, now seen corresponding path program 1 times
[2020-11-25 18:16:25,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:25,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:25,330 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:16:25,332 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:25,332 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:16:25,727 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:25,736 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:16:25,737 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:16:25,738 INFO  L87              Difference]: Start difference. First operand 5880 states. Second operand 3 states.
[2020-11-25 18:16:26,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:26,063 INFO  L93              Difference]: Finished difference Result 3290 states and 3913 transitions.
[2020-11-25 18:16:26,063 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:16:26,065 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3290 states and 3913 transitions.
[2020-11-25 18:16:26,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:26,119 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3290 states to 3290 states and 3913 transitions.
[2020-11-25 18:16:26,120 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 18:16:26,124 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-25 18:16:26,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3290 states and 3913 transitions.
[2020-11-25 18:16:26,135 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:26,136 INFO  L728         BuchiCegarLoop]: Abstraction has 3290 states and 3913 transitions.
[2020-11-25 18:16:26,154 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3290 states and 3913 transitions.
[2020-11-25 18:16:26,212 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3290 to 3290.
[2020-11-25 18:16:26,213 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3290 states.
[2020-11-25 18:16:26,222 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3290 states to 3290 states and 3913 transitions.
[2020-11-25 18:16:26,223 INFO  L751         BuchiCegarLoop]: Abstraction has 3290 states and 3913 transitions.
[2020-11-25 18:16:26,223 INFO  L631         BuchiCegarLoop]: Abstraction has 3290 states and 3913 transitions.
[2020-11-25 18:16:26,223 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:16:26,223 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3290 states and 3913 transitions.
[2020-11-25 18:16:26,235 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:26,235 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:26,235 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:26,237 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:26,237 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:26,242 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:26,242 INFO  L82        PathProgramCache]: Analyzing trace with hash 1597099627, now seen corresponding path program 1 times
[2020-11-25 18:16:26,243 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:26,256 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:26,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:16:26,278 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:26,278 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:16:26,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:26,280 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:16:26,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:16:26,280 INFO  L87              Difference]: Start difference. First operand 3290 states and 3913 transitions. cyclomatic complexity: 625 Second operand 3 states.
[2020-11-25 18:16:26,402 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:26,403 INFO  L93              Difference]: Finished difference Result 4322 states and 5175 transitions.
[2020-11-25 18:16:26,403 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:16:26,403 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4322 states and 5175 transitions.
[2020-11-25 18:16:26,423 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:16:26,444 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4322 states to 4322 states and 5175 transitions.
[2020-11-25 18:16:26,444 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1491
[2020-11-25 18:16:26,446 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1491
[2020-11-25 18:16:26,446 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4322 states and 5175 transitions.
[2020-11-25 18:16:26,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:26,455 INFO  L728         BuchiCegarLoop]: Abstraction has 4322 states and 5175 transitions.
[2020-11-25 18:16:26,460 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4322 states and 5175 transitions.
[2020-11-25 18:16:26,507 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4322 to 3698.
[2020-11-25 18:16:26,508 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3698 states.
[2020-11-25 18:16:26,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3698 states to 3698 states and 4409 transitions.
[2020-11-25 18:16:26,514 INFO  L751         BuchiCegarLoop]: Abstraction has 3698 states and 4409 transitions.
[2020-11-25 18:16:26,514 INFO  L631         BuchiCegarLoop]: Abstraction has 3698 states and 4409 transitions.
[2020-11-25 18:16:26,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:16:26,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3698 states and 4409 transitions.
[2020-11-25 18:16:26,523 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:26,523 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:26,524 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:26,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:26,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND TRUE   !(account_s464 != null)
[L3277]              revert := true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND TRUE   revert
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:26,532 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:26,532 INFO  L82        PathProgramCache]: Analyzing trace with hash 669435798, now seen corresponding path program 1 times
[2020-11-25 18:16:26,533 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:26,553 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:26,642 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 35 refuted. 0 times theorem prover too weak. 185 trivial. 0 not checked.
[2020-11-25 18:16:26,642 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 18:16:26,642 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 18:16:26,643 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:26,643 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:16:26,643 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:16:26,643 INFO  L87              Difference]: Start difference. First operand 3698 states and 4409 transitions. cyclomatic complexity: 713 Second operand 7 states.
[2020-11-25 18:16:26,707 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:26,707 INFO  L93              Difference]: Finished difference Result 3706 states and 4416 transitions.
[2020-11-25 18:16:26,707 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:16:26,707 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3706 states and 4416 transitions.
[2020-11-25 18:16:26,719 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:26,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3706 states to 3697 states and 4407 transitions.
[2020-11-25 18:16:26,737 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1271
[2020-11-25 18:16:26,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1271
[2020-11-25 18:16:26,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3697 states and 4407 transitions.
[2020-11-25 18:16:26,742 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:26,743 INFO  L728         BuchiCegarLoop]: Abstraction has 3697 states and 4407 transitions.
[2020-11-25 18:16:26,747 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3697 states and 4407 transitions.
[2020-11-25 18:16:26,793 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3697 to 3697.
[2020-11-25 18:16:26,794 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3697 states.
[2020-11-25 18:16:26,801 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3697 states to 3697 states and 4407 transitions.
[2020-11-25 18:16:26,801 INFO  L751         BuchiCegarLoop]: Abstraction has 3697 states and 4407 transitions.
[2020-11-25 18:16:26,801 INFO  L631         BuchiCegarLoop]: Abstraction has 3697 states and 4407 transitions.
[2020-11-25 18:16:26,801 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:16:26,801 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3697 states and 4407 transitions.
[2020-11-25 18:16:26,810 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:26,811 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:26,811 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:26,814 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:26,814 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND TRUE   !(c_s174 >= a_s174)
[L2714]              revert := true;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND TRUE   revert
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND TRUE   revert
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:26,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:26,819 INFO  L82        PathProgramCache]: Analyzing trace with hash 845397343, now seen corresponding path program 1 times
[2020-11-25 18:16:26,820 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:26,839 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:26,910 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 220 trivial. 0 not checked.
[2020-11-25 18:16:26,910 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:26,910 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:16:26,910 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:26,910 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:16:26,911 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:16:26,911 INFO  L87              Difference]: Start difference. First operand 3697 states and 4407 transitions. cyclomatic complexity: 712 Second operand 3 states.
[2020-11-25 18:16:26,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:26,969 INFO  L93              Difference]: Finished difference Result 4315 states and 4977 transitions.
[2020-11-25 18:16:26,969 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:16:26,969 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4315 states and 4977 transitions.
[2020-11-25 18:16:26,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:16:26,990 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4315 states to 3982 states and 4573 transitions.
[2020-11-25 18:16:26,990 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1361
[2020-11-25 18:16:26,991 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1382
[2020-11-25 18:16:26,991 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3982 states and 4573 transitions.
[2020-11-25 18:16:26,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:26,995 INFO  L728         BuchiCegarLoop]: Abstraction has 3982 states and 4573 transitions.
[2020-11-25 18:16:26,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3982 states and 4573 transitions.
[2020-11-25 18:16:27,023 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3982 to 3440.
[2020-11-25 18:16:27,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3440 states.
[2020-11-25 18:16:27,026 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3440 states to 3440 states and 3891 transitions.
[2020-11-25 18:16:27,027 INFO  L751         BuchiCegarLoop]: Abstraction has 3440 states and 3891 transitions.
[2020-11-25 18:16:27,027 INFO  L631         BuchiCegarLoop]: Abstraction has 3440 states and 3891 transitions.
[2020-11-25 18:16:27,027 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:16:27,027 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3440 states and 3891 transitions.
[2020-11-25 18:16:27,031 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:27,031 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:27,031 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:27,033 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:27,033 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND TRUE   !(to_s717 != this)
[L3729]              revert := true;
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL       call CorralChoice_ISF(this);
[L6247]             havoc msgsender_MSG;
[L6248]             havoc msgvalue_MSG;
[L6249]             havoc choice;
[L6250]             havoc to_s717;
[L6251]             havoc value_s717;
[L6252]             havoc __ret_0_transfer;
[L6253]             havoc spender_s287;
[L6254]             havoc value_s287;
[L6255]             havoc __ret_0_approve;
[L6256]             havoc from_s744;
[L6257]             havoc to_s744;
[L6258]             havoc value_s744;
[L6259]             havoc __ret_0_transferFrom;
[L6260]             havoc __ret_0_totalSupply;
[L6261]             havoc owner_s233;
[L6262]             havoc __ret_0_balanceOf;
[L6263]             havoc owner_s249;
[L6264]             havoc spender_s249;
[L6265]             havoc __ret_0_allowance;
[L6266]             havoc spender_s349;
[L6267]             havoc addedValue_s349;
[L6268]             havoc __ret_0_increaseAllowance;
[L6269]             havoc spender_s376;
[L6270]             havoc subtractedValue_s376;
[L6271]             havoc __ret_0_decreaseAllowance;
[L6272]             havoc __ret_0_owner;
[L6273]             havoc __ret_0_isOwner;
[L6274]             havoc newOwner_s659;
[L6275]             havoc name_s794;
[L6276]             havoc symbol_s794;
[L6277]             havoc decimals_s794;
[L6278]             havoc __ret_0_name;
[L6279]             havoc __ret_0_symbol;
[L6280]             havoc __ret_0_decimals;
[L6281]             havoc newName_s837;
[L6282]             havoc newSymbol_s856;
[L6283]             havoc __ret_0_DECIMALS;
[L6284]             havoc __ret_0_INITIAL_SUPPLY;
[L6285]             havoc tmpNow;
[L6286]             havoc gas;
[L6287]             assume gas > 4000000 && gas <= 8000000;
[L6288]             tmpNow := now;
[L6289]             havoc now;
[L6290]             assume now > tmpNow;
[L6291]             assume msgsender_MSG != null;
[L6292]             assume DType[msgsender_MSG] != IERC20;
[L6293]             assume DType[msgsender_MSG] != SafeMath;
[L6294]             assume DType[msgsender_MSG] != ERC20;
[L6295]             assume DType[msgsender_MSG] != Ownable;
[L6296]             assume DType[msgsender_MSG] != ERC20Protected;
[L6297]             assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]             assume DType[msgsender_MSG] != ISF;
[L6299]             Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE  choice == 19
[L6301]             gas := gas - 21000;
[L6302]  COND TRUE  gas >= 0
[L6303]             assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]             assume msgvalue_MSG == 0;
[L6305]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Protected0 := true;
[L2]                call_transfer_ERC20Protected0 := false;
[L2]                revert := revert_hold;
[L1119]             havoc __exception;
[L1120]             revert := false;
[L1121]  COND TRUE  __exception
[L1122]             __tmp__Balance := Balance;
[L1123]             __tmp__DType := DType;
[L1124]             __tmp__Alloc := Alloc;
[L1125]             __tmp__balance_ADDR := balance_ADDR;
[L1126]             __tmp__M_Ref_int := M_Ref_int;
[L1127]             __tmp__sum__balances0 := sum__balances0;
[L1128]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]             __tmp__sum__allowed1 := sum__allowed1;
[L1131]             __tmp__Length := Length;
[L1132]             __tmp__now := now;
[L1133]             __tmp___balances_ERC20 := _balances_ERC20;
[L1134]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]             __tmp___owner_Ownable := _owner_Ownable;
[L1137]             __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]             __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]             __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]             __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]             __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]             __var_19 := this;
[L3728]  COND TRUE  !(to_s717 != this)
[L3729]             revert := true;
[L1142]  RET        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]             assume revert || gas < 0;
[L6305]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET        call CorralChoice_ISF(this);

[2020-11-25 18:16:27,037 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:27,037 INFO  L82        PathProgramCache]: Analyzing trace with hash 370546782, now seen corresponding path program 1 times
[2020-11-25 18:16:27,038 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:27,050 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:27,117 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 18:16:27,117 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:27,117 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:16:27,117 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:27,118 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 18:16:27,118 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 18:16:27,118 INFO  L87              Difference]: Start difference. First operand 3440 states and 3891 transitions. cyclomatic complexity: 453 Second operand 8 states.
[2020-11-25 18:16:27,241 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:27,241 INFO  L93              Difference]: Finished difference Result 3532 states and 3991 transitions.
[2020-11-25 18:16:27,241 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 18:16:27,241 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3532 states and 3991 transitions.
[2020-11-25 18:16:27,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:27,259 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3532 states to 3518 states and 3976 transitions.
[2020-11-25 18:16:27,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1210
[2020-11-25 18:16:27,260 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1210
[2020-11-25 18:16:27,260 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3518 states and 3976 transitions.
[2020-11-25 18:16:27,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:27,263 INFO  L728         BuchiCegarLoop]: Abstraction has 3518 states and 3976 transitions.
[2020-11-25 18:16:27,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3518 states and 3976 transitions.
[2020-11-25 18:16:27,291 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3518 to 3505.
[2020-11-25 18:16:27,291 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3505 states.
[2020-11-25 18:16:27,295 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3505 states to 3505 states and 3961 transitions.
[2020-11-25 18:16:27,295 INFO  L751         BuchiCegarLoop]: Abstraction has 3505 states and 3961 transitions.
[2020-11-25 18:16:27,295 INFO  L631         BuchiCegarLoop]: Abstraction has 3505 states and 3961 transitions.
[2020-11-25 18:16:27,295 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:16:27,295 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3505 states and 3961 transitions.
[2020-11-25 18:16:27,299 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:27,299 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:27,299 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:27,301 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:27,301 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND TRUE   !(to_s422 != null)
[L3200]              revert := true;
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND TRUE   revert
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND TRUE   revert
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND TRUE   !(to_s422 != null)
[L3200]              revert := true;
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND TRUE   revert
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND TRUE   revert
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:27,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:27,305 INFO  L82        PathProgramCache]: Analyzing trace with hash 937210162, now seen corresponding path program 1 times
[2020-11-25 18:16:27,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:27,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:27,412 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 18:16:27,412 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:27,412 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 18:16:27,413 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:27,413 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 18:16:27,413 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 18:16:27,413 INFO  L87              Difference]: Start difference. First operand 3505 states and 3961 transitions. cyclomatic complexity: 458 Second operand 8 states.
[2020-11-25 18:16:27,471 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:27,471 INFO  L93              Difference]: Finished difference Result 3562 states and 4036 transitions.
[2020-11-25 18:16:27,471 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 18:16:27,471 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3562 states and 4036 transitions.
[2020-11-25 18:16:27,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:27,489 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3562 states to 3554 states and 4028 transitions.
[2020-11-25 18:16:27,489 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1228
[2020-11-25 18:16:27,490 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1228
[2020-11-25 18:16:27,490 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3554 states and 4028 transitions.
[2020-11-25 18:16:27,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:27,493 INFO  L728         BuchiCegarLoop]: Abstraction has 3554 states and 4028 transitions.
[2020-11-25 18:16:27,496 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3554 states and 4028 transitions.
[2020-11-25 18:16:27,518 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3554 to 3537.
[2020-11-25 18:16:27,518 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3537 states.
[2020-11-25 18:16:27,522 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3537 states to 3537 states and 4009 transitions.
[2020-11-25 18:16:27,522 INFO  L751         BuchiCegarLoop]: Abstraction has 3537 states and 4009 transitions.
[2020-11-25 18:16:27,522 INFO  L631         BuchiCegarLoop]: Abstraction has 3537 states and 4009 transitions.
[2020-11-25 18:16:27,522 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:16:27,522 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3537 states and 4009 transitions.
[2020-11-25 18:16:27,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:27,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:27,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:27,528 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:27,528 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND FALSE  !(!(to_s422 != null))
[L3203]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2676]  COND TRUE   !(b_s150 <= a_s150)
[L2677]              revert := true;
[L3203]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L3204]  COND TRUE   revert
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND TRUE   revert
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND TRUE   revert
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND FALSE  !(!(to_s422 != null))
[L3203]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2676]  COND TRUE   !(b_s150 <= a_s150)
[L2677]              revert := true;
[L3203]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L3204]  COND TRUE   revert
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND TRUE   revert
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND TRUE   revert
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:27,532 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:27,532 INFO  L82        PathProgramCache]: Analyzing trace with hash -1590615644, now seen corresponding path program 1 times
[2020-11-25 18:16:27,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:27,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:27,648 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 18:16:27,649 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:27,649 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 18:16:27,649 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:27,649 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 18:16:27,649 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 18:16:27,649 INFO  L87              Difference]: Start difference. First operand 3537 states and 4009 transitions. cyclomatic complexity: 474 Second operand 9 states.
[2020-11-25 18:16:28,712 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:28,712 INFO  L93              Difference]: Finished difference Result 3732 states and 4231 transitions.
[2020-11-25 18:16:28,712 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 18:16:28,712 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3732 states and 4231 transitions.
[2020-11-25 18:16:28,719 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:16:28,727 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3732 states to 3732 states and 4231 transitions.
[2020-11-25 18:16:28,728 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1320
[2020-11-25 18:16:28,728 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1320
[2020-11-25 18:16:28,728 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3732 states and 4231 transitions.
[2020-11-25 18:16:28,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:28,731 INFO  L728         BuchiCegarLoop]: Abstraction has 3732 states and 4231 transitions.
[2020-11-25 18:16:28,733 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3732 states and 4231 transitions.
[2020-11-25 18:16:28,752 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3732 to 3537.
[2020-11-25 18:16:28,752 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3537 states.
[2020-11-25 18:16:28,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3537 states to 3537 states and 4009 transitions.
[2020-11-25 18:16:28,755 INFO  L751         BuchiCegarLoop]: Abstraction has 3537 states and 4009 transitions.
[2020-11-25 18:16:28,755 INFO  L631         BuchiCegarLoop]: Abstraction has 3537 states and 4009 transitions.
[2020-11-25 18:16:28,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:16:28,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3537 states and 4009 transitions.
[2020-11-25 18:16:28,759 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:16:28,759 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:28,759 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:28,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:28,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:28,764 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:28,764 INFO  L82        PathProgramCache]: Analyzing trace with hash 475092184, now seen corresponding path program 1 times
[2020-11-25 18:16:28,765 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:28,848 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:31,390 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 24 proven. 0 refuted. 0 times theorem prover too weak. 201 trivial. 0 not checked.
[2020-11-25 18:16:31,390 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:31,390 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [41] imperfect sequences [] total 41
[2020-11-25 18:16:31,390 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:31,391 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 18:16:31,391 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1619, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 18:16:31,391 INFO  L87              Difference]: Start difference. First operand 3537 states and 4009 transitions. cyclomatic complexity: 474 Second operand 42 states.
[2020-11-25 18:16:41,235 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 100
[2020-11-25 18:16:41,952 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 98
[2020-11-25 18:16:57,788 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:57,788 INFO  L93              Difference]: Finished difference Result 3593 states and 4090 transitions.
[2020-11-25 18:16:57,788 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 18:16:57,788 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3593 states and 4090 transitions.
[2020-11-25 18:16:57,796 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 18:16:57,805 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3593 states to 3593 states and 4090 transitions.
[2020-11-25 18:16:57,805 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1245
[2020-11-25 18:16:57,805 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1245
[2020-11-25 18:16:57,806 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3593 states and 4090 transitions.
[2020-11-25 18:16:57,807 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:57,808 INFO  L728         BuchiCegarLoop]: Abstraction has 3593 states and 4090 transitions.
[2020-11-25 18:16:57,810 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3593 states and 4090 transitions.
[2020-11-25 18:16:57,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3593 to 3578.
[2020-11-25 18:16:57,831 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3578 states.
[2020-11-25 18:16:57,835 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3578 states to 3578 states and 4059 transitions.
[2020-11-25 18:16:57,835 INFO  L751         BuchiCegarLoop]: Abstraction has 3578 states and 4059 transitions.
[2020-11-25 18:16:57,835 INFO  L631         BuchiCegarLoop]: Abstraction has 3578 states and 4059 transitions.
[2020-11-25 18:16:57,835 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 18:16:57,835 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3578 states and 4059 transitions.
[2020-11-25 18:16:57,842 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:16:57,843 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:57,843 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:57,845 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:57,845 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND FALSE  !(!(to_s422 != null))
[L3203]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2676]  COND FALSE  !(!(b_s150 <= a_s150))
[L2680]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2681]              __ret_0_ := c_s150;
[L3203]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L3204]  COND FALSE  !(revert)
[L3207]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s422];
[L3208]              __tmp___balances_ERC20[this][from_s422] := __var_5;
[L3209]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s422];
[L3210]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L2700]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2701]  COND TRUE   !(c_s174 >= a_s174)
[L2702]              revert := true;
[L3210]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L3211]  COND TRUE   revert
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND TRUE   revert
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND TRUE   revert
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND FALSE  !(!(to_s422 != null))
[L3203]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2676]  COND FALSE  !(!(b_s150 <= a_s150))
[L2680]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2681]              __ret_0_ := c_s150;
[L3203]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L3204]  COND FALSE  !(revert)
[L3207]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s422];
[L3208]              __tmp___balances_ERC20[this][from_s422] := __var_5;
[L3209]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s422];
[L3210]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L2700]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2701]  COND TRUE   !(c_s174 >= a_s174)
[L2702]              revert := true;
[L3210]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L3211]  COND TRUE   revert
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND TRUE   revert
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND TRUE   revert
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:57,850 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:57,850 INFO  L82        PathProgramCache]: Analyzing trace with hash 1387348606, now seen corresponding path program 1 times
[2020-11-25 18:16:57,851 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:57,969 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:58,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 18:16:58,087 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:58,087 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 18:16:58,088 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:58,088 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 18:16:58,088 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 18:16:58,088 INFO  L87              Difference]: Start difference. First operand 3578 states and 4059 transitions. cyclomatic complexity: 485 Second operand 15 states.
[2020-11-25 18:16:59,847 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:16:59,847 INFO  L93              Difference]: Finished difference Result 3724 states and 4223 transitions.
[2020-11-25 18:16:59,847 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 18:16:59,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3724 states and 4223 transitions.
[2020-11-25 18:16:59,855 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 18:16:59,863 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3724 states to 3724 states and 4223 transitions.
[2020-11-25 18:16:59,863 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1311
[2020-11-25 18:16:59,863 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1311
[2020-11-25 18:16:59,863 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3724 states and 4223 transitions.
[2020-11-25 18:16:59,865 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:16:59,865 INFO  L728         BuchiCegarLoop]: Abstraction has 3724 states and 4223 transitions.
[2020-11-25 18:16:59,868 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3724 states and 4223 transitions.
[2020-11-25 18:16:59,887 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3724 to 3596.
[2020-11-25 18:16:59,887 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3596 states.
[2020-11-25 18:16:59,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3596 states to 3596 states and 4062 transitions.
[2020-11-25 18:16:59,890 INFO  L751         BuchiCegarLoop]: Abstraction has 3596 states and 4062 transitions.
[2020-11-25 18:16:59,890 INFO  L631         BuchiCegarLoop]: Abstraction has 3596 states and 4062 transitions.
[2020-11-25 18:16:59,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 18:16:59,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3596 states and 4062 transitions.
[2020-11-25 18:16:59,894 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:16:59,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:16:59,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:16:59,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:16:59,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND TRUE   __exception
[L1122]              __tmp__Balance := Balance;
[L1123]              __tmp__DType := DType;
[L1124]              __tmp__Alloc := Alloc;
[L1125]              __tmp__balance_ADDR := balance_ADDR;
[L1126]              __tmp__M_Ref_int := M_Ref_int;
[L1127]              __tmp__sum__balances0 := sum__balances0;
[L1128]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1129]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1130]              __tmp__sum__allowed1 := sum__allowed1;
[L1131]              __tmp__Length := Length;
[L1132]              __tmp__now := now;
[L1133]              __tmp___balances_ERC20 := _balances_ERC20;
[L1134]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1135]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1136]              __tmp___owner_Ownable := _owner_Ownable;
[L1137]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1138]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1139]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1140]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1141]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1142]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3727]              __var_19 := this;
[L3728]  COND FALSE  !(!(to_s717 != this))
[L3732]  COND TRUE   __tmp__DType[this] == ISF
[L3733]  CALL        call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2829]  COND TRUE   __tmp__DType[this] == ISF
[L2830]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3198]              __var_4 := null;
[L3199]  COND FALSE  !(!(to_s422 != null))
[L3203]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L2676]  COND FALSE  !(!(b_s150 <= a_s150))
[L2680]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2681]              __ret_0_ := c_s150;
[L3203]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s422], value_s422);
[L3204]  COND FALSE  !(revert)
[L3207]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s422];
[L3208]              __tmp___balances_ERC20[this][from_s422] := __var_5;
[L3209]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s422];
[L3210]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L2700]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2701]  COND FALSE  !(!(c_s174 >= a_s174))
[L2705]              __ret_0_ := c_s174;
[L3210]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s422], value_s422);
[L3211]  COND FALSE  !(revert)
[L3214]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s422];
[L3215]              __tmp___balances_ERC20[this][to_s422] := __var_6;
[L3216]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s422];
[L2830]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2831]  COND FALSE  !(revert)
[L2852]              __ret_0_ := true;
[L3733]  RET         call __var_20 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3734]  COND FALSE  !(revert)
[L3745]              __ret_0_ := __var_20;
[L1142]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1143]              assume revert || gas < 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:16:59,898 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:16:59,898 INFO  L82        PathProgramCache]: Analyzing trace with hash -2057586851, now seen corresponding path program 1 times
[2020-11-25 18:16:59,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:16:59,909 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:16:59,958 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 18:16:59,958 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:16:59,958 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 18:16:59,958 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:16:59,959 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 18:16:59,959 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 18:16:59,959 INFO  L87              Difference]: Start difference. First operand 3596 states and 4062 transitions. cyclomatic complexity: 470 Second operand 5 states.
[2020-11-25 18:17:00,686 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:17:00,686 INFO  L93              Difference]: Finished difference Result 4273 states and 4882 transitions.
[2020-11-25 18:17:00,686 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:17:00,686 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4273 states and 4882 transitions.
[2020-11-25 18:17:00,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 18:17:00,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4273 states to 3296 states and 3855 transitions.
[2020-11-25 18:17:00,703 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1030
[2020-11-25 18:17:00,703 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1030
[2020-11-25 18:17:00,703 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3296 states and 3855 transitions.
[2020-11-25 18:17:00,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:17:00,706 INFO  L728         BuchiCegarLoop]: Abstraction has 3296 states and 3855 transitions.
[2020-11-25 18:17:00,708 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3296 states and 3855 transitions.
[2020-11-25 18:17:00,755 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3296 to 2630.
[2020-11-25 18:17:00,755 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2630 states.
[2020-11-25 18:17:00,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2630 states to 2630 states and 3000 transitions.
[2020-11-25 18:17:00,757 INFO  L751         BuchiCegarLoop]: Abstraction has 2630 states and 3000 transitions.
[2020-11-25 18:17:00,757 INFO  L631         BuchiCegarLoop]: Abstraction has 2630 states and 3000 transitions.
[2020-11-25 18:17:00,757 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 18:17:00,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2630 states and 3000 transitions.
[2020-11-25 18:17:00,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:00,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:17:00,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:17:00,761 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:17:00,761 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND FALSE  !(DType[this] == ERC20DetailedChangeable)
[L2868]  COND FALSE  !(DType[this] == ERC20Protected)
[L2873]  COND TRUE   DType[this] == ERC20
[L2874]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2874]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2875]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:17:00,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:17:00,785 INFO  L82        PathProgramCache]: Analyzing trace with hash 566767369, now seen corresponding path program 1 times
[2020-11-25 18:17:00,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:17:00,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:17:00,878 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:17:00,878 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:17:00,879 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:17:00,879 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:17:00,879 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:17:00,879 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:17:00,879 INFO  L87              Difference]: Start difference. First operand 2630 states and 3000 transitions. cyclomatic complexity: 373 Second operand 7 states.
[2020-11-25 18:17:00,929 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:17:00,929 INFO  L93              Difference]: Finished difference Result 2696 states and 3069 transitions.
[2020-11-25 18:17:00,929 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:17:00,929 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2696 states and 3069 transitions.
[2020-11-25 18:17:00,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:00,939 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2696 states to 2620 states and 2986 transitions.
[2020-11-25 18:17:00,939 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 861
[2020-11-25 18:17:00,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 861
[2020-11-25 18:17:00,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2620 states and 2986 transitions.
[2020-11-25 18:17:00,941 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:17:00,941 INFO  L728         BuchiCegarLoop]: Abstraction has 2620 states and 2986 transitions.
[2020-11-25 18:17:00,943 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2620 states and 2986 transitions.
[2020-11-25 18:17:00,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2620 to 2620.
[2020-11-25 18:17:00,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2620 states.
[2020-11-25 18:17:00,957 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2620 states to 2620 states and 2986 transitions.
[2020-11-25 18:17:00,957 INFO  L751         BuchiCegarLoop]: Abstraction has 2620 states and 2986 transitions.
[2020-11-25 18:17:00,957 INFO  L631         BuchiCegarLoop]: Abstraction has 2620 states and 2986 transitions.
[2020-11-25 18:17:00,957 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 18:17:00,957 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2620 states and 2986 transitions.
[2020-11-25 18:17:00,960 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:00,960 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:17:00,960 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:17:00,961 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:17:00,961 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND TRUE   DType[this] == ERC20DetailedChangeable
[L2864]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2864]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2865]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:17:00,965 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:17:00,965 INFO  L82        PathProgramCache]: Analyzing trace with hash 1928220693, now seen corresponding path program 1 times
[2020-11-25 18:17:00,966 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:17:00,977 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:17:01,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:17:01,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:17:01,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:17:01,059 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:17:01,059 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:17:01,059 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:17:01,060 INFO  L87              Difference]: Start difference. First operand 2620 states and 2986 transitions. cyclomatic complexity: 369 Second operand 7 states.
[2020-11-25 18:17:01,111 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:17:01,111 INFO  L93              Difference]: Finished difference Result 2686 states and 3055 transitions.
[2020-11-25 18:17:01,111 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:17:01,111 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2686 states and 3055 transitions.
[2020-11-25 18:17:01,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:01,120 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2686 states to 2612 states and 2974 transitions.
[2020-11-25 18:17:01,120 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 859
[2020-11-25 18:17:01,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 859
[2020-11-25 18:17:01,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2612 states and 2974 transitions.
[2020-11-25 18:17:01,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:17:01,122 INFO  L728         BuchiCegarLoop]: Abstraction has 2612 states and 2974 transitions.
[2020-11-25 18:17:01,124 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2612 states and 2974 transitions.
[2020-11-25 18:17:01,133 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2612 to 2612.
[2020-11-25 18:17:01,133 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2612 states.
[2020-11-25 18:17:01,135 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2612 states to 2612 states and 2974 transitions.
[2020-11-25 18:17:01,135 INFO  L751         BuchiCegarLoop]: Abstraction has 2612 states and 2974 transitions.
[2020-11-25 18:17:01,136 INFO  L631         BuchiCegarLoop]: Abstraction has 2612 states and 2974 transitions.
[2020-11-25 18:17:01,136 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 18:17:01,136 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2612 states and 2974 transitions.
[2020-11-25 18:17:01,138 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:01,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:17:01,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:17:01,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:17:01,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND FALSE  !(DType[this] == ISF)
[L3764]  COND TRUE   DType[this] == ERC20Protected
[L3765]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND FALSE  !(DType[this] == ERC20DetailedChangeable)
[L2868]  COND TRUE   DType[this] == ERC20Protected
[L2869]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2869]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2870]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3765]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3766]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:17:01,143 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:17:01,143 INFO  L82        PathProgramCache]: Analyzing trace with hash 917506499, now seen corresponding path program 1 times
[2020-11-25 18:17:01,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:17:01,155 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:17:01,233 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:17:01,234 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:17:01,234 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 18:17:01,234 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:17:01,234 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 18:17:01,234 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 18:17:01,234 INFO  L87              Difference]: Start difference. First operand 2612 states and 2974 transitions. cyclomatic complexity: 365 Second operand 6 states.
[2020-11-25 18:17:01,277 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:17:01,277 INFO  L93              Difference]: Finished difference Result 2664 states and 3027 transitions.
[2020-11-25 18:17:01,277 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 18:17:01,277 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2664 states and 3027 transitions.
[2020-11-25 18:17:01,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:01,286 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2664 states to 2602 states and 2960 transitions.
[2020-11-25 18:17:01,286 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 857
[2020-11-25 18:17:01,286 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 857
[2020-11-25 18:17:01,286 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2602 states and 2960 transitions.
[2020-11-25 18:17:01,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:17:01,288 INFO  L728         BuchiCegarLoop]: Abstraction has 2602 states and 2960 transitions.
[2020-11-25 18:17:01,289 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2602 states and 2960 transitions.
[2020-11-25 18:17:01,298 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2602 to 2602.
[2020-11-25 18:17:01,298 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2602 states.
[2020-11-25 18:17:01,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2602 states to 2602 states and 2960 transitions.
[2020-11-25 18:17:01,301 INFO  L751         BuchiCegarLoop]: Abstraction has 2602 states and 2960 transitions.
[2020-11-25 18:17:01,301 INFO  L631         BuchiCegarLoop]: Abstraction has 2602 states and 2960 transitions.
[2020-11-25 18:17:01,301 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 18:17:01,301 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2602 states and 2960 transitions.
[2020-11-25 18:17:01,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:01,304 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:17:01,304 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:17:01,305 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:17:01,305 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND FALSE  !(DType[this] == ERC20DetailedChangeable)
[L2868]  COND TRUE   DType[this] == ERC20Protected
[L2869]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2869]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2870]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:17:01,309 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:17:01,309 INFO  L82        PathProgramCache]: Analyzing trace with hash 2034993821, now seen corresponding path program 1 times
[2020-11-25 18:17:01,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:17:01,320 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:17:01,407 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:17:01,407 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:17:01,407 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:17:01,408 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:17:01,408 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:17:01,408 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:17:01,408 INFO  L87              Difference]: Start difference. First operand 2602 states and 2960 transitions. cyclomatic complexity: 361 Second operand 7 states.
[2020-11-25 18:17:01,476 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:17:01,477 INFO  L93              Difference]: Finished difference Result 2664 states and 3023 transitions.
[2020-11-25 18:17:01,477 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:17:01,477 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2664 states and 3023 transitions.
[2020-11-25 18:17:01,481 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:01,485 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2664 states to 2590 states and 2944 transitions.
[2020-11-25 18:17:01,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 18:17:01,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 855
[2020-11-25 18:17:01,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2590 states and 2944 transitions.
[2020-11-25 18:17:01,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:17:01,487 INFO  L728         BuchiCegarLoop]: Abstraction has 2590 states and 2944 transitions.
[2020-11-25 18:17:01,489 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2590 states and 2944 transitions.
[2020-11-25 18:17:01,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2590 to 2590.
[2020-11-25 18:17:01,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2590 states.
[2020-11-25 18:17:01,500 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2590 states to 2590 states and 2944 transitions.
[2020-11-25 18:17:01,500 INFO  L751         BuchiCegarLoop]: Abstraction has 2590 states and 2944 transitions.
[2020-11-25 18:17:01,500 INFO  L631         BuchiCegarLoop]: Abstraction has 2590 states and 2944 transitions.
[2020-11-25 18:17:01,500 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 18:17:01,500 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2590 states and 2944 transitions.
[2020-11-25 18:17:01,503 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:17:01,503 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:17:01,503 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:17:01,504 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:17:01,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s717 && value_s717 <= _balances_ERC20[this][msgsender_MSG]) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_ERC20DetailedChangeable[this] == old(_name_ERC20DetailedChangeable[this])) && _symbol_ERC20DetailedChangeable[this] == old(_symbol_ERC20DetailedChangeable[this])) && _decimals_ERC20DetailedChangeable[this] == old(_decimals_ERC20DetailedChangeable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:17:01,508 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:17:01,508 INFO  L82        PathProgramCache]: Analyzing trace with hash -359024320, now seen corresponding path program 1 times
[2020-11-25 18:17:01,508 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:17:01,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 18:31:20,809 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 18:31:20,810 INFO  L168              Benchmark]: Toolchain (without parser) took 898599.02 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 935.2 MB in the beginning and 2.4 GB in the end (delta: -1.4 GB). Peak memory consumption was 6.5 GB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,811 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,811 INFO  L168              Benchmark]: Boogie Preprocessor took 117.50 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,811 INFO  L168              Benchmark]: UtopiaSpecLang took 64.93 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,811 INFO  L168              Benchmark]: Boogie Printer took 21.76 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,812 INFO  L168              Benchmark]: RCFGBuilder took 939.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -112.3 MB). Peak memory consumption was 191.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,812 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.52 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,812 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1547.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 167.8 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -24.2 MB). Peak memory consumption was 512.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,813 INFO  L168              Benchmark]: BlockEncodingV2 took 150.75 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 938.9 MB in the end (delta: 93.8 MB). Peak memory consumption was 93.8 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,813 INFO  L168              Benchmark]: BuchiAutomizer took 895713.62 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 938.9 MB in the beginning and 2.4 GB in the end (delta: -1.4 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 18:31:20,815 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5978 locations, 11096 edges
  - StatisticsResult: Encoded RCFG
    5880 locations, 10828 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 117.50 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.93 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.76 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 939.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -112.3 MB). Peak memory consumption was 191.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.52 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1547.04 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 167.8 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -24.2 MB). Peak memory consumption was 512.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 150.75 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 938.9 MB in the end (delta: 93.8 MB). Peak memory consumption was 93.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 895713.62 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 938.9 MB in the beginning and 2.4 GB in the end (delta: -1.4 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2327 locations, 3364 edges
  - StatisticsResult: BuchiProgram size
    5978 locations, 11096 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
