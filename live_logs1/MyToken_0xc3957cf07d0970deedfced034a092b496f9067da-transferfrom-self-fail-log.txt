This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:10:49,297 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:10:49,298 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:10:49,308 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:10:49,308 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:10:49,309 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:10:49,310 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:10:49,312 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:10:49,313 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:10:49,314 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:10:49,314 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:10:49,315 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:10:49,315 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:10:49,316 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:10:49,317 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:10:49,318 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:10:49,318 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:10:49,319 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:10:49,321 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:10:49,322 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:10:49,323 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:10:49,323 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:10:49,325 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:10:49,325 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:10:49,326 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:10:49,326 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:10:49,327 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:10:49,327 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:10:49,327 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:10:49,328 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:10:49,328 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:10:49,329 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:10:49,329 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:10:49,330 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:10:49,330 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:10:49,331 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:10:49,331 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:10:49,331 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:10:49,331 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:10:49,332 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:10:49,333 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:10:49,333 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:10:49,341 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:10:49,341 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:10:49,342 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:10:49,342 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:10:49,342 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:10:49,342 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:10:49,342 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:10:49,342 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:10:49,342 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:10:49,343 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:10:49,343 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:10:49,343 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:10:49,344 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:10:49,344 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:10:49,366 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:10:49,376 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:10:49,379 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:10:49,380 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:10:49,380 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:10:49,381 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl
[2020-11-25 02:10:49,381 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl'
[2020-11-25 02:10:49,465 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:10:49,466 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:10:49,467 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:10:49,467 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:10:49,467 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:10:49,483 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,485 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,514 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,515 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,539 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,552 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,559 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,568 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:10:49,569 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:10:49,569 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:10:49,571 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:10:49,575 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/1) ...
[2020-11-25 02:10:49,595 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MyToken.transferFrom(from, to, value), from == to && (value > balances_MyToken[this][from] || value > allowed_MyToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MyToken.transferFrom)))
[2020-11-25 02:10:49,602 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MyToken.transferFrom(from, to, value), from == to && (value > balances_MyToken[this][from] || value > allowed_MyToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MyToken.transferFrom)))
[2020-11-25 02:10:49,610 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MyToken.transferFrom(from, to, value), from == to && (value > balances_MyToken[this][from] || value > allowed_MyToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MyToken.transferFrom)))
[2020-11-25 02:10:49,623 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s474==to_s474 && ( tokens_s474>balances_MyToken[this][from_s474] || tokens_s474>allowed_MyToken[this][from_s474][msg.sender] ) ) && tokens_s474>=0 ) && tokens_s474<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][to_s474]>=0 ) && balances_MyToken[this][to_s474]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][from_s474]>=0 ) && balances_MyToken[this][from_s474]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_MyToken[this][from_s474][msg.sender]>=0 ) && allowed_MyToken[this][from_s474][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:10:49,628 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MyToken.transferFrom(from, to, value), from == to && (value > balances_MyToken[this][from] || value > allowed_MyToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MyToken.transferFrom)))
[2020-11-25 02:10:49,628 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MyToken0) ==> ( <>AP(fail_transferFrom_MyToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:10:49,637 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:10:49 PropertyContainer
[2020-11-25 02:10:49,637 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:10:49,638 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:10:49,638 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:10:49,638 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:10:49,639 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/2) ...
[2020-11-25 02:10:49,639 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:10:49,639 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:10:49,653 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:10:49" (2/2) ...
[2020-11-25 02:10:49,653 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:10:49,653 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:10:49,653 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:10:49,654 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:10:49,654 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/2) ...
[2020-11-25 02:10:49,707 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:10:49,707 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:10:49,707 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:10:49,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:10:49,707 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 02:10:49,707 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 02:10:49,708 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 02:10:49,708 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 02:10:49,709 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 02:10:49,709 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 02:10:49,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 02:10:49,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 02:10:49,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 02:10:49,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 02:10:49,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken
[2020-11-25 02:10:49,710 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken
[2020-11-25 02:10:49,710 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 02:10:49,711 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 02:10:49,711 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__success
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken
[2020-11-25 02:10:49,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken
[2020-11-25 02:10:49,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken
[2020-11-25 02:10:49,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken
[2020-11-25 02:10:49,712 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:10:49,712 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyToken
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:10:49,713 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,714 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 02:10:49,715 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__success
[2020-11-25 02:10:49,716 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__fail
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__success
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__fail
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__success
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__fail
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__success
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__success
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__fail
[2020-11-25 02:10:49,717 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__success
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__fail
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__fail
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__success
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__fail
[2020-11-25 02:10:49,718 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__success
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__fail
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__success
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__fail
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__success
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__fail
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:10:49,719 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,720 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 02:10:49,721 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 02:10:49,722 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__fail
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__success
[2020-11-25 02:10:49,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__success
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__success
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__success
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__success
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__success
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 02:10:49,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__fail
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__success
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__fail
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__success
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__fail
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__success
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__fail
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__success
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__fail
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__success
[2020-11-25 02:10:49,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 02:10:49,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 02:10:49,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 02:10:49,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 02:10:49,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 02:10:49,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyToken
[2020-11-25 02:10:49,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:10:49,727 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:10:49,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:10:50,173 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:10:50,173 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:10:50,385 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:10:50,385 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 02:10:50,387 INFO  L202        PluginConnector]: Adding new model MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:10:50 BoogieIcfgContainer
[2020-11-25 02:10:50,387 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:10:49" (2/2) ...
[2020-11-25 02:10:50,387 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:10:50,387 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@b04e16b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:10:50, skipping insertion in model container
[2020-11-25 02:10:50,388 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:10:50,388 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:10:50,388 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:10:50,389 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:10:50,389 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/3) ...
[2020-11-25 02:10:50,390 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2a24f5d0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:10:50, skipping insertion in model container
[2020-11-25 02:10:50,390 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:10:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:10:50,427 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:10:50 NWAContainer
[2020-11-25 02:10:50,427 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:10:50,427 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:10:50,427 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:10:50,428 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:10:50,429 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:10:50" (3/4) ...
[2020-11-25 02:10:50,430 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4f078510 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:10:50, skipping insertion in model container
[2020-11-25 02:10:50,430 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:10:50" (4/4) ...
[2020-11-25 02:10:50,433 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:10:50,436 INFO  L110   BuchiProductObserver]: Initial RCFG 1503 locations, 1888 edges
[2020-11-25 02:10:50,437 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:10:50,447 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:10:51,724 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:10:51,729 INFO  L110   BuchiProductObserver]: BuchiProgram size 3566 locations, 6118 edges
[2020-11-25 02:10:51,729 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:10:51 BoogieIcfgContainer
[2020-11-25 02:10:51,729 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:10:51,729 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:10:51,729 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:10:51,731 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:10:51,731 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:10:51" (1/1) ...
[2020-11-25 02:10:51,804 INFO  L313           BlockEncoder]: Initial Icfg 3566 locations, 6118 edges
[2020-11-25 02:10:51,804 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:10:51,804 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:10:51,804 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:10:51,805 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:10:51,814 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 13 locations because of local infeasibility
[2020-11-25 02:10:51,821 INFO  L70        RemoveSinkStates]: Removed 74 edges and 42 locations by removing sink states
[2020-11-25 02:10:51,829 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:10:51,834 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:10:51,836 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:10:51,837 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:10:51,840 INFO  L313           BlockEncoder]: Encoded RCFG 3489 locations, 5928 edges
[2020-11-25 02:10:51,841 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:10:51 BasicIcfg
[2020-11-25 02:10:51,841 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:10:51,841 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:10:51,841 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:10:51,843 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:10:51,843 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:10:51,843 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:10:49" (1/6) ...
[2020-11-25 02:10:51,845 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32609096 and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:10:51, skipping insertion in model container
[2020-11-25 02:10:51,845 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:10:51,845 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:10:49" (2/6) ...
[2020-11-25 02:10:51,845 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32609096 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:10:51, skipping insertion in model container
[2020-11-25 02:10:51,845 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:10:51,845 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:10:50" (3/6) ...
[2020-11-25 02:10:51,846 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32609096 and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:10:51, skipping insertion in model container
[2020-11-25 02:10:51,846 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:10:51,846 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:10:50" (4/6) ...
[2020-11-25 02:10:51,846 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32609096 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:10:51, skipping insertion in model container
[2020-11-25 02:10:51,846 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:10:51,846 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:10:51" (5/6) ...
[2020-11-25 02:10:51,846 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32609096 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:10:51, skipping insertion in model container
[2020-11-25 02:10:51,846 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:10:51,846 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:10:51" (6/6) ...
[2020-11-25 02:10:51,847 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-self-fail.bpl_BEv2
[2020-11-25 02:10:51,880 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:10:51,880 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:10:51,880 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:10:51,880 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:10:51,880 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:10:51,880 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:10:51,880 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:10:51,880 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:10:51,880 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:10:51,911 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3489 states.
[2020-11-25 02:10:51,956 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:10:51,956 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:10:51,956 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:10:51,966 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:51,966 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:51,966 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:10:51,966 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3489 states.
[2020-11-25 02:10:51,980 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:10:51,980 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:10:51,980 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:10:51,982 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:51,982 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_MyToken0 := false;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND TRUE   revert
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND TRUE   choice == 19
[L3986]              gas := gas - 21000;
[L3987]  COND FALSE  !(gas >= 0)
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 02:10:51,996 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:10:51,996 INFO  L82        PathProgramCache]: Analyzing trace with hash 842134512, now seen corresponding path program 1 times
[2020-11-25 02:10:51,999 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:10:52,018 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:10:52,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:10:52,061 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:10:52,061 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:10:52,064 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:10:52,256 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:10:52,257 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:10:52,258 INFO  L87              Difference]: Start difference. First operand 3489 states. Second operand 4 states.
[2020-11-25 02:10:52,527 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:10:52,527 INFO  L93              Difference]: Finished difference Result 2319 states and 2514 transitions.
[2020-11-25 02:10:52,527 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:10:52,528 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2319 states and 2514 transitions.
[2020-11-25 02:10:52,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:10:52,553 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2319 states to 2319 states and 2514 transitions.
[2020-11-25 02:10:52,554 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 02:10:52,556 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 919
[2020-11-25 02:10:52,556 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2319 states and 2514 transitions.
[2020-11-25 02:10:52,561 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:10:52,562 INFO  L728         BuchiCegarLoop]: Abstraction has 2319 states and 2514 transitions.
[2020-11-25 02:10:52,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2319 states and 2514 transitions.
[2020-11-25 02:10:52,617 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2319 to 2319.
[2020-11-25 02:10:52,618 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2319 states.
[2020-11-25 02:10:52,623 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2319 states to 2319 states and 2514 transitions.
[2020-11-25 02:10:52,624 INFO  L751         BuchiCegarLoop]: Abstraction has 2319 states and 2514 transitions.
[2020-11-25 02:10:52,624 INFO  L631         BuchiCegarLoop]: Abstraction has 2319 states and 2514 transitions.
[2020-11-25 02:10:52,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:10:52,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2319 states and 2514 transitions.
[2020-11-25 02:10:52,633 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:10:52,633 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:10:52,633 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:10:52,636 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:52,636 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_MyToken0 := false;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND TRUE   revert
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND TRUE   !(b_s45 <= a_s45)
[L1931]              revert := true;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND TRUE   revert
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND TRUE   !(b_s45 <= a_s45)
[L1931]              revert := true;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND TRUE   revert
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 02:10:52,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:10:52,641 INFO  L82        PathProgramCache]: Analyzing trace with hash 204024132, now seen corresponding path program 1 times
[2020-11-25 02:10:52,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:10:52,651 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:10:52,673 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:10:52,673 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:10:52,673 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:10:52,675 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:10:52,675 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:10:52,675 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:10:52,675 INFO  L87              Difference]: Start difference. First operand 2319 states and 2514 transitions. cyclomatic complexity: 197 Second operand 4 states.
[2020-11-25 02:10:53,018 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:10:53,018 INFO  L93              Difference]: Finished difference Result 2999 states and 3296 transitions.
[2020-11-25 02:10:53,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:10:53,018 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2999 states and 3296 transitions.
[2020-11-25 02:10:53,030 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:10:53,042 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2999 states to 2895 states and 3186 transitions.
[2020-11-25 02:10:53,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1114
[2020-11-25 02:10:53,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1114
[2020-11-25 02:10:53,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2895 states and 3186 transitions.
[2020-11-25 02:10:53,048 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:10:53,048 INFO  L728         BuchiCegarLoop]: Abstraction has 2895 states and 3186 transitions.
[2020-11-25 02:10:53,050 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2895 states and 3186 transitions.
[2020-11-25 02:10:53,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2895 to 2507.
[2020-11-25 02:10:53,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2507 states.
[2020-11-25 02:10:53,079 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2507 states to 2507 states and 2703 transitions.
[2020-11-25 02:10:53,079 INFO  L751         BuchiCegarLoop]: Abstraction has 2507 states and 2703 transitions.
[2020-11-25 02:10:53,079 INFO  L631         BuchiCegarLoop]: Abstraction has 2507 states and 2703 transitions.
[2020-11-25 02:10:53,079 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:10:53,079 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2507 states and 2703 transitions.
[2020-11-25 02:10:53,084 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:10:53,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:10:53,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:10:53,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:53,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_MyToken0 := false;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 02:10:53,091 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:10:53,091 INFO  L82        PathProgramCache]: Analyzing trace with hash 94307411, now seen corresponding path program 1 times
[2020-11-25 02:10:53,092 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:10:53,109 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:10:53,236 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 02:10:53,236 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:10:53,237 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 02:10:53,237 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:10:53,237 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 02:10:53,237 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 02:10:53,238 INFO  L87              Difference]: Start difference. First operand 2507 states and 2703 transitions. cyclomatic complexity: 198 Second operand 13 states.
[2020-11-25 02:10:54,730 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:10:54,730 INFO  L93              Difference]: Finished difference Result 2587 states and 2795 transitions.
[2020-11-25 02:10:54,730 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 02:10:54,731 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2587 states and 2795 transitions.
[2020-11-25 02:10:54,737 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:10:54,745 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2587 states to 2587 states and 2795 transitions.
[2020-11-25 02:10:54,745 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-11-25 02:10:54,746 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-11-25 02:10:54,746 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2587 states and 2795 transitions.
[2020-11-25 02:10:54,749 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:10:54,749 INFO  L728         BuchiCegarLoop]: Abstraction has 2587 states and 2795 transitions.
[2020-11-25 02:10:54,752 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2587 states and 2795 transitions.
[2020-11-25 02:10:54,789 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2587 to 2382.
[2020-11-25 02:10:54,789 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2382 states.
[2020-11-25 02:10:54,791 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2382 states to 2382 states and 2543 transitions.
[2020-11-25 02:10:54,791 INFO  L751         BuchiCegarLoop]: Abstraction has 2382 states and 2543 transitions.
[2020-11-25 02:10:54,791 INFO  L631         BuchiCegarLoop]: Abstraction has 2382 states and 2543 transitions.
[2020-11-25 02:10:54,791 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:10:54,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2382 states and 2543 transitions.
[2020-11-25 02:10:54,795 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:10:54,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:10:54,795 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:10:54,798 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:54,798 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_MyToken0 := false;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND TRUE   __exception
[L771]               __tmp__Balance := Balance;
[L772]               __tmp__DType := DType;
[L773]               __tmp__Alloc := Alloc;
[L774]               __tmp__balance_ADDR := balance_ADDR;
[L775]               __tmp__M_Ref_int := M_Ref_int;
[L776]               __tmp__sum_balances0 := sum_balances0;
[L777]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L778]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L779]               __tmp__sum_allowed1 := sum_allowed1;
[L780]               __tmp__Length := Length;
[L781]               __tmp__now := now;
[L782]               __tmp__owner_Owned := owner_Owned;
[L783]               __tmp__newOwner_Owned := newOwner_Owned;
[L784]               __tmp__symbol_MyToken := symbol_MyToken;
[L785]               __tmp__name_MyToken := name_MyToken;
[L786]               __tmp__decimals_MyToken := decimals_MyToken;
[L787]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L788]               __tmp__balances_MyToken := balances_MyToken;
[L789]               __tmp__allowed_MyToken := allowed_MyToken;
[L790]   CALL        call MyToken_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2196]  CALL        call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1991]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1976]              assume msgsender_MSG != null;
[L1977]              __tmp__Balance[this] := 0;
[L1991]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1992]  COND FALSE  !(revert)
[L2196]  RET         call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L2197]  COND FALSE  !(revert)
[L2200]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2061]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2040]              assume msgsender_MSG != null;
[L2041]              __tmp__Balance[this] := 0;
[L2042]              __tmp__owner_Owned[this] := null;
[L2043]              __tmp__newOwner_Owned[this] := null;
[L2045]              __tmp__owner_Owned[this] := msgsender_MSG;
[L2061]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2062]  COND FALSE  !(revert)
[L2200]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2201]  COND FALSE  !(revert)
[L2204]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1887]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]              assume msgsender_MSG != null;
[L1873]              __tmp__Balance[this] := 0;
[L1887]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1888]  COND FALSE  !(revert)
[L2204]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L2205]  COND FALSE  !(revert)
[L2208]  CALL        call MyToken_MyToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2146]              assume msgsender_MSG != null;
[L2147]              __tmp__Balance[this] := 0;
[L2148]              __tmp__symbol_MyToken[this] := -1251229519;
[L2149]              __tmp__name_MyToken[this] := -1251229519;
[L2150]              __tmp__decimals_MyToken[this] := 0;
[L2151]              __tmp___totalSupply_MyToken[this] := 0;
[L2152]              __tmp__balances_MyToken[this] := zeroRefintArr();
[L2153]              __tmp__sum_balances0[this] := 0;
[L2154]              __tmp__allowed_MyToken[this] := zeroRefRefintArr();
[L2155]              __tmp__sum_allowed1[this] := 0;
[L2157]              __tmp__name_MyToken[this] := tokenName_s318;
[L2158]              __tmp__symbol_MyToken[this] := tokenSymbol_s318;
[L2159]              __tmp__decimals_MyToken[this] := tokenDecimals_s318;
[L2160]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2161]              __tmp___totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2162]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2163]              __tmp__balances_MyToken[this][msgsender_MSG] := __tmp___totalSupply_MyToken[this];
[L2164]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2208]  RET         call MyToken_MyToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2209]  COND FALSE  !(revert)
[L790]   RET         call MyToken_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L791]               assume revert || gas < 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND TRUE   choice == 19
[L3986]              gas := gas - 21000;
[L3987]  COND FALSE  !(gas >= 0)
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 02:10:54,803 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:10:54,803 INFO  L82        PathProgramCache]: Analyzing trace with hash -1398147293, now seen corresponding path program 1 times
[2020-11-25 02:10:54,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:10:54,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:10:54,838 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 02:10:54,838 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:10:54,838 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:10:54,839 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:10:54,839 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:10:54,839 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:10:54,839 INFO  L87              Difference]: Start difference. First operand 2382 states and 2543 transitions. cyclomatic complexity: 164 Second operand 4 states.
[2020-11-25 02:10:54,989 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:10:54,989 INFO  L93              Difference]: Finished difference Result 3148 states and 3507 transitions.
[2020-11-25 02:10:54,989 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:10:54,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3148 states and 3507 transitions.
[2020-11-25 02:10:54,997 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:10:55,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3148 states to 3050 states and 3409 transitions.
[2020-11-25 02:10:55,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 02:10:55,006 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1180
[2020-11-25 02:10:55,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3050 states and 3409 transitions.
[2020-11-25 02:10:55,009 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:10:55,009 INFO  L728         BuchiCegarLoop]: Abstraction has 3050 states and 3409 transitions.
[2020-11-25 02:10:55,011 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3050 states and 3409 transitions.
[2020-11-25 02:10:55,026 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3050 to 2284.
[2020-11-25 02:10:55,026 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2284 states.
[2020-11-25 02:10:55,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2284 states to 2284 states and 2444 transitions.
[2020-11-25 02:10:55,028 INFO  L751         BuchiCegarLoop]: Abstraction has 2284 states and 2444 transitions.
[2020-11-25 02:10:55,028 INFO  L631         BuchiCegarLoop]: Abstraction has 2284 states and 2444 transitions.
[2020-11-25 02:10:55,028 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:10:55,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2284 states and 2444 transitions.
[2020-11-25 02:10:55,031 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:10:55,031 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:10:55,031 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:10:55,032 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:10:55,032 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_MyToken0 := false;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND TRUE   choice == 11
[L4043]              gas := gas - 21000;
[L4044]  COND TRUE   gas >= 0
[L4045]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4046]              assume msgvalue_MSG == 0;
[L4047]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L988]               havoc __exception;
[L989]               revert := false;
[L990]   COND FALSE  !(__exception)
[L1013]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2335]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2336]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2337]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2338]              assert { :EventEmitted "Approval_MyToken" } true;
[L2339]              success_s415 := true;
[L1013]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1014]              assume !revert && gas >= 0;
[L4047]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4133]  RET         call CorralChoice_MyToken(this);
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s474 == to_s474 && (tokens_s474 > balances_MyToken[this][from_s474] || tokens_s474 > allowed_MyToken[this][from_s474][msgsender_MSG])) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_MyToken0 := true;
[L2]                 call_transferFrom_MyToken0 := false;
[L2]                 revert := revert_hold;
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 02:10:55,036 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:10:55,036 INFO  L82        PathProgramCache]: Analyzing trace with hash 612794212, now seen corresponding path program 1 times
[2020-11-25 02:10:55,037 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:10:55,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:10:55,136 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 74 trivial. 0 not checked.
[2020-11-25 02:10:55,136 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:10:55,136 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:10:55,136 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:10:55,136 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:10:55,136 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=53, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:10:55,137 INFO  L87              Difference]: Start difference. First operand 2284 states and 2444 transitions. cyclomatic complexity: 163 Second operand 9 states.
[2020-11-25 02:10:55,645 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:10:55,646 INFO  L93              Difference]: Finished difference Result 1302 states and 1388 transitions.
[2020-11-25 02:10:55,646 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:10:55,646 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1302 states and 1388 transitions.
[2020-11-25 02:10:55,650 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:10:55,650 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1302 states to 0 states and 0 transitions.
[2020-11-25 02:10:55,650 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 02:10:55,650 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 02:10:55,650 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 02:10:55,650 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:10:55,651 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:10:55,651 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:10:55,651 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:10:55,651 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:10:55,651 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 02:10:55,651 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:10:55,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 02:10:55,655 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:10:55 BasicIcfg
[2020-11-25 02:10:55,655 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:10:55,656 INFO  L168              Benchmark]: Toolchain (without parser) took 6189.95 ms. Allocated memory was 1.0 GB in the beginning and 1.6 GB in the end (delta: 539.0 MB). Free memory was 935.2 MB in the beginning and 808.1 MB in the end (delta: 127.1 MB). Peak memory consumption was 666.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,657 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,657 INFO  L168              Benchmark]: Boogie Preprocessor took 101.70 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,657 INFO  L168              Benchmark]: UtopiaSpecLang took 68.79 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,658 INFO  L168              Benchmark]: Boogie Printer took 15.45 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,658 INFO  L168              Benchmark]: RCFGBuilder took 734.22 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.3 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,658 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.40 ms. Allocated memory is still 1.0 GB. Free memory was 806.3 MB in the beginning and 802.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,659 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1301.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 210.8 MB). Free memory was 802.8 MB in the beginning and 1.0 GB in the end (delta: -239.0 MB). Peak memory consumption was 185.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,659 INFO  L168              Benchmark]: BlockEncodingV2 took 111.60 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 980.0 MB in the end (delta: 61.7 MB). Peak memory consumption was 61.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,660 INFO  L168              Benchmark]: BuchiAutomizer took 3814.08 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 328.2 MB). Free memory was 980.0 MB in the beginning and 808.1 MB in the end (delta: 171.9 MB). Peak memory consumption was 500.2 MB. Max. memory is 15.3 GB.
[2020-11-25 02:10:55,663 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3566 locations, 6118 edges
  - StatisticsResult: Encoded RCFG
    3489 locations, 5928 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 101.70 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 68.79 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.45 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 734.22 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.3 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.40 ms. Allocated memory is still 1.0 GB. Free memory was 806.3 MB in the beginning and 802.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1301.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 210.8 MB). Free memory was 802.8 MB in the beginning and 1.0 GB in the end (delta: -239.0 MB). Peak memory consumption was 185.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 111.60 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 980.0 MB in the end (delta: 61.7 MB). Peak memory consumption was 61.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 3814.08 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 328.2 MB). Free memory was 980.0 MB in the beginning and 808.1 MB in the end (delta: 171.9 MB). Peak memory consumption was 500.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1503 locations, 1888 edges
  - StatisticsResult: BuchiProgram size
    3566 locations, 6118 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 13 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 3.7s and 6 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.4s. Construction of modules took 2.0s. BÃ¼chi inclusion checks took 0.9s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 1359 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 2507 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11845 SDtfs, 11385 SDslu, 16476 SDs, 0 SdLazy, 24021 SolverSat, 1710 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_MyToken0) ==> ( <>(fail_transferFrom_MyToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
