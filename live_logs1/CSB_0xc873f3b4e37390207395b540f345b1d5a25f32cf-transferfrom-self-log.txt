This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:53:20,051 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:53:20,052 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:53:20,059 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:53:20,060 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:53:20,060 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:53:20,061 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:53:20,062 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:53:20,063 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:53:20,063 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:53:20,064 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:53:20,064 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:53:20,065 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:53:20,065 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:53:20,066 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:53:20,066 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:53:20,067 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:53:20,067 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:53:20,068 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:53:20,069 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:53:20,070 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:53:20,070 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:53:20,072 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:53:20,072 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:53:20,072 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:53:20,072 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:53:20,072 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:53:20,073 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:53:20,073 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:53:20,073 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:53:20,073 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:53:20,074 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:53:20,074 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:53:20,075 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:53:20,075 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:53:20,075 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:53:20,075 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:53:20,076 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:53:20,076 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:53:20,076 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:53:20,076 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:53:20,077 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:53:20,082 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:53:20,082 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:53:20,083 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:53:20,083 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:53:20,083 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:53:20,083 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:53:20,083 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:53:20,084 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:53:20,084 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:53:20,084 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:53:20,085 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:53:20,085 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:53:20,085 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:53:20,085 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:53:20,085 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:53:20,085 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:53:20,103 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:53:20,115 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:53:20,118 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:53:20,119 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:53:20,119 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:53:20,120 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl
[2020-11-25 12:53:20,120 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl'
[2020-11-25 12:53:20,186 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:53:20,188 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:53:20,188 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:53:20,188 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:53:20,188 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:53:20,204 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,205 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,232 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,234 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,251 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,258 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,262 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,268 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:53:20,269 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:53:20,269 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:53:20,271 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:53:20,274 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/1) ...
[2020-11-25 12:53:20,287 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(CSB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:53:20,293 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(CSB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:53:20,300 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(CSB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:53:20,307 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s239 || p2!=msg.sender ) && _from_s239==_to_s239 ) && _value_s239<=balances_CSB[this][_from_s239] ) && _value_s239<=allowed_CSB[this][_from_s239][msg.sender] ) && _value_s239>=0 ) && _value_s239<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_to_s239]>=0 ) && balances_CSB[this][_to_s239]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_from_s239]>=0 ) && balances_CSB[this][_from_s239]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_CSB[this][_from_s239][msg.sender]>=0 ) && allowed_CSB[this][_from_s239][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[COMPEQ,IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_to_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:53:20,309 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( success_s239==true && allowed_CSB[this][_from_s239][msg.sender]==( ( old(allowed_CSB[this][_from_s239][msg.sender]) ) - _value_s239 ) ) && totalSupply_CSBInterface[this]==( old(totalSupply_CSBInterface[this]) ) ) && balances_CSB[this]==( old(balances_CSB[this]) ) ) && allowed_CSB[this][p1][p2]==( old(allowed_CSB[this][p1][p2]) ) ) && name_CSB[this]==( old(name_CSB[this]) ) ) && decimals_CSB[this]==( old(decimals_CSB[this]) ) ) && symbol_CSB[this]==( old(symbol_CSB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s239,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_CSB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[_from_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],IdentifierExpression[_value_s239,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_CSB>]]]]]]
[2020-11-25 12:53:20,313 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(CSB.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_CSB[this][from] && value <= allowed_CSB[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][from] >= 0 &&  balances_CSB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_CSB[this][from][msg.sender] >= 0 && allowed_CSB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transferFrom(from, to, value), return == true && allowed_CSB[this][from][msg.sender] == old(allowed_CSB[this][from][msg.sender]) - value && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:53:20,313 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_CSB0) ==> ( <>AP(success_transferFrom_CSB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:53:20,319 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:20 PropertyContainer
[2020-11-25 12:53:20,319 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:53:20,320 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:53:20,320 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:53:20,320 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:53:20,321 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/2) ...
[2020-11-25 12:53:20,321 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:53:20,321 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:53:20,331 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:20" (2/2) ...
[2020-11-25 12:53:20,331 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:53:20,331 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:53:20,331 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:53:20,331 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:53:20,332 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/2) ...
[2020-11-25 12:53:20,383 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:53:20,383 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface
[2020-11-25 12:53:20,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface
[2020-11-25 12:53:20,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:53:20,384 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB
[2020-11-25 12:53:20,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB
[2020-11-25 12:53:20,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB
[2020-11-25 12:53:20,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB
[2020-11-25 12:53:20,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:53:20,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:53:20,385 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB
[2020-11-25 12:53:20,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB
[2020-11-25 12:53:20,385 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB
[2020-11-25 12:53:20,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB
[2020-11-25 12:53:20,386 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB
[2020-11-25 12:53:20,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB
[2020-11-25 12:53:20,386 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB
[2020-11-25 12:53:20,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB
[2020-11-25 12:53:20,386 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB
[2020-11-25 12:53:20,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB
[2020-11-25 12:53:20,386 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB
[2020-11-25 12:53:20,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB
[2020-11-25 12:53:20,386 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB
[2020-11-25 12:53:20,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB
[2020-11-25 12:53:20,386 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB
[2020-11-25 12:53:20,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSBInterface
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CSBInterface
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSB
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__success
[2020-11-25 12:53:20,387 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__success
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__success
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__success
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__success
[2020-11-25 12:53:20,388 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__success
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__success
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__success
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__success
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__success
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:53:20,389 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:53:20,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__success
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__success
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:53:20,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__fail
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__success
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__success
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__fail
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__success
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__fail
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__success
[2020-11-25 12:53:20,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__success
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__success
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__success
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__success
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:53:20,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:53:20,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSBInterface
[2020-11-25 12:53:20,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CSBInterface
[2020-11-25 12:53:20,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSB
[2020-11-25 12:53:20,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:53:20,393 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:53:20,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:53:20,530 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:53:20,620 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:53:20,620 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:53:20,620 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:53:20,836 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:53:20,836 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 12:53:20,837 INFO  L202        PluginConnector]: Adding new model CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:20 BoogieIcfgContainer
[2020-11-25 12:53:20,837 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:20" (2/2) ...
[2020-11-25 12:53:20,837 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:53:20,838 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@608049d7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:20, skipping insertion in model container
[2020-11-25 12:53:20,838 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:53:20,838 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:53:20,838 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:53:20,840 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:53:20,840 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/3) ...
[2020-11-25 12:53:20,840 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6ee44b63 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:20, skipping insertion in model container
[2020-11-25 12:53:20,840 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:20" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:53:20,872 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:20 NWAContainer
[2020-11-25 12:53:20,872 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:53:20,873 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:53:20,873 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:53:20,874 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:53:20,874 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:20" (3/4) ...
[2020-11-25 12:53:20,875 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4fd2cca4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:20, skipping insertion in model container
[2020-11-25 12:53:20,875 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:20" (4/4) ...
[2020-11-25 12:53:20,879 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:53:20,881 INFO  L110   BuchiProductObserver]: Initial RCFG 792 locations, 954 edges
[2020-11-25 12:53:20,881 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:53:20,890 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:53:21,846 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:53:21,849 INFO  L110   BuchiProductObserver]: BuchiProgram size 1832 locations, 3064 edges
[2020-11-25 12:53:21,849 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:21 BoogieIcfgContainer
[2020-11-25 12:53:21,849 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:53:21,850 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:53:21,850 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:53:21,852 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:53:21,852 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:21" (1/1) ...
[2020-11-25 12:53:21,902 INFO  L313           BlockEncoder]: Initial Icfg 1832 locations, 3064 edges
[2020-11-25 12:53:21,902 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:53:21,903 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:53:21,903 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:53:21,903 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:53:21,910 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 12:53:21,914 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 12:53:21,919 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:53:21,921 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:53:21,923 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:53:21,923 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:53:21,925 INFO  L313           BlockEncoder]: Encoded RCFG 1814 locations, 3021 edges
[2020-11-25 12:53:21,925 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:53:21 BasicIcfg
[2020-11-25 12:53:21,925 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:53:21,926 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:53:21,926 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:53:21,928 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:53:21,928 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:21,928 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:53:20" (1/6) ...
[2020-11-25 12:53:21,930 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@41508eb9 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:53:21, skipping insertion in model container
[2020-11-25 12:53:21,930 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:21,930 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:53:20" (2/6) ...
[2020-11-25 12:53:21,930 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@41508eb9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:53:21, skipping insertion in model container
[2020-11-25 12:53:21,930 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:21,930 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:53:20" (3/6) ...
[2020-11-25 12:53:21,930 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@41508eb9 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:53:21, skipping insertion in model container
[2020-11-25 12:53:21,930 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:21,930 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:53:20" (4/6) ...
[2020-11-25 12:53:21,931 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@41508eb9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:53:21, skipping insertion in model container
[2020-11-25 12:53:21,931 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:21,931 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:53:21" (5/6) ...
[2020-11-25 12:53:21,931 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@41508eb9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:53:21, skipping insertion in model container
[2020-11-25 12:53:21,931 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:53:21,931 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:53:21" (6/6) ...
[2020-11-25 12:53:21,934 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transferfrom-self.bpl_BEv2
[2020-11-25 12:53:21,980 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:53:21,981 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:53:21,981 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:53:21,981 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:53:21,981 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:53:21,981 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:53:21,981 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:53:21,981 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:53:21,981 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:53:22,006 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1814 states.
[2020-11-25 12:53:22,060 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:22,060 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:22,060 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:22,070 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:22,070 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:22,070 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:53:22,070 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1814 states.
[2020-11-25 12:53:22,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:22,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:22,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:22,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:22,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND TRUE   revert
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND TRUE   choice == 11
[L2123]              gas := gas - 21000;
[L2124]  COND FALSE  !(gas >= 0)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:22,103 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:22,103 INFO  L82        PathProgramCache]: Analyzing trace with hash -2074406890, now seen corresponding path program 1 times
[2020-11-25 12:53:22,108 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:22,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:22,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:22,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:22,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:53:22,188 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:22,299 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:53:22,300 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:53:22,301 INFO  L87              Difference]: Start difference. First operand 1814 states. Second operand 4 states.
[2020-11-25 12:53:22,528 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:22,528 INFO  L93              Difference]: Finished difference Result 1324 states and 1415 transitions.
[2020-11-25 12:53:22,528 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:53:22,530 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1324 states and 1415 transitions.
[2020-11-25 12:53:22,538 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:22,551 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1324 states to 1324 states and 1415 transitions.
[2020-11-25 12:53:22,552 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:53:22,554 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 12:53:22,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1324 states and 1415 transitions.
[2020-11-25 12:53:22,559 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:22,559 INFO  L728         BuchiCegarLoop]: Abstraction has 1324 states and 1415 transitions.
[2020-11-25 12:53:22,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1324 states and 1415 transitions.
[2020-11-25 12:53:22,607 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1324 to 1324.
[2020-11-25 12:53:22,608 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1324 states.
[2020-11-25 12:53:22,611 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1324 states to 1324 states and 1415 transitions.
[2020-11-25 12:53:22,612 INFO  L751         BuchiCegarLoop]: Abstraction has 1324 states and 1415 transitions.
[2020-11-25 12:53:22,612 INFO  L631         BuchiCegarLoop]: Abstraction has 1324 states and 1415 transitions.
[2020-11-25 12:53:22,612 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:53:22,612 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1324 states and 1415 transitions.
[2020-11-25 12:53:22,617 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:22,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:22,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:22,620 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:22,620 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND TRUE   revert
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND TRUE   !(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1245]              revert := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND TRUE   !(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1245]              revert := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:22,624 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:22,624 INFO  L82        PathProgramCache]: Analyzing trace with hash -1025329467, now seen corresponding path program 1 times
[2020-11-25 12:53:22,625 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:22,635 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:22,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:22,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:22,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:53:22,658 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:22,659 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:53:22,659 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:53:22,659 INFO  L87              Difference]: Start difference. First operand 1324 states and 1415 transitions. cyclomatic complexity: 93 Second operand 4 states.
[2020-11-25 12:53:22,832 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:22,832 INFO  L93              Difference]: Finished difference Result 1922 states and 2175 transitions.
[2020-11-25 12:53:22,832 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:53:22,833 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1922 states and 2175 transitions.
[2020-11-25 12:53:22,842 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:53:22,851 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1922 states to 1902 states and 2155 transitions.
[2020-11-25 12:53:22,851 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 883
[2020-11-25 12:53:22,851 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 883
[2020-11-25 12:53:22,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1902 states and 2155 transitions.
[2020-11-25 12:53:22,854 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:22,854 INFO  L728         BuchiCegarLoop]: Abstraction has 1902 states and 2155 transitions.
[2020-11-25 12:53:22,856 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1902 states and 2155 transitions.
[2020-11-25 12:53:22,870 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1902 to 1320.
[2020-11-25 12:53:22,870 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1320 states.
[2020-11-25 12:53:22,872 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1320 states to 1320 states and 1401 transitions.
[2020-11-25 12:53:22,872 INFO  L751         BuchiCegarLoop]: Abstraction has 1320 states and 1401 transitions.
[2020-11-25 12:53:22,872 INFO  L631         BuchiCegarLoop]: Abstraction has 1320 states and 1401 transitions.
[2020-11-25 12:53:22,872 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:53:22,873 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1320 states and 1401 transitions.
[2020-11-25 12:53:22,875 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:22,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:22,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:22,877 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:22,877 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:22,880 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:22,880 INFO  L82        PathProgramCache]: Analyzing trace with hash 1277650604, now seen corresponding path program 1 times
[2020-11-25 12:53:22,881 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:22,897 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:23,020 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:23,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:23,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 12:53:23,022 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:23,022 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 12:53:23,022 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-11-25 12:53:23,022 INFO  L87              Difference]: Start difference. First operand 1320 states and 1401 transitions. cyclomatic complexity: 83 Second operand 13 states.
[2020-11-25 12:53:23,928 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:23,928 INFO  L93              Difference]: Finished difference Result 1380 states and 1481 transitions.
[2020-11-25 12:53:23,929 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:53:23,929 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1380 states and 1481 transitions.
[2020-11-25 12:53:23,933 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:53:23,938 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1380 states to 1380 states and 1481 transitions.
[2020-11-25 12:53:23,938 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 619
[2020-11-25 12:53:23,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 619
[2020-11-25 12:53:23,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1380 states and 1481 transitions.
[2020-11-25 12:53:23,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:23,941 INFO  L728         BuchiCegarLoop]: Abstraction has 1380 states and 1481 transitions.
[2020-11-25 12:53:23,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1380 states and 1481 transitions.
[2020-11-25 12:53:23,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1380 to 1376.
[2020-11-25 12:53:23,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1376 states.
[2020-11-25 12:53:23,957 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1376 states to 1376 states and 1468 transitions.
[2020-11-25 12:53:23,958 INFO  L751         BuchiCegarLoop]: Abstraction has 1376 states and 1468 transitions.
[2020-11-25 12:53:23,958 INFO  L631         BuchiCegarLoop]: Abstraction has 1376 states and 1468 transitions.
[2020-11-25 12:53:23,958 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:53:23,958 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1376 states and 1468 transitions.
[2020-11-25 12:53:23,962 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:53:23,962 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:23,962 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:23,964 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:23,964 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1255]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1256]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:23,967 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:23,967 INFO  L82        PathProgramCache]: Analyzing trace with hash 1774194188, now seen corresponding path program 1 times
[2020-11-25 12:53:23,968 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:24,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:24,827 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 78
[2020-11-25 12:53:25,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:25,244 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:25,244 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 12:53:25,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:25,246 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 12:53:25,246 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=669, Unknown=0, NotChecked=0, Total=756
[2020-11-25 12:53:25,246 INFO  L87              Difference]: Start difference. First operand 1376 states and 1468 transitions. cyclomatic complexity: 96 Second operand 28 states.
[2020-11-25 12:53:30,644 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:30,644 INFO  L93              Difference]: Finished difference Result 1514 states and 1657 transitions.
[2020-11-25 12:53:30,644 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 12:53:30,644 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1514 states and 1657 transitions.
[2020-11-25 12:53:30,649 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 12:53:30,654 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1514 states to 1514 states and 1657 transitions.
[2020-11-25 12:53:30,654 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 12:53:30,654 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 12:53:30,654 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1514 states and 1657 transitions.
[2020-11-25 12:53:30,656 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:30,656 INFO  L728         BuchiCegarLoop]: Abstraction has 1514 states and 1657 transitions.
[2020-11-25 12:53:30,657 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1514 states and 1657 transitions.
[2020-11-25 12:53:30,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1514 to 1456.
[2020-11-25 12:53:30,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1456 states.
[2020-11-25 12:53:30,671 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1456 states to 1456 states and 1567 transitions.
[2020-11-25 12:53:30,671 INFO  L751         BuchiCegarLoop]: Abstraction has 1456 states and 1567 transitions.
[2020-11-25 12:53:30,671 INFO  L631         BuchiCegarLoop]: Abstraction has 1456 states and 1567 transitions.
[2020-11-25 12:53:30,671 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:53:30,671 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1456 states and 1567 transitions.
[2020-11-25 12:53:30,674 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:53:30,674 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:30,674 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:30,675 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:30,675 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND TRUE   !(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1222]              revert := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND TRUE   !(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239)
[L1222]              revert := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:30,677 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:30,678 INFO  L82        PathProgramCache]: Analyzing trace with hash -1781591297, now seen corresponding path program 1 times
[2020-11-25 12:53:30,678 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:30,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:30,745 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:30,746 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:30,746 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 12:53:30,746 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:30,746 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 12:53:30,746 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 12:53:30,746 INFO  L87              Difference]: Start difference. First operand 1456 states and 1567 transitions. cyclomatic complexity: 117 Second operand 15 states.
[2020-11-25 12:53:31,759 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:31,759 INFO  L93              Difference]: Finished difference Result 1565 states and 1735 transitions.
[2020-11-25 12:53:31,760 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 12:53:31,760 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1565 states and 1735 transitions.
[2020-11-25 12:53:31,764 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 12:53:31,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1565 states to 1565 states and 1735 transitions.
[2020-11-25 12:53:31,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 715
[2020-11-25 12:53:31,768 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 715
[2020-11-25 12:53:31,768 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1565 states and 1735 transitions.
[2020-11-25 12:53:31,769 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:31,769 INFO  L728         BuchiCegarLoop]: Abstraction has 1565 states and 1735 transitions.
[2020-11-25 12:53:31,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1565 states and 1735 transitions.
[2020-11-25 12:53:31,782 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1565 to 1509.
[2020-11-25 12:53:31,782 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1509 states.
[2020-11-25 12:53:31,784 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1509 states to 1509 states and 1625 transitions.
[2020-11-25 12:53:31,784 INFO  L751         BuchiCegarLoop]: Abstraction has 1509 states and 1625 transitions.
[2020-11-25 12:53:31,784 INFO  L631         BuchiCegarLoop]: Abstraction has 1509 states and 1625 transitions.
[2020-11-25 12:53:31,784 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:53:31,784 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1509 states and 1625 transitions.
[2020-11-25 12:53:31,787 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:53:31,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:31,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:31,787 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:31,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND FALSE  !(!(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1225]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s239];
[L1226]              __tmp__balances_CSB[this][_to_s239] := (__tmp__balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1227]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s239];
[L1228]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_from_s239];
[L1229]              __tmp__balances_CSB[this][_from_s239] := (__tmp__balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_from_s239];
[L1231]  COND FALSE  !(allowance_s239 < __tmp__MAX_UINT256_CSB[this])
[L1236]              success_s239 := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND TRUE   __exception
[L317]               __tmp__Balance := Balance;
[L318]               __tmp__DType := DType;
[L319]               __tmp__Alloc := Alloc;
[L320]               __tmp__balance_ADDR := balance_ADDR;
[L321]               __tmp__M_Ref_int := M_Ref_int;
[L322]               __tmp__sum_balances0 := sum_balances0;
[L323]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L324]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L325]               __tmp__sum_allowed1 := sum_allowed1;
[L326]               __tmp__Length := Length;
[L327]               __tmp__now := now;
[L328]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L329]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L330]               __tmp__balances_CSB := balances_CSB;
[L331]               __tmp__allowed_CSB := allowed_CSB;
[L332]               __tmp__name_CSB := name_CSB;
[L333]               __tmp__decimals_CSB := decimals_CSB;
[L334]               __tmp__symbol_CSB := symbol_CSB;
[L335]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1220]              allowance_s239 := __tmp__allowed_CSB[this][_from_s239][msgsender_MSG];
[L1221]  COND FALSE  !(!(__tmp__balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1225]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s239];
[L1226]              __tmp__balances_CSB[this][_to_s239] := (__tmp__balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1227]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s239];
[L1228]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_from_s239];
[L1229]              __tmp__balances_CSB[this][_from_s239] := (__tmp__balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_from_s239];
[L1231]  COND FALSE  !(allowance_s239 < __tmp__MAX_UINT256_CSB[this])
[L1236]              success_s239 := true;
[L335]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L336]               assume revert || gas < 0;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:31,790 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:31,790 INFO  L82        PathProgramCache]: Analyzing trace with hash 1725630184, now seen corresponding path program 1 times
[2020-11-25 12:53:31,791 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:31,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:31,815 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:31,815 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:31,816 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:53:31,816 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:53:31,816 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:53:31,816 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:53:31,816 INFO  L87              Difference]: Start difference. First operand 1509 states and 1625 transitions. cyclomatic complexity: 122 Second operand 6 states.
[2020-11-25 12:53:31,951 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:31,951 INFO  L93              Difference]: Finished difference Result 1929 states and 2194 transitions.
[2020-11-25 12:53:31,951 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 12:53:31,952 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1929 states and 2194 transitions.
[2020-11-25 12:53:31,957 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:53:31,961 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1929 states to 1353 states and 1615 transitions.
[2020-11-25 12:53:31,961 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 636
[2020-11-25 12:53:31,962 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 636
[2020-11-25 12:53:31,962 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1353 states and 1615 transitions.
[2020-11-25 12:53:31,963 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:31,963 INFO  L728         BuchiCegarLoop]: Abstraction has 1353 states and 1615 transitions.
[2020-11-25 12:53:31,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1353 states and 1615 transitions.
[2020-11-25 12:53:31,973 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1353 to 886.
[2020-11-25 12:53:31,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 886 states.
[2020-11-25 12:53:31,974 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 886 states to 886 states and 962 transitions.
[2020-11-25 12:53:31,975 INFO  L751         BuchiCegarLoop]: Abstraction has 886 states and 962 transitions.
[2020-11-25 12:53:31,975 INFO  L631         BuchiCegarLoop]: Abstraction has 886 states and 962 transitions.
[2020-11-25 12:53:31,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:53:31,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 886 states and 962 transitions.
[2020-11-25 12:53:31,976 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:31,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:31,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:31,977 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:31,977 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND FALSE  !(choice == 8)
[L2148]  COND TRUE   choice == 7
[L2149]              gas := gas - 21000;
[L2150]  COND TRUE   gas >= 0
[L2151]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2152]              assume msgvalue_MSG == 0;
[L2153]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L420]               havoc __exception;
[L421]               revert := false;
[L422]   COND FALSE  !(__exception)
[L444]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1287]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1288]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1289]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1290]              assert { :EventEmitted "Approval_CSB" } true;
[L1291]              success_s279 := true;
[L444]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L445]               assume !revert && gas >= 0;
[L2153]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2213]  RET         call CorralChoice_CSB(this);
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1255]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1256]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1257]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:31,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:31,980 INFO  L82        PathProgramCache]: Analyzing trace with hash 2036527598, now seen corresponding path program 1 times
[2020-11-25 12:53:31,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:31,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:32,013 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:32,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:32,064 INFO  L82        PathProgramCache]: Analyzing trace with hash -291085243, now seen corresponding path program 1 times
[2020-11-25 12:53:32,064 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:32,076 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:32,192 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:32,192 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:32,193 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 12:53:32,193 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 12:53:32,193 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 12:53:32,193 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=85, Unknown=0, NotChecked=0, Total=110
[2020-11-25 12:53:32,193 INFO  L87              Difference]: Start difference. First operand 886 states and 962 transitions. cyclomatic complexity: 80 Second operand 11 states.
[2020-11-25 12:53:32,994 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:32,994 INFO  L93              Difference]: Finished difference Result 911 states and 984 transitions.
[2020-11-25 12:53:32,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:53:32,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 911 states and 984 transitions.
[2020-11-25 12:53:32,998 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:33,000 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 911 states to 906 states and 979 transitions.
[2020-11-25 12:53:33,000 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 400
[2020-11-25 12:53:33,000 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 400
[2020-11-25 12:53:33,000 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 906 states and 979 transitions.
[2020-11-25 12:53:33,001 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:33,001 INFO  L728         BuchiCegarLoop]: Abstraction has 906 states and 979 transitions.
[2020-11-25 12:53:33,002 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 906 states and 979 transitions.
[2020-11-25 12:53:33,006 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 906 to 862.
[2020-11-25 12:53:33,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 862 states.
[2020-11-25 12:53:33,007 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 862 states to 862 states and 928 transitions.
[2020-11-25 12:53:33,008 INFO  L751         BuchiCegarLoop]: Abstraction has 862 states and 928 transitions.
[2020-11-25 12:53:33,008 INFO  L631         BuchiCegarLoop]: Abstraction has 862 states and 928 transitions.
[2020-11-25 12:53:33,008 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:53:33,008 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 862 states and 928 transitions.
[2020-11-25 12:53:33,010 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:33,010 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:33,010 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:33,011 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:33,011 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND FALSE  !(choice == 8)
[L2148]  COND TRUE   choice == 7
[L2149]              gas := gas - 21000;
[L2150]  COND TRUE   gas >= 0
[L2151]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2152]              assume msgvalue_MSG == 0;
[L2153]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L420]               havoc __exception;
[L421]               revert := false;
[L422]   COND FALSE  !(__exception)
[L444]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1287]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1288]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1289]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1290]              assert { :EventEmitted "Approval_CSB" } true;
[L1291]              success_s279 := true;
[L444]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L445]               assume !revert && gas >= 0;
[L2153]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2213]  RET         call CorralChoice_CSB(this);
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND TRUE   choice == 11
[L2123]              gas := gas - 21000;
[L2124]  COND FALSE  !(gas >= 0)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:33,013 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:33,013 INFO  L82        PathProgramCache]: Analyzing trace with hash 2036527598, now seen corresponding path program 2 times
[2020-11-25 12:53:33,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:33,053 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,091 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:33,091 INFO  L82        PathProgramCache]: Analyzing trace with hash 1829531605, now seen corresponding path program 1 times
[2020-11-25 12:53:33,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:33,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:53:33,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:53:33,096 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:53:33,096 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:53:33,096 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 12:53:33,096 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:53:33,096 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:53:33,097 INFO  L87              Difference]: Start difference. First operand 862 states and 928 transitions. cyclomatic complexity: 69 Second operand 4 states.
[2020-11-25 12:53:33,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:53:33,128 INFO  L93              Difference]: Finished difference Result 975 states and 1034 transitions.
[2020-11-25 12:53:33,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:53:33,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 975 states and 1034 transitions.
[2020-11-25 12:53:33,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:53:33,133 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 975 states to 975 states and 1034 transitions.
[2020-11-25 12:53:33,133 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 425
[2020-11-25 12:53:33,133 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 425
[2020-11-25 12:53:33,133 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 975 states and 1034 transitions.
[2020-11-25 12:53:33,134 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:53:33,134 INFO  L728         BuchiCegarLoop]: Abstraction has 975 states and 1034 transitions.
[2020-11-25 12:53:33,135 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 975 states and 1034 transitions.
[2020-11-25 12:53:33,139 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 975 to 862.
[2020-11-25 12:53:33,139 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 862 states.
[2020-11-25 12:53:33,139 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 862 states to 862 states and 906 transitions.
[2020-11-25 12:53:33,139 INFO  L751         BuchiCegarLoop]: Abstraction has 862 states and 906 transitions.
[2020-11-25 12:53:33,139 INFO  L631         BuchiCegarLoop]: Abstraction has 862 states and 906 transitions.
[2020-11-25 12:53:33,140 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:53:33,140 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 862 states and 906 transitions.
[2020-11-25 12:53:33,141 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:53:33,141 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:53:33,141 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:53:33,142 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:53:33,142 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_CSB0 := false;
[L3]                 call_transferFrom_CSB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2203]              assume null == 0;
[L2204]  CALL        call this := FreshRefGenerator__success();
[L1062]              havoc newRef;
[L1063]              assume Alloc[newRef] == false;
[L1064]              Alloc[newRef] := true;
[L1065]              assume newRef != null;
[L2204]  RET         call this := FreshRefGenerator__success();
[L2205]              assume now >= 0;
[L2206]              assume DType[this] == CSB;
[L2207]              assume msgvalue_MSG == 0;
[L2208]              gas := gas - 53000;
[L2209]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2210]              assume !revert && gas >= 0;
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND FALSE  !(choice == 8)
[L2148]  COND TRUE   choice == 7
[L2149]              gas := gas - 21000;
[L2150]  COND TRUE   gas >= 0
[L2151]              assume _value_s279 >= 0 && _value_s279 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2152]              assume msgvalue_MSG == 0;
[L2153]  CALL        call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L420]               havoc __exception;
[L421]               revert := false;
[L422]   COND FALSE  !(__exception)
[L444]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1287]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1288]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1289]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1290]              assert { :EventEmitted "Approval_CSB" } true;
[L1291]              success_s279 := true;
[L444]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L445]               assume !revert && gas >= 0;
[L2153]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L2213]  RET         call CorralChoice_CSB(this);
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND TRUE   choice == 8
[L2142]              gas := gas - 21000;
[L2143]  COND TRUE   gas >= 0
[L2144]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2145]              assume msgvalue_MSG == 0;
[L2146]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2213]  RET         call CorralChoice_CSB(this);

Loop:
[L2213]  CALL        call CorralChoice_CSB(this);
[L2081]              havoc msgsender_MSG;
[L2082]              havoc msgvalue_MSG;
[L2083]              havoc choice;
[L2084]              havoc __ret_0_totalSupply;
[L2085]              havoc _owner_s251;
[L2086]              havoc balance_s251;
[L2087]              havoc _to_s172;
[L2088]              havoc _value_s172;
[L2089]              havoc success_s172;
[L2090]              havoc _from_s239;
[L2091]              havoc _to_s239;
[L2092]              havoc _value_s239;
[L2093]              havoc success_s239;
[L2094]              havoc _spender_s279;
[L2095]              havoc _value_s279;
[L2096]              havoc success_s279;
[L2097]              havoc _owner_s295;
[L2098]              havoc _spender_s295;
[L2099]              havoc remaining_s295;
[L2100]              havoc arg298_s0;
[L2101]              havoc __ret_0_balances;
[L2102]              havoc arg299_s0;
[L2103]              havoc arg300_s0;
[L2104]              havoc __ret_0_allowed;
[L2105]              havoc __ret_0_name;
[L2106]              havoc __ret_0_decimals;
[L2107]              havoc __ret_0_symbol;
[L2108]              havoc _initialAmount_s131;
[L2109]              havoc _tokenName_s131;
[L2110]              havoc _decimalUnits_s131;
[L2111]              havoc _tokenSymbol_s131;
[L2112]              havoc tmpNow;
[L2113]              havoc gas;
[L2114]              assume gas > 4000000 && gas <= 8000000;
[L2115]              tmpNow := now;
[L2116]              havoc now;
[L2117]              assume now > tmpNow;
[L2118]              assume msgsender_MSG != null;
[L2119]              assume DType[msgsender_MSG] != CSBInterface;
[L2120]              assume DType[msgsender_MSG] != CSB;
[L2121]              Alloc[msgsender_MSG] := true;
[L2122]  COND FALSE  !(choice == 11)
[L2128]  COND FALSE  !(choice == 10)
[L2134]  COND FALSE  !(choice == 9)
[L2141]  COND FALSE  !(choice == 8)
[L2148]  COND FALSE  !(choice == 7)
[L2155]  COND FALSE  !(choice == 6)
[L2161]  COND FALSE  !(choice == 5)
[L2167]  COND FALSE  !(choice == 4)
[L2173]  COND FALSE  !(choice == 3)
[L2179]  COND FALSE  !(choice == 2)
[L2185]  COND FALSE  !(choice == 1)
[L2213]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:53:33,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:33,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 2036527598, now seen corresponding path program 3 times
[2020-11-25 12:53:33,145 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:33,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,173 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,193 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:33,193 INFO  L82        PathProgramCache]: Analyzing trace with hash -1860474024, now seen corresponding path program 1 times
[2020-11-25 12:53:33,193 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:33,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,197 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,200 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:53:33,200 INFO  L82        PathProgramCache]: Analyzing trace with hash -1136918005, now seen corresponding path program 1 times
[2020-11-25 12:53:33,200 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:53:33,216 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:33,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.004s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.005s total
Resizing node table from 2503 to 5003
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 12:53:34,162 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 165 DAG size of output: 148
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 12:53:34,560 WARN  L188               SmtUtils]: Spent 381.00 ms on a formula simplification. DAG size of input: 107 DAG size of output: 99
[2020-11-25 12:53:35,037 WARN  L188               SmtUtils]: Spent 475.00 ms on a formula simplification. DAG size of input: 242 DAG size of output: 224
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 12:53:35,523 WARN  L188               SmtUtils]: Spent 483.00 ms on a formula simplification. DAG size of input: 206 DAG size of output: 206
[2020-11-25 12:53:36,150 WARN  L188               SmtUtils]: Spent 625.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 239
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 12:53:36,416 WARN  L188               SmtUtils]: Spent 259.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 159
[2020-11-25 12:53:36,693 WARN  L188               SmtUtils]: Spent 275.00 ms on a formula simplification that was a NOOP. DAG size: 282
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
[2020-11-25 12:53:37,194 WARN  L188               SmtUtils]: Spent 495.00 ms on a formula simplification. DAG size of input: 223 DAG size of output: 223
[2020-11-25 12:53:39,545 WARN  L188               SmtUtils]: Spent 2.35 s on a formula simplification. DAG size of input: 561 DAG size of output: 555
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 12:53:40,303 WARN  L188               SmtUtils]: Spent 729.00 ms on a formula simplification. DAG size of input: 233 DAG size of output: 226
[2020-11-25 12:53:40,777 WARN  L188               SmtUtils]: Spent 462.00 ms on a formula simplification that was a NOOP. DAG size: 306
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 12:53:42,051 WARN  L188               SmtUtils]: Spent 1.25 s on a formula simplification. DAG size of input: 238 DAG size of output: 225
[2020-11-25 12:53:43,179 WARN  L188               SmtUtils]: Spent 1.13 s on a formula simplification. DAG size of input: 307 DAG size of output: 306
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
[2020-11-25 12:53:48,551 WARN  L188               SmtUtils]: Spent 5.36 s on a formula simplification. DAG size of input: 337 DAG size of output: 322
[2020-11-25 12:53:48,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:53:48,581 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:53:48 BasicIcfg
[2020-11-25 12:53:48,582 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:53:48,582 INFO  L168              Benchmark]: Toolchain (without parser) took 28395.15 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.6 GB). Free memory was 940.6 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,582 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,583 INFO  L168              Benchmark]: Boogie Preprocessor took 80.43 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,583 INFO  L168              Benchmark]: UtopiaSpecLang took 51.00 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,583 INFO  L168              Benchmark]: Boogie Printer took 10.98 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,584 INFO  L168              Benchmark]: RCFGBuilder took 506.96 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,584 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.45 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,584 INFO  L168              Benchmark]: BÃ¼chi Program Product took 976.83 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.1 MB). Free memory was 861.8 MB in the beginning and 875.5 MB in the end (delta: -13.6 MB). Peak memory consumption was 146.0 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,585 INFO  L168              Benchmark]: BlockEncodingV2 took 75.59 ms. Allocated memory is still 1.1 GB. Free memory was 875.5 MB in the beginning and 841.1 MB in the end (delta: 34.4 MB). Peak memory consumption was 34.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,585 INFO  L168              Benchmark]: BuchiAutomizer took 26655.95 ms. Allocated memory was 1.1 GB in the beginning and 2.7 GB in the end (delta: 1.6 GB). Free memory was 841.1 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 12:53:48,587 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1832 locations, 3064 edges
  - StatisticsResult: Encoded RCFG
    1814 locations, 3021 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 80.43 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 51.00 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.98 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 506.96 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.45 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 976.83 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.1 MB). Free memory was 861.8 MB in the beginning and 875.5 MB in the end (delta: -13.6 MB). Peak memory consumption was 146.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 75.59 ms. Allocated memory is still 1.1 GB. Free memory was 875.5 MB in the beginning and 841.1 MB in the end (delta: 34.4 MB). Peak memory consumption was 34.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 26655.95 ms. Allocated memory was 1.1 GB in the beginning and 2.7 GB in the end (delta: 1.6 GB). Free memory was 841.1 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    792 locations, 954 edges
  - StatisticsResult: BuchiProgram size
    1832 locations, 3064 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.8 modules have a trivial ranking function, the largest among these consists of 28 locations. The remainder module has 862 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 26.5s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 17.3s. Construction of modules took 7.1s. BÃ¼chi inclusion checks took 1.6s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 8 MinimizatonAttempts, 1324 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1509 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 10391 SDtfs, 12467 SDslu, 23957 SDs, 0 SdLazy, 41646 SolverSat, 1999 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI2 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639948) = (new CSB)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639944, _initialAmount : 115792089237316195423570985008687907853269984665640564039457584007913129639934, _tokenName : 115792089237316195423570985008687907853269984665640564039457584007913129639937, _decimalUnits : 115792089237316195423570985008687907853269984665640564039457584007913129639936, _tokenSymbol : 115792089237316195423570985008687907853269984665640564039457584007913129639949});
[L204]               havoc __exception;
[L205]               revert := false;
[L206]   COND FALSE  !(__exception)
[L228]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1174]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_CSBInterface[this] := 0;
[L1096]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1097]  COND FALSE  !(revert)
[L1174]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1175]  COND FALSE  !(revert)
[L1178]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1140]              assume msgsender_MSG != null;
[L1141]              Balance[this] := 0;
[L1142]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1143]              balances_CSB[this] := zeroRefintArr();
[L1144]              sum_balances0[this] := 0;
[L1145]              allowed_CSB[this] := zeroRefRefintArr();
[L1146]              sum_allowed1[this] := 0;
[L1147]              name_CSB[this] := 265230608;
[L1148]              decimals_CSB[this] := 0;
[L1149]              symbol_CSB[this] := 265230608;
[L1151]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1152]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1153]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1154]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1155]              name_CSB[this] := _tokenName_s131;
[L1156]              decimals_CSB[this] := _decimalUnits_s131;
[L1157]              symbol_CSB[this] := _tokenSymbol_s131;
[L1178]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1179]  COND FALSE  !(revert)
[L228]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L229]               assume !revert && gas >= 0;
[L2209]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
CSB(115792089237316195423570985008687907853269984665640564039457584007913129639948).approve~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639944, _spender : 115792089237316195423570985008687907853269984665640564039457584007913129639943, _value : 115792089237316195423570985008687907853269984665640564039457584007913129639935});
[L420]               havoc __exception;
[L421]               revert := false;
[L422]   COND FALSE  !(__exception)
[L444]   CALL        call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L1287]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1288]              allowed_CSB[this][msgsender_MSG][_spender_s279] := _value_s279;
[L1289]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_CSB[this][msgsender_MSG][_spender_s279];
[L1290]              assert { :EventEmitted "Approval_CSB" } true;
[L1291]              success_s279 := true;
[L444]   RET         call success_s279 := approve~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
[L445]               assume !revert && gas >= 0;
[L2153]  RET         call success_s279 := approve~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _spender_s279, _value_s279);
CSB(115792089237316195423570985008687907853269984665640564039457584007913129639948).transferFrom~address~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639943, _from : 115792089237316195423570985008687907853269984665640564039457584007913129639944, _to : 115792089237316195423570985008687907853269984665640564039457584007913129639944, _value : 2});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s239 || p2 != msgsender_MSG) && _from_s239 == _to_s239) && _value_s239 <= balances_CSB[this][_from_s239]) && _value_s239 <= allowed_CSB[this][_from_s239][msgsender_MSG]) && _value_s239 >= 0) && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s239] >= 0) && balances_CSB[this][_to_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_from_s239] >= 0) && balances_CSB[this][_from_s239] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_CSB[this][_from_s239][msgsender_MSG] >= 0) && allowed_CSB[this][_from_s239][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_CSB0 := true;
[L3]                 call_transferFrom_CSB0 := false;
[L3]                 revert := revert_hold;
[L314]               havoc __exception;
[L315]               revert := false;
[L316]   COND FALSE  !(__exception)
[L338]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1243]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1244]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1248]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1249]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1250]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1251]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1252]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1253]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1254]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1259]              assert { :EventEmitted "Transfer_CSB" } true;
[L1260]              success_s239 := true;
[L338]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L339]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s239 == true && allowed_CSB[this][_from_s239][msgsender_MSG] == old(allowed_CSB[this][_from_s239][msgsender_MSG]) - _value_s239) && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this][p1][p2] == old(allowed_CSB[this][p1][p2])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L3]                 revert := revert_hold;
[L2146]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
