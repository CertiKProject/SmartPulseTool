This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:29:06,590 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:29:06,592 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:29:06,603 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:29:06,603 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:29:06,605 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:29:06,606 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:29:06,609 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:29:06,611 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:29:06,612 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:29:06,613 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:29:06,614 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:29:06,615 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:29:06,616 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:29:06,616 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:29:06,617 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:29:06,617 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:29:06,619 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:29:06,620 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:29:06,621 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:29:06,622 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:29:06,623 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:29:06,624 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:29:06,624 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:29:06,624 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:29:06,625 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:29:06,625 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:29:06,626 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:29:06,626 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:29:06,626 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:29:06,627 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:29:06,627 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:29:06,628 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:29:06,628 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:29:06,629 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:29:06,629 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:29:06,630 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:29:06,630 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:29:06,630 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:29:06,631 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:29:06,631 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:29:06,631 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:29:06,639 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:29:06,639 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:29:06,640 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:29:06,640 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:29:06,640 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:29:06,640 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:29:06,640 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:29:06,641 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:29:06,641 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:29:06,641 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:29:06,642 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:29:06,642 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:29:06,673 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:29:06,685 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:29:06,687 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:29:06,688 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:29:06,689 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:29:06,689 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl
[2020-11-25 03:29:06,689 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl'
[2020-11-25 03:29:06,787 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:29:06,788 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:29:06,789 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:29:06,789 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:29:06,789 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:29:06,805 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,807 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,843 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,844 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,872 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,886 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,897 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,909 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:29:06,910 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:29:06,910 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:29:06,912 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:29:06,915 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/1) ...
[2020-11-25 03:29:06,933 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 03:29:06,939 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 03:29:06,946 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 03:29:06,956 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s862==to_s862 && ( value_s862>_balances_ERC20[this][from_s862] || value_s862>_allowances_ERC20[this][from_s862][msg.sender] ) ) && value_s862>=0 ) && value_s862<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s862]>=0 ) && _balances_ERC20[this][to_s862]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s862]>=0 ) && _balances_ERC20[this][from_s862]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s862][msg.sender]>=0 ) && _allowances_ERC20[this][from_s862][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s862,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:29:06,963 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-25 03:29:06,963 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(fail_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:29:06,976 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:06 PropertyContainer
[2020-11-25 03:29:06,976 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:29:06,976 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:29:06,977 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:29:06,977 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:29:06,978 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/2) ...
[2020-11-25 03:29:06,978 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:29:06,978 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:29:06,997 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:06" (2/2) ...
[2020-11-25 03:29:06,997 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:29:06,998 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:29:06,998 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:29:06,998 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:29:06,999 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/2) ...
[2020-11-25 03:29:07,049 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:29:07,049 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:29:07,049 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:29:07,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:29:07,050 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:29:07,050 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:29:07,050 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:29:07,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:29:07,050 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:29:07,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:29:07,050 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 03:29:07,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 03:29:07,050 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 03:29:07,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 03:29:07,051 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:29:07,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:29:07,051 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:29:07,051 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 03:29:07,051 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 03:29:07,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 03:29:07,051 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 03:29:07,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 03:29:07,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 03:29:07,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:29:07,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:29:07,052 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:29:07,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:29:07,053 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:29:07,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:29:07,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:29:07,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:29:07,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:29:07,054 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:29:07,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:29:07,055 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:07,055 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 03:29:07,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,056 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:29:07,057 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken_NoBaseCtor__success
[2020-11-25 03:29:07,057 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken
[2020-11-25 03:29:07,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken
[2020-11-25 03:29:07,058 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_RariToken
[2020-11-25 03:29:07,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_RariToken
[2020-11-25 03:29:07,058 INFO  L130     BoogieDeclarations]: Found specification of procedure stopMint_RariToken
[2020-11-25 03:29:07,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopMint_RariToken
[2020-11-25 03:29:07,058 INFO  L130     BoogieDeclarations]: Found specification of procedure name_RariToken
[2020-11-25 03:29:07,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_RariToken
[2020-11-25 03:29:07,058 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_RariToken
[2020-11-25 03:29:07,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_RariToken
[2020-11-25 03:29:07,058 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_RariToken
[2020-11-25 03:29:07,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_RariToken
[2020-11-25 03:29:07,058 INFO  L130     BoogieDeclarations]: Found specification of procedure mintStopped_RariToken
[2020-11-25 03:29:07,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintStopped_RariToken
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:29:07,059 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 03:29:07,060 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RariToken
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:29:07,061 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:29:07,062 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 03:29:07,063 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:07,064 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:29:07,065 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:29:07,066 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,067 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken_NoBaseCtor__fail
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken__success
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken__fail
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_RariToken__success
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_RariToken__fail
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure stopMint_RariToken__success
[2020-11-25 03:29:07,068 INFO  L130     BoogieDeclarations]: Found specification of procedure stopMint_RariToken__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure name_RariToken__success
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure name_RariToken__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_RariToken__success
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_RariToken__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_RariToken__success
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_RariToken__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure mintStopped_RariToken__success
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure mintStopped_RariToken__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:29:07,069 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 03:29:07,070 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:29:07,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:29:07,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:29:07,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:29:07,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:29:07,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:07,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:29:07,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken_NoBaseCtor__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken_NoBaseCtor__success
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken__success
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_RariToken__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_RariToken__success
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopMint_RariToken__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopMint_RariToken__success
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_RariToken__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_RariToken__success
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_RariToken__fail
[2020-11-25 03:29:07,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_RariToken__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_RariToken__fail
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_RariToken__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintStopped_RariToken__fail
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintStopped_RariToken__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:29:07,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:29:07,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RariToken
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:29:07,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:29:07,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:29:07,734 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:29:07,735 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:29:08,070 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:29:08,070 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 03:29:08,073 INFO  L202        PluginConnector]: Adding new model RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:08 BoogieIcfgContainer
[2020-11-25 03:29:08,073 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:06" (2/2) ...
[2020-11-25 03:29:08,073 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:29:08,074 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@385f389e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:08, skipping insertion in model container
[2020-11-25 03:29:08,074 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:29:08,074 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:29:08,074 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:29:08,076 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:29:08,076 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/3) ...
[2020-11-25 03:29:08,077 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@77017b1c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:08, skipping insertion in model container
[2020-11-25 03:29:08,077 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:06" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:29:08,116 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:08 NWAContainer
[2020-11-25 03:29:08,116 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:29:08,116 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:29:08,116 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:29:08,117 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:29:08,118 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:08" (3/4) ...
[2020-11-25 03:29:08,118 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5ee673b9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:08, skipping insertion in model container
[2020-11-25 03:29:08,119 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:08" (4/4) ...
[2020-11-25 03:29:08,121 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:29:08,128 INFO  L110   BuchiProductObserver]: Initial RCFG 2840 locations, 4270 edges
[2020-11-25 03:29:08,128 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:29:08,140 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:29:10,075 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:29:10,085 INFO  L110   BuchiProductObserver]: BuchiProgram size 7466 locations, 14042 edges
[2020-11-25 03:29:10,085 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:10 BoogieIcfgContainer
[2020-11-25 03:29:10,085 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:29:10,085 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:29:10,085 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:29:10,087 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:29:10,087 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:10" (1/1) ...
[2020-11-25 03:29:10,216 INFO  L313           BlockEncoder]: Initial Icfg 7466 locations, 14042 edges
[2020-11-25 03:29:10,217 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:29:10,217 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:29:10,217 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:29:10,218 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:29:10,233 INFO  L70    emoveInfeasibleEdges]: Removed 243 edges and 19 locations because of local infeasibility
[2020-11-25 03:29:10,246 INFO  L70        RemoveSinkStates]: Removed 208 edges and 131 locations by removing sink states
[2020-11-25 03:29:10,266 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:29:10,270 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:29:10,275 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:29:10,275 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:29:10,279 INFO  L313           BlockEncoder]: Encoded RCFG 7282 locations, 13541 edges
[2020-11-25 03:29:10,280 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:29:10 BasicIcfg
[2020-11-25 03:29:10,280 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:29:10,280 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:29:10,280 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:29:10,282 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:29:10,282 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:10,282 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:06" (1/6) ...
[2020-11-25 03:29:10,283 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4274bd1a and model type RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:29:10, skipping insertion in model container
[2020-11-25 03:29:10,283 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:10,283 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:06" (2/6) ...
[2020-11-25 03:29:10,284 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4274bd1a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:29:10, skipping insertion in model container
[2020-11-25 03:29:10,284 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:10,284 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:08" (3/6) ...
[2020-11-25 03:29:10,284 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4274bd1a and model type RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:29:10, skipping insertion in model container
[2020-11-25 03:29:10,284 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:10,284 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:08" (4/6) ...
[2020-11-25 03:29:10,284 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4274bd1a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:29:10, skipping insertion in model container
[2020-11-25 03:29:10,284 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:10,284 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:10" (5/6) ...
[2020-11-25 03:29:10,285 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4274bd1a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:29:10, skipping insertion in model container
[2020-11-25 03:29:10,285 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:10,285 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:29:10" (6/6) ...
[2020-11-25 03:29:10,286 INFO  L404   chiAutomizerObserver]: Analyzing ICFG RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transferfrom-self-fail.bpl_BEv2
[2020-11-25 03:29:10,319 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:29:10,319 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:29:10,319 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:29:10,319 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:29:10,319 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:29:10,320 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:29:10,320 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:29:10,320 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:29:10,320 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:29:10,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7282 states.
[2020-11-25 03:29:10,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:10,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:10,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:10,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:10,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:10,445 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:29:10,445 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7282 states.
[2020-11-25 03:29:10,475 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:10,476 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:10,476 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:10,477 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:10,477 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:29:10,491 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:10,491 INFO  L82        PathProgramCache]: Analyzing trace with hash 1528784590, now seen corresponding path program 1 times
[2020-11-25 03:29:10,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:10,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:10,559 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:29:10,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:10,561 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:29:10,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:10,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:29:10,966 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:29:10,968 INFO  L87              Difference]: Start difference. First operand 7282 states. Second operand 4 states.
[2020-11-25 03:29:11,777 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:11,777 INFO  L93              Difference]: Finished difference Result 4328 states and 5343 transitions.
[2020-11-25 03:29:11,777 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:29:11,778 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4328 states and 5343 transitions.
[2020-11-25 03:29:11,802 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:11,830 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4328 states to 4328 states and 5343 transitions.
[2020-11-25 03:29:11,831 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 03:29:11,834 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 915
[2020-11-25 03:29:11,834 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4328 states and 5343 transitions.
[2020-11-25 03:29:11,847 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:11,847 INFO  L728         BuchiCegarLoop]: Abstraction has 4328 states and 5343 transitions.
[2020-11-25 03:29:11,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4328 states and 5343 transitions.
[2020-11-25 03:29:11,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4328 to 4328.
[2020-11-25 03:29:11,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4328 states.
[2020-11-25 03:29:11,935 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4328 states to 4328 states and 5343 transitions.
[2020-11-25 03:29:11,936 INFO  L751         BuchiCegarLoop]: Abstraction has 4328 states and 5343 transitions.
[2020-11-25 03:29:11,936 INFO  L631         BuchiCegarLoop]: Abstraction has 4328 states and 5343 transitions.
[2020-11-25 03:29:11,936 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:29:11,937 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4328 states and 5343 transitions.
[2020-11-25 03:29:11,947 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:11,947 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:11,947 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:11,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:11,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND TRUE   revert
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND TRUE   revert
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:29:11,953 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:11,953 INFO  L82        PathProgramCache]: Analyzing trace with hash 30959677, now seen corresponding path program 1 times
[2020-11-25 03:29:11,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:11,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:11,990 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:29:11,990 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:11,990 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:29:11,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:11,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:29:11,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:29:11,992 INFO  L87              Difference]: Start difference. First operand 4328 states and 5343 transitions. cyclomatic complexity: 1017 Second operand 4 states.
[2020-11-25 03:29:13,632 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:13,632 INFO  L93              Difference]: Finished difference Result 5543 states and 6459 transitions.
[2020-11-25 03:29:13,632 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:29:13,633 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5543 states and 6459 transitions.
[2020-11-25 03:29:13,652 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:13,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5543 states to 5163 states and 5999 transitions.
[2020-11-25 03:29:13,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1142
[2020-11-25 03:29:13,679 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1170
[2020-11-25 03:29:13,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5163 states and 5999 transitions.
[2020-11-25 03:29:13,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:13,685 INFO  L728         BuchiCegarLoop]: Abstraction has 5163 states and 5999 transitions.
[2020-11-25 03:29:13,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5163 states and 5999 transitions.
[2020-11-25 03:29:13,744 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5163 to 4743.
[2020-11-25 03:29:13,744 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4743 states.
[2020-11-25 03:29:13,751 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4743 states to 4743 states and 5470 transitions.
[2020-11-25 03:29:13,751 INFO  L751         BuchiCegarLoop]: Abstraction has 4743 states and 5470 transitions.
[2020-11-25 03:29:13,751 INFO  L631         BuchiCegarLoop]: Abstraction has 4743 states and 5470 transitions.
[2020-11-25 03:29:13,751 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:29:13,752 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4743 states and 5470 transitions.
[2020-11-25 03:29:13,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:13,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:13,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:13,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:13,766 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:29:13,776 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:13,776 INFO  L82        PathProgramCache]: Analyzing trace with hash 1481091704, now seen corresponding path program 1 times
[2020-11-25 03:29:13,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:13,810 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:14,168 INFO  L134       CoverageAnalysis]: Checked inductivity of 717 backedges. 12 proven. 0 refuted. 0 times theorem prover too weak. 705 trivial. 0 not checked.
[2020-11-25 03:29:14,169 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:14,169 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 03:29:14,170 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:14,170 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 03:29:14,170 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=303, Unknown=0, NotChecked=0, Total=342
[2020-11-25 03:29:14,171 INFO  L87              Difference]: Start difference. First operand 4743 states and 5470 transitions. cyclomatic complexity: 729 Second operand 19 states.
[2020-11-25 03:29:17,857 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:17,857 INFO  L93              Difference]: Finished difference Result 4851 states and 5591 transitions.
[2020-11-25 03:29:17,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 03:29:17,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4851 states and 5591 transitions.
[2020-11-25 03:29:17,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:17,882 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4851 states to 4851 states and 5591 transitions.
[2020-11-25 03:29:17,882 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1138
[2020-11-25 03:29:17,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1138
[2020-11-25 03:29:17,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4851 states and 5591 transitions.
[2020-11-25 03:29:17,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:17,887 INFO  L728         BuchiCegarLoop]: Abstraction has 4851 states and 5591 transitions.
[2020-11-25 03:29:17,891 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4851 states and 5591 transitions.
[2020-11-25 03:29:17,921 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4851 to 4618.
[2020-11-25 03:29:17,921 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4618 states.
[2020-11-25 03:29:17,926 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4618 states to 4618 states and 5307 transitions.
[2020-11-25 03:29:17,926 INFO  L751         BuchiCegarLoop]: Abstraction has 4618 states and 5307 transitions.
[2020-11-25 03:29:17,926 INFO  L631         BuchiCegarLoop]: Abstraction has 4618 states and 5307 transitions.
[2020-11-25 03:29:17,926 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:29:17,926 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4618 states and 5307 transitions.
[2020-11-25 03:29:17,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:17,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:17,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:17,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:17,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND TRUE   __exception
[L1727]              __tmp__Balance := Balance;
[L1728]              __tmp__DType := DType;
[L1729]              __tmp__Alloc := Alloc;
[L1730]              __tmp__balance_ADDR := balance_ADDR;
[L1731]              __tmp__M_Ref_int := M_Ref_int;
[L1732]              __tmp__sum__balances0 := sum__balances0;
[L1733]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1734]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1735]              __tmp__sum__allowances1 := sum__allowances1;
[L1736]              __tmp__Length := Length;
[L1737]              __tmp__now := now;
[L1738]              __tmp___owner_Ownable := _owner_Ownable;
[L1739]              __tmp___paused_Pausable := _paused_Pausable;
[L1740]              __tmp___balances_ERC20 := _balances_ERC20;
[L1741]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1742]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1743]              __tmp__name_RariToken := name_RariToken;
[L1744]              __tmp__symbol_RariToken := symbol_RariToken;
[L1745]              __tmp__decimals_RariToken := decimals_RariToken;
[L1746]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1747]  CALL        call RariToken_RariToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4943]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L4943]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4944]  COND FALSE  !(revert)
[L4947]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L4947]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]  COND FALSE  !(revert)
[L4951]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3239]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3239]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3240]  COND FALSE  !(revert)
[L3243]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L3243]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3220]              assume msgsender_MSG != null;
[L3221]              __tmp__Balance[this] := 0;
[L3222]              __tmp___paused_Pausable[this] := false;
[L3224]              __tmp___paused_Pausable[this] := false;
[L3247]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L4951]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4952]  COND FALSE  !(revert)
[L4955]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L4955]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4956]  COND FALSE  !(revert)
[L4959]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3551]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3551]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3552]  COND FALSE  !(revert)
[L3555]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3526]              assume msgsender_MSG != null;
[L3527]              __tmp__Balance[this] := 0;
[L3528]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3529]              __tmp__sum__balances0[this] := 0;
[L3530]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3531]              __tmp__sum__allowances1[this] := 0;
[L3532]              __tmp___totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4959]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4960]  COND FALSE  !(revert)
[L4963]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4613]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L4613]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4614]  COND FALSE  !(revert)
[L4617]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L4617]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4618]  COND FALSE  !(revert)
[L4621]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3239]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3239]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3240]  COND FALSE  !(revert)
[L3243]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L3243]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3220]              assume msgsender_MSG != null;
[L3221]              __tmp__Balance[this] := 0;
[L3222]              __tmp___paused_Pausable[this] := false;
[L3224]              __tmp___paused_Pausable[this] := false;
[L3247]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L4621]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4622]  COND FALSE  !(revert)
[L4625]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L4625]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4626]  COND FALSE  !(revert)
[L4629]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3551]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3551]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3552]  COND FALSE  !(revert)
[L3555]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3526]              assume msgsender_MSG != null;
[L3527]              __tmp__Balance[this] := 0;
[L3528]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3529]              __tmp__sum__balances0[this] := 0;
[L3530]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3531]              __tmp__sum__allowances1[this] := 0;
[L3532]              __tmp___totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4629]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4630]  COND FALSE  !(revert)
[L4633]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4598]              assume msgsender_MSG != null;
[L4599]              __tmp__Balance[this] := 0;
[L4633]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4963]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4964]  COND FALSE  !(revert)
[L4967]  CALL        call RariToken_RariToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4920]              assume msgsender_MSG != null;
[L4921]              __tmp__Balance[this] := 0;
[L4922]              __tmp__name_RariToken[this] := 920169039;
[L4923]              __tmp__symbol_RariToken[this] := 1865763617;
[L4924]              __tmp__decimals_RariToken[this] := 18;
[L4925]              __tmp__mintStopped_RariToken[this] := false;
[L4967]  RET         call RariToken_RariToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4968]  COND FALSE  !(revert)
[L1747]  RET         call RariToken_RariToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1748]              assume revert || gas < 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND FALSE  !(DType[this] == RariToken)
[L3920]  COND TRUE   DType[this] == ERC20Pausable
[L3921]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3921]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:29:17,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:17,940 INFO  L82        PathProgramCache]: Analyzing trace with hash -1593879159, now seen corresponding path program 1 times
[2020-11-25 03:29:17,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:17,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:18,119 INFO  L134       CoverageAnalysis]: Checked inductivity of 711 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 711 trivial. 0 not checked.
[2020-11-25 03:29:18,119 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:18,120 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:29:18,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:18,120 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:18,121 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:18,121 INFO  L87              Difference]: Start difference. First operand 4618 states and 5307 transitions. cyclomatic complexity: 692 Second operand 3 states.
[2020-11-25 03:29:18,184 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:18,184 INFO  L93              Difference]: Finished difference Result 4636 states and 5329 transitions.
[2020-11-25 03:29:18,184 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:18,184 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4636 states and 5329 transitions.
[2020-11-25 03:29:18,197 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:18,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4636 states to 4636 states and 5329 transitions.
[2020-11-25 03:29:18,216 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1039
[2020-11-25 03:29:18,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1039
[2020-11-25 03:29:18,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4636 states and 5329 transitions.
[2020-11-25 03:29:18,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:18,223 INFO  L728         BuchiCegarLoop]: Abstraction has 4636 states and 5329 transitions.
[2020-11-25 03:29:18,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4636 states and 5329 transitions.
[2020-11-25 03:29:18,259 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4636 to 4630.
[2020-11-25 03:29:18,259 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4630 states.
[2020-11-25 03:29:18,264 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4630 states to 4630 states and 5321 transitions.
[2020-11-25 03:29:18,264 INFO  L751         BuchiCegarLoop]: Abstraction has 4630 states and 5321 transitions.
[2020-11-25 03:29:18,264 INFO  L631         BuchiCegarLoop]: Abstraction has 4630 states and 5321 transitions.
[2020-11-25 03:29:18,264 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:29:18,264 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4630 states and 5321 transitions.
[2020-11-25 03:29:18,269 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:18,269 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:18,269 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:18,272 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:18,272 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND TRUE   __exception
[L1727]              __tmp__Balance := Balance;
[L1728]              __tmp__DType := DType;
[L1729]              __tmp__Alloc := Alloc;
[L1730]              __tmp__balance_ADDR := balance_ADDR;
[L1731]              __tmp__M_Ref_int := M_Ref_int;
[L1732]              __tmp__sum__balances0 := sum__balances0;
[L1733]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1734]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1735]              __tmp__sum__allowances1 := sum__allowances1;
[L1736]              __tmp__Length := Length;
[L1737]              __tmp__now := now;
[L1738]              __tmp___owner_Ownable := _owner_Ownable;
[L1739]              __tmp___paused_Pausable := _paused_Pausable;
[L1740]              __tmp___balances_ERC20 := _balances_ERC20;
[L1741]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1742]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1743]              __tmp__name_RariToken := name_RariToken;
[L1744]              __tmp__symbol_RariToken := symbol_RariToken;
[L1745]              __tmp__decimals_RariToken := decimals_RariToken;
[L1746]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1747]  CALL        call RariToken_RariToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4943]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L4943]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4944]  COND FALSE  !(revert)
[L4947]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L4947]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]  COND FALSE  !(revert)
[L4951]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3239]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3239]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3240]  COND FALSE  !(revert)
[L3243]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L3243]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3220]              assume msgsender_MSG != null;
[L3221]              __tmp__Balance[this] := 0;
[L3222]              __tmp___paused_Pausable[this] := false;
[L3224]              __tmp___paused_Pausable[this] := false;
[L3247]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L4951]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4952]  COND FALSE  !(revert)
[L4955]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L4955]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4956]  COND FALSE  !(revert)
[L4959]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3551]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3551]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3552]  COND FALSE  !(revert)
[L3555]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3526]              assume msgsender_MSG != null;
[L3527]              __tmp__Balance[this] := 0;
[L3528]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3529]              __tmp__sum__balances0[this] := 0;
[L3530]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3531]              __tmp__sum__allowances1[this] := 0;
[L3532]              __tmp___totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4959]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4960]  COND FALSE  !(revert)
[L4963]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4613]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L4613]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4614]  COND FALSE  !(revert)
[L4617]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L4617]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4618]  COND FALSE  !(revert)
[L4621]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3239]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3239]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3240]  COND FALSE  !(revert)
[L3243]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L3243]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3220]              assume msgsender_MSG != null;
[L3221]              __tmp__Balance[this] := 0;
[L3222]              __tmp___paused_Pausable[this] := false;
[L3224]              __tmp___paused_Pausable[this] := false;
[L3247]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L4621]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4622]  COND FALSE  !(revert)
[L4625]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L4625]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4626]  COND FALSE  !(revert)
[L4629]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3551]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3551]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3552]  COND FALSE  !(revert)
[L3555]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3526]              assume msgsender_MSG != null;
[L3527]              __tmp__Balance[this] := 0;
[L3528]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3529]              __tmp__sum__balances0[this] := 0;
[L3530]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3531]              __tmp__sum__allowances1[this] := 0;
[L3532]              __tmp___totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4629]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4630]  COND FALSE  !(revert)
[L4633]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4598]              assume msgsender_MSG != null;
[L4599]              __tmp__Balance[this] := 0;
[L4633]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4963]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4964]  COND FALSE  !(revert)
[L4967]  CALL        call RariToken_RariToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4920]              assume msgsender_MSG != null;
[L4921]              __tmp__Balance[this] := 0;
[L4922]              __tmp__name_RariToken[this] := 920169039;
[L4923]              __tmp__symbol_RariToken[this] := 1865763617;
[L4924]              __tmp__decimals_RariToken[this] := 18;
[L4925]              __tmp__mintStopped_RariToken[this] := false;
[L4967]  RET         call RariToken_RariToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4968]  COND FALSE  !(revert)
[L1747]  RET         call RariToken_RariToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1748]              assume revert || gas < 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:29:18,278 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:18,278 INFO  L82        PathProgramCache]: Analyzing trace with hash 1146202516, now seen corresponding path program 1 times
[2020-11-25 03:29:18,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:18,293 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:18,416 INFO  L134       CoverageAnalysis]: Checked inductivity of 711 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 711 trivial. 0 not checked.
[2020-11-25 03:29:18,416 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:18,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:29:18,417 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:18,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:29:18,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:29:18,417 INFO  L87              Difference]: Start difference. First operand 4630 states and 5321 transitions. cyclomatic complexity: 694 Second operand 4 states.
[2020-11-25 03:29:18,953 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:18,953 INFO  L93              Difference]: Finished difference Result 5441 states and 6352 transitions.
[2020-11-25 03:29:18,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:29:18,954 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5441 states and 6352 transitions.
[2020-11-25 03:29:18,965 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 03:29:18,978 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5441 states to 5245 states and 6139 transitions.
[2020-11-25 03:29:18,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1245
[2020-11-25 03:29:18,978 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1245
[2020-11-25 03:29:18,979 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5245 states and 6139 transitions.
[2020-11-25 03:29:18,983 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:18,983 INFO  L728         BuchiCegarLoop]: Abstraction has 5245 states and 6139 transitions.
[2020-11-25 03:29:18,986 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5245 states and 6139 transitions.
[2020-11-25 03:29:19,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5245 to 4434.
[2020-11-25 03:29:19,012 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4434 states.
[2020-11-25 03:29:19,016 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4434 states to 4434 states and 5107 transitions.
[2020-11-25 03:29:19,016 INFO  L751         BuchiCegarLoop]: Abstraction has 4434 states and 5107 transitions.
[2020-11-25 03:29:19,016 INFO  L631         BuchiCegarLoop]: Abstraction has 4434 states and 5107 transitions.
[2020-11-25 03:29:19,016 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:29:19,016 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4434 states and 5107 transitions.
[2020-11-25 03:29:19,021 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:19,021 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:19,021 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:19,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:19,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND TRUE   choice == 10
[L7364]              gas := gas - 21000;
[L7365]  COND TRUE   gas >= 0
[L7366]              assume value_s880 >= 0 && value_s880 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7367]              assume msgvalue_MSG == 0;
[L7368]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s880, value_s880);
[L1530]              havoc __exception;
[L1531]              revert := false;
[L1532]  COND FALSE  !(__exception)
[L1556]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s880, value_s880);
[L4796]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4796]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4797]  COND FALSE  !(revert)
[L4800]  COND TRUE   DType[this] == RariToken
[L4801]  CALL        call __var_35 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s880, value_s880);
[L3749]  COND TRUE   DType[this] == RariToken
[L3750]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3750]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3751]  COND FALSE  !(revert)
[L3767]  COND TRUE   DType[this] == RariToken
[L3768]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_6, spender_s509, amount_s509);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3768]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_6, spender_s509, amount_s509);
[L3769]  COND FALSE  !(revert)
[L3785]              __ret_0_ := true;
[L4801]  RET         call __var_35 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s880, value_s880);
[L4802]  COND FALSE  !(revert)
[L4813]              __ret_0_ := __var_35;
[L1556]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s880, value_s880);
[L1557]              assume !revert && gas >= 0;
[L7368]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s880, value_s880);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s862 == to_s862 && (value_s862 > _balances_ERC20[this][from_s862] || value_s862 > _allowances_ERC20[this][from_s862][msgsender_MSG])) && value_s862 >= 0) && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s862] >= 0) && _balances_ERC20[this][to_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s862] >= 0) && _balances_ERC20[this][from_s862] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s862][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s862][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:29:19,028 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:19,028 INFO  L82        PathProgramCache]: Analyzing trace with hash -409449485, now seen corresponding path program 1 times
[2020-11-25 03:29:19,029 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:19,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:19,289 INFO  L134       CoverageAnalysis]: Checked inductivity of 795 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 793 trivial. 0 not checked.
[2020-11-25 03:29:19,290 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:19,290 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 03:29:19,290 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:19,290 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 03:29:19,290 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=151, Unknown=0, NotChecked=0, Total=182
[2020-11-25 03:29:19,290 INFO  L87              Difference]: Start difference. First operand 4434 states and 5107 transitions. cyclomatic complexity: 676 Second operand 14 states.
[2020-11-25 03:29:20,654 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:20,654 INFO  L93              Difference]: Finished difference Result 2581 states and 2967 transitions.
[2020-11-25 03:29:20,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 03:29:20,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2581 states and 2967 transitions.
[2020-11-25 03:29:20,658 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:29:20,658 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2581 states to 0 states and 0 transitions.
[2020-11-25 03:29:20,658 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:29:20,658 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:29:20,658 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:29:20,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:20,658 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:29:20,658 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:29:20,658 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:29:20,658 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:29:20,658 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:29:20,658 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:29:20,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:29:20,661 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:29:20 BasicIcfg
[2020-11-25 03:29:20,661 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:29:20,661 INFO  L168              Benchmark]: Toolchain (without parser) took 13873.77 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 1.0 GB). Free memory was 929.8 MB in the beginning and 1.5 GB in the end (delta: -612.9 MB). Peak memory consumption was 402.2 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,662 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,662 INFO  L168              Benchmark]: Boogie Preprocessor took 120.96 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,662 INFO  L168              Benchmark]: UtopiaSpecLang took 66.41 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,663 INFO  L168              Benchmark]: Boogie Printer took 21.07 ms. Allocated memory is still 1.0 GB. Free memory is still 903.0 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,664 INFO  L168              Benchmark]: RCFGBuilder took 1075.98 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 903.0 MB in the beginning and 973.9 MB in the end (delta: -70.9 MB). Peak memory consumption was 191.0 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,664 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.01 ms. Allocated memory is still 1.1 GB. Free memory was 973.9 MB in the beginning and 970.4 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,664 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1969.05 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 163.6 MB). Free memory was 970.4 MB in the beginning and 836.4 MB in the end (delta: 134.0 MB). Peak memory consumption was 475.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,664 INFO  L168              Benchmark]: BlockEncodingV2 took 194.46 ms. Allocated memory is still 1.3 GB. Free memory was 836.4 MB in the beginning and 723.3 MB in the end (delta: 113.1 MB). Peak memory consumption was 113.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,665 INFO  L168              Benchmark]: BuchiAutomizer took 10380.94 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 790.6 MB). Free memory was 723.3 MB in the beginning and 1.5 GB in the end (delta: -819.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:29:20,667 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7466 locations, 14042 edges
  - StatisticsResult: Encoded RCFG
    7282 locations, 13541 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 120.96 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 66.41 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.07 ms. Allocated memory is still 1.0 GB. Free memory is still 903.0 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 1075.98 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 903.0 MB in the beginning and 973.9 MB in the end (delta: -70.9 MB). Peak memory consumption was 191.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.01 ms. Allocated memory is still 1.1 GB. Free memory was 973.9 MB in the beginning and 970.4 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1969.05 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 163.6 MB). Free memory was 970.4 MB in the beginning and 836.4 MB in the end (delta: 134.0 MB). Peak memory consumption was 475.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 194.46 ms. Allocated memory is still 1.3 GB. Free memory was 836.4 MB in the beginning and 723.3 MB in the end (delta: 113.1 MB). Peak memory consumption was 113.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 10380.94 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 790.6 MB). Free memory was 723.3 MB in the beginning and 1.5 GB in the end (delta: -819.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2840 locations, 4270 edges
  - StatisticsResult: BuchiProgram size
    7466 locations, 14042 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 10.3s and 7 iterations.  TraceHistogramMax:10. Analysis of lassos took 1.5s. Construction of modules took 6.2s. BÃ¼chi inclusion checks took 1.8s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 5 MinimizatonAttempts, 1470 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 4743 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 28163 SDtfs, 22857 SDslu, 41791 SDs, 0 SdLazy, 86174 SolverSat, 3949 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC20Pausable0) ==> ( <>(fail_transferFrom_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
