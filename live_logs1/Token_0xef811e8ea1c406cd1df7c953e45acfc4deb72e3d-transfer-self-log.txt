This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:59:55,279 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:59:55,281 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:59:55,298 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:59:55,298 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:59:55,299 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:59:55,300 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:59:55,301 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:59:55,303 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:59:55,303 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:59:55,304 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:59:55,304 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:59:55,305 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:59:55,306 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:59:55,306 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:59:55,307 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:59:55,308 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:59:55,309 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:59:55,310 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:59:55,311 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:59:55,312 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:59:55,313 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:59:55,314 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:59:55,315 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:59:55,315 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:59:55,315 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:59:55,316 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:59:55,316 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:59:55,316 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:59:55,317 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:59:55,317 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:59:55,318 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:59:55,318 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:59:55,319 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:59:55,319 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:59:55,319 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:59:55,320 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:59:55,320 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:59:55,320 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:59:55,321 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:59:55,321 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:59:55,322 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:59:55,329 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:59:55,330 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:59:55,330 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:59:55,331 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:59:55,331 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:59:55,331 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:59:55,331 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:59:55,331 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:59:55,331 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:59:55,331 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:59:55,331 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:59:55,332 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:59:55,332 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:59:55,333 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:59:55,333 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:59:55,333 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:59:55,333 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:59:55,333 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:59:55,333 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:59:55,333 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:59:55,353 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:59:55,365 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:59:55,370 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:59:55,372 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:59:55,372 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:59:55,373 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl
[2020-11-25 05:59:55,373 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl'
[2020-11-25 05:59:55,436 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:59:55,437 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:59:55,437 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:59:55,438 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:59:55,438 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:59:55,453 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,455 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,478 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,479 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,493 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,500 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,505 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,512 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:59:55,513 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:59:55,513 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:59:55,515 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:59:55,518 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/1) ...
[2020-11-25 05:59:55,531 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Token.transfer(to, value), msg.sender == to && value <= _balances_Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][msg.sender] >= 0 &&  _balances_Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Token.transfer(to, value), return == true && _totalSupply_Token[this] == old(_totalSupply_Token[this]) && _balances_Token[this] == old(_balances_Token[this]) && _allowed_Token[this] == old(_allowed_Token[this]))))
[2020-11-25 05:59:55,537 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Token.transfer(to, value), msg.sender == to && value <= _balances_Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][msg.sender] >= 0 &&  _balances_Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Token.transfer(to, value), return == true && _totalSupply_Token[this] == old(_totalSupply_Token[this]) && _balances_Token[this] == old(_balances_Token[this]) && _allowed_Token[this] == old(_allowed_Token[this]))))
[2020-11-25 05:59:55,544 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Token.transfer(to, value), msg.sender == to && value <= _balances_Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][msg.sender] >= 0 &&  _balances_Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Token.transfer(to, value), return == true && _totalSupply_Token[this] == old(_totalSupply_Token[this]) && _balances_Token[this] == old(_balances_Token[this]) && _allowed_Token[this] == old(_allowed_Token[this]))))
[2020-11-25 05:59:55,550 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s316 && value_s316<=_balances_Token[this][msg.sender] ) && value_s316>=0 ) && value_s316<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_Token[this][to_s316]>=0 ) && _balances_Token[this][to_s316]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_Token[this][msg.sender]>=0 ) && _balances_Token[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>],IdentifierExpression[to_s316,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s316,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s316,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s316,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],[IdentifierExpression[to_s316,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],[IdentifierExpression[to_s316,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 05:59:55,552 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( __ret_0_==true && _totalSupply_Token[this]==( old(_totalSupply_Token[this]) ) ) && _balances_Token[this]==( old(_balances_Token[this]) ) ) && _allowed_Token[this]==( old(_allowed_Token[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_Token>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Token>]]]]]]
[2020-11-25 05:59:55,556 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Token.transfer(to, value), msg.sender == to && value <= _balances_Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][to] >= 0 && _balances_Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_Token[this][msg.sender] >= 0 &&  _balances_Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Token.transfer(to, value), return == true && _totalSupply_Token[this] == old(_totalSupply_Token[this]) && _balances_Token[this] == old(_balances_Token[this]) && _allowed_Token[this] == old(_allowed_Token[this]))))
[2020-11-25 05:59:55,556 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_Token0) ==> ( <>AP(success_transfer_Token0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:59:55,562 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:55 PropertyContainer
[2020-11-25 05:59:55,562 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:59:55,562 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:59:55,562 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:59:55,562 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:59:55,563 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/2) ...
[2020-11-25 05:59:55,563 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:59:55,563 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:59:55,572 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:55" (2/2) ...
[2020-11-25 05:59:55,572 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:59:55,573 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:59:55,573 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:59:55,573 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:59:55,573 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/2) ...
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 05:59:55,628 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,628 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 05:59:55,629 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__success
[2020-11-25 05:59:55,629 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token
[2020-11-25 05:59:55,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token
[2020-11-25 05:59:55,630 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Token
[2020-11-25 05:59:55,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Token
[2020-11-25 05:59:55,630 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Token
[2020-11-25 05:59:55,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Token
[2020-11-25 05:59:55,630 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Token
[2020-11-25 05:59:55,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Token
[2020-11-25 05:59:55,630 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Token
[2020-11-25 05:59:55,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Token
[2020-11-25 05:59:55,630 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Token
[2020-11-25 05:59:55,630 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_Token
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_Token__success
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_Token__success
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Token
[2020-11-25 05:59:55,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Token
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Token
[2020-11-25 05:59:55,631 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Token
[2020-11-25 05:59:55,631 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Token
[2020-11-25 05:59:55,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Token
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Token
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 05:59:55,632 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__success
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure Token_Token__fail
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Token__success
[2020-11-25 05:59:55,633 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Token__fail
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Token__success
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Token__fail
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Token__success
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Token__fail
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Token__success
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Token__fail
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Token__success
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Token__fail
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Token__success
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Token__fail
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_Token__success
[2020-11-25 05:59:55,634 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_Token__success
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Token__success
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Token__success
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Token__success
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Token__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:59:55,635 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:59:55,636 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__fail
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token_NoBaseCtor__success
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__fail
[2020-11-25 05:59:55,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure Token_Token__success
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Token__fail
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Token__success
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Token__fail
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Token__success
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Token__fail
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Token__success
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Token__fail
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Token__success
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Token__fail
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Token__success
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Token__fail
[2020-11-25 05:59:55,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Token__success
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_Token__fail
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_Token__success
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_Token__fail
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_Token__success
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_Token__fail
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_Token__success
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_Token__fail
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_Token__success
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Token__fail
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Token__success
[2020-11-25 05:59:55,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Token__fail
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Token__success
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Token__fail
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Token__success
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 05:59:55,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 05:59:55,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 05:59:55,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Token
[2020-11-25 05:59:55,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:59:55,641 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:59:55,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:59:55,851 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:59:55,851 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:59:55,854 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:59:56,166 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:59:56,166 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 05:59:56,167 INFO  L202        PluginConnector]: Adding new model Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:56 BoogieIcfgContainer
[2020-11-25 05:59:56,168 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:55" (2/2) ...
[2020-11-25 05:59:56,168 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:59:56,168 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3e8e24b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:56, skipping insertion in model container
[2020-11-25 05:59:56,168 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:59:56,168 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:59:56,169 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:59:56,170 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:59:56,170 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/3) ...
[2020-11-25 05:59:56,170 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@28f4f267 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:56, skipping insertion in model container
[2020-11-25 05:59:56,171 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:55" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:59:56,206 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:56 NWAContainer
[2020-11-25 05:59:56,206 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:59:56,207 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:59:56,207 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:59:56,207 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:59:56,208 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:56" (3/4) ...
[2020-11-25 05:59:56,209 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@77f0d175 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:56, skipping insertion in model container
[2020-11-25 05:59:56,209 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:56" (4/4) ...
[2020-11-25 05:59:56,212 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:59:56,216 INFO  L110   BuchiProductObserver]: Initial RCFG 826 locations, 1043 edges
[2020-11-25 05:59:56,216 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:59:56,228 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:59:57,132 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:59:57,134 INFO  L110   BuchiProductObserver]: BuchiProgram size 2004 locations, 3389 edges
[2020-11-25 05:59:57,134 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:57 BoogieIcfgContainer
[2020-11-25 05:59:57,134 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:59:57,135 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:59:57,135 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:59:57,136 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:59:57,136 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:57" (1/1) ...
[2020-11-25 05:59:57,179 INFO  L313           BlockEncoder]: Initial Icfg 2004 locations, 3389 edges
[2020-11-25 05:59:57,179 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:59:57,179 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:59:57,179 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:59:57,180 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:59:57,186 INFO  L70    emoveInfeasibleEdges]: Removed 33 edges and 9 locations because of local infeasibility
[2020-11-25 05:59:57,190 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 05:59:57,195 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:59:57,197 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:59:57,198 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:59:57,198 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:59:57,200 INFO  L313           BlockEncoder]: Encoded RCFG 1982 locations, 3337 edges
[2020-11-25 05:59:57,201 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:59:57 BasicIcfg
[2020-11-25 05:59:57,201 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:59:57,201 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:59:57,201 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:59:57,203 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:59:57,203 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:57,203 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:59:55" (1/6) ...
[2020-11-25 05:59:57,204 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@53de0406 and model type Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:59:57, skipping insertion in model container
[2020-11-25 05:59:57,205 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:57,205 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:59:55" (2/6) ...
[2020-11-25 05:59:57,205 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@53de0406 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:59:57, skipping insertion in model container
[2020-11-25 05:59:57,205 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:57,205 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:59:56" (3/6) ...
[2020-11-25 05:59:57,205 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@53de0406 and model type Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:59:57, skipping insertion in model container
[2020-11-25 05:59:57,205 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:57,205 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:59:56" (4/6) ...
[2020-11-25 05:59:57,205 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@53de0406 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:59:57, skipping insertion in model container
[2020-11-25 05:59:57,205 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:57,205 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:59:57" (5/6) ...
[2020-11-25 05:59:57,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@53de0406 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:59:57, skipping insertion in model container
[2020-11-25 05:59:57,206 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:59:57,206 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:59:57" (6/6) ...
[2020-11-25 05:59:57,207 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Token_0xef811e8ea1c406cd1df7c953e45acfc4deb72e3d_transfer-self.bpl_BEv2
[2020-11-25 05:59:57,240 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:59:57,241 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:59:57,241 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:59:57,241 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:59:57,241 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:59:57,241 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:59:57,241 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:59:57,241 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:59:57,241 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:59:57,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1982 states.
[2020-11-25 05:59:57,295 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:57,295 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:57,295 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:57,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:57,303 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:57,303 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:59:57,303 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1982 states.
[2020-11-25 05:59:57,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:57,312 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:57,312 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:57,314 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:57,314 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND TRUE   revert
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:57,326 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:57,326 INFO  L82        PathProgramCache]: Analyzing trace with hash 1751879931, now seen corresponding path program 1 times
[2020-11-25 05:59:57,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:57,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:57,400 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:57,402 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:57,402 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:59:57,406 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:57,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:59:57,510 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:59:57,511 INFO  L87              Difference]: Start difference. First operand 1982 states. Second operand 3 states.
[2020-11-25 05:59:57,634 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:57,634 INFO  L93              Difference]: Finished difference Result 2202 states and 3538 transitions.
[2020-11-25 05:59:57,634 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:59:57,636 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2202 states and 3538 transitions.
[2020-11-25 05:59:57,653 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:57,680 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2202 states to 2202 states and 3538 transitions.
[2020-11-25 05:59:57,680 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 05:59:57,684 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-11-25 05:59:57,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2202 states and 3538 transitions.
[2020-11-25 05:59:57,697 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:57,697 INFO  L728         BuchiCegarLoop]: Abstraction has 2202 states and 3538 transitions.
[2020-11-25 05:59:57,714 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2202 states and 3538 transitions.
[2020-11-25 05:59:57,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2202 to 1792.
[2020-11-25 05:59:57,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1792 states.
[2020-11-25 05:59:57,766 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1792 states to 1792 states and 2834 transitions.
[2020-11-25 05:59:57,767 INFO  L751         BuchiCegarLoop]: Abstraction has 1792 states and 2834 transitions.
[2020-11-25 05:59:57,767 INFO  L631         BuchiCegarLoop]: Abstraction has 1792 states and 2834 transitions.
[2020-11-25 05:59:57,767 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:59:57,767 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1792 states and 2834 transitions.
[2020-11-25 05:59:57,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:57,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:57,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:57,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:57,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND TRUE   !(c_s106 >= a_s106)
[L1242]              revert := true;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND TRUE   revert
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:57,776 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:57,776 INFO  L82        PathProgramCache]: Analyzing trace with hash 190826292, now seen corresponding path program 1 times
[2020-11-25 05:59:57,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:57,784 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:57,796 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:57,796 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:57,796 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:59:57,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:57,797 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:59:57,797 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:59:57,798 INFO  L87              Difference]: Start difference. First operand 1792 states and 2834 transitions. cyclomatic complexity: 1044 Second operand 4 states.
[2020-11-25 05:59:57,979 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:57,979 INFO  L93              Difference]: Finished difference Result 1650 states and 1851 transitions.
[2020-11-25 05:59:57,979 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:59:57,980 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1650 states and 1851 transitions.
[2020-11-25 05:59:57,988 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:57,996 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1650 states to 1650 states and 1851 transitions.
[2020-11-25 05:59:57,996 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 474
[2020-11-25 05:59:57,996 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 474
[2020-11-25 05:59:57,997 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1650 states and 1851 transitions.
[2020-11-25 05:59:57,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:57,999 INFO  L728         BuchiCegarLoop]: Abstraction has 1650 states and 1851 transitions.
[2020-11-25 05:59:58,001 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1650 states and 1851 transitions.
[2020-11-25 05:59:58,016 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1650 to 1650.
[2020-11-25 05:59:58,016 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1650 states.
[2020-11-25 05:59:58,021 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1650 states to 1650 states and 1851 transitions.
[2020-11-25 05:59:58,021 INFO  L751         BuchiCegarLoop]: Abstraction has 1650 states and 1851 transitions.
[2020-11-25 05:59:58,021 INFO  L631         BuchiCegarLoop]: Abstraction has 1650 states and 1851 transitions.
[2020-11-25 05:59:58,021 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:59:58,021 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1650 states and 1851 transitions.
[2020-11-25 05:59:58,026 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:58,026 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:58,026 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:58,028 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:58,028 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND TRUE   !(c_s106 >= a_s106)
[L1242]              revert := true;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND TRUE   revert
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND TRUE   !(to_s470 != null)
[L1591]              revert := true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND TRUE   revert
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND TRUE   !(to_s470 != null)
[L1591]              revert := true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND TRUE   revert
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:58,032 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:58,032 INFO  L82        PathProgramCache]: Analyzing trace with hash -1804548331, now seen corresponding path program 1 times
[2020-11-25 05:59:58,033 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:58,044 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:58,069 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:58,069 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:58,069 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:59:58,070 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:58,070 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:59:58,070 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:59:58,070 INFO  L87              Difference]: Start difference. First operand 1650 states and 1851 transitions. cyclomatic complexity: 203 Second operand 3 states.
[2020-11-25 05:59:58,120 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:58,120 INFO  L93              Difference]: Finished difference Result 2048 states and 2275 transitions.
[2020-11-25 05:59:58,120 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:59:58,120 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2048 states and 2275 transitions.
[2020-11-25 05:59:58,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:59:58,142 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2048 states to 1914 states and 2127 transitions.
[2020-11-25 05:59:58,142 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 551
[2020-11-25 05:59:58,142 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 566
[2020-11-25 05:59:58,143 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1914 states and 2127 transitions.
[2020-11-25 05:59:58,145 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:58,145 INFO  L728         BuchiCegarLoop]: Abstraction has 1914 states and 2127 transitions.
[2020-11-25 05:59:58,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1914 states and 2127 transitions.
[2020-11-25 05:59:58,164 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1914 to 1568.
[2020-11-25 05:59:58,164 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1568 states.
[2020-11-25 05:59:58,167 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1568 states to 1568 states and 1695 transitions.
[2020-11-25 05:59:58,168 INFO  L751         BuchiCegarLoop]: Abstraction has 1568 states and 1695 transitions.
[2020-11-25 05:59:58,168 INFO  L631         BuchiCegarLoop]: Abstraction has 1568 states and 1695 transitions.
[2020-11-25 05:59:58,168 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:59:58,168 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1568 states and 1695 transitions.
[2020-11-25 05:59:58,172 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:58,173 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:58,173 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:58,174 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:58,174 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND TRUE   __exception
[L414]               __tmp__Balance := Balance;
[L415]               __tmp__DType := DType;
[L416]               __tmp__Alloc := Alloc;
[L417]               __tmp__balance_ADDR := balance_ADDR;
[L418]               __tmp__M_Ref_int := M_Ref_int;
[L419]               __tmp__sum__balances0 := sum__balances0;
[L420]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]               __tmp__sum__allowed1 := sum__allowed1;
[L423]               __tmp__Length := Length;
[L424]               __tmp__now := now;
[L425]               __tmp__name_Token := name_Token;
[L426]               __tmp__symbol_Token := symbol_Token;
[L427]               __tmp__decimals_Token := decimals_Token;
[L428]               __tmp___balances_Token := _balances_Token;
[L429]               __tmp___allowed_Token := _allowed_Token;
[L430]               __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]              __var_5 := null;
[L1564]  COND TRUE   !(to_s470 != null)
[L1565]              revert := true;
[L1422]  RET         call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND TRUE   revert
[L431]   RET         call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]               assume revert || gas < 0;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL       call CorralChoice_Token(this);
[L2246]             havoc msgsender_MSG;
[L2247]             havoc msgvalue_MSG;
[L2248]             havoc choice;
[L2249]             havoc to_s316;
[L2250]             havoc value_s316;
[L2251]             havoc __ret_0_transfer;
[L2252]             havoc spender_s335;
[L2253]             havoc value_s335;
[L2254]             havoc __ret_0_approve;
[L2255]             havoc from_s370;
[L2256]             havoc to_s370;
[L2257]             havoc value_s370;
[L2258]             havoc __ret_0_transferFrom;
[L2259]             havoc __ret_0_totalSupply;
[L2260]             havoc owner_s281;
[L2261]             havoc __ret_0_balanceOf;
[L2262]             havoc owner_s297;
[L2263]             havoc spender_s297;
[L2264]             havoc __ret_0_allowance;
[L2265]             havoc __ret_0_name;
[L2266]             havoc __ret_0_symbol;
[L2267]             havoc __ret_0_decimals;
[L2268]             havoc banker_s261;
[L2269]             havoc spender_s397;
[L2270]             havoc addedValue_s397;
[L2271]             havoc __ret_0_increaseAllowance;
[L2272]             havoc spender_s424;
[L2273]             havoc subtractedValue_s424;
[L2274]             havoc __ret_0_decreaseAllowance;
[L2275]             havoc tmpNow;
[L2276]             havoc gas;
[L2277]             assume gas > 4000000 && gas <= 8000000;
[L2278]             tmpNow := now;
[L2279]             havoc now;
[L2280]             assume now > tmpNow;
[L2281]             assume msgsender_MSG != null;
[L2282]             assume DType[msgsender_MSG] != SafeMath;
[L2283]             assume DType[msgsender_MSG] != IERC20;
[L2284]             assume DType[msgsender_MSG] != Token;
[L2285]             Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE  choice == 11
[L2287]             gas := gas - 21000;
[L2288]  COND TRUE  gas >= 0
[L2289]             assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]             assume msgvalue_MSG == 0;
[L2291]  CALL       call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_Token0 := true;
[L2]                call_transfer_Token0 := false;
[L2]                revert := revert_hold;
[L411]              havoc __exception;
[L412]              revert := false;
[L413]   COND TRUE  __exception
[L414]              __tmp__Balance := Balance;
[L415]              __tmp__DType := DType;
[L416]              __tmp__Alloc := Alloc;
[L417]              __tmp__balance_ADDR := balance_ADDR;
[L418]              __tmp__M_Ref_int := M_Ref_int;
[L419]              __tmp__sum__balances0 := sum__balances0;
[L420]              __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]              __tmp__sum__allowed1 := sum__allowed1;
[L423]              __tmp__Length := Length;
[L424]              __tmp__now := now;
[L425]              __tmp__name_Token := name_Token;
[L426]              __tmp__symbol_Token := symbol_Token;
[L427]              __tmp__decimals_Token := decimals_Token;
[L428]              __tmp___balances_Token := _balances_Token;
[L429]              __tmp___allowed_Token := _allowed_Token;
[L430]              __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL       call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL       call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]             __var_5 := null;
[L1564]  COND TRUE  !(to_s470 != null)
[L1565]             revert := true;
[L1422]  RET        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND TRUE  revert
[L431]   RET        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]              assume revert || gas < 0;
[L2291]  RET        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET        call CorralChoice_Token(this);

[2020-11-25 05:59:58,178 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:58,179 INFO  L82        PathProgramCache]: Analyzing trace with hash -302694038, now seen corresponding path program 1 times
[2020-11-25 05:59:58,179 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:58,192 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:58,236 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:58,237 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:58,237 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 05:59:58,237 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:58,238 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 05:59:58,238 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 05:59:58,238 INFO  L87              Difference]: Start difference. First operand 1568 states and 1695 transitions. cyclomatic complexity: 129 Second operand 7 states.
[2020-11-25 05:59:58,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:58,303 INFO  L93              Difference]: Finished difference Result 1656 states and 1792 transitions.
[2020-11-25 05:59:58,303 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:59:58,303 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1656 states and 1792 transitions.
[2020-11-25 05:59:58,309 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:58,315 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1656 states to 1648 states and 1784 transitions.
[2020-11-25 05:59:58,315 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 486
[2020-11-25 05:59:58,315 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 486
[2020-11-25 05:59:58,315 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1648 states and 1784 transitions.
[2020-11-25 05:59:58,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:58,317 INFO  L728         BuchiCegarLoop]: Abstraction has 1648 states and 1784 transitions.
[2020-11-25 05:59:58,318 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1648 states and 1784 transitions.
[2020-11-25 05:59:58,333 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1648 to 1635.
[2020-11-25 05:59:58,333 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1635 states.
[2020-11-25 05:59:58,335 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1635 states to 1635 states and 1769 transitions.
[2020-11-25 05:59:58,335 INFO  L751         BuchiCegarLoop]: Abstraction has 1635 states and 1769 transitions.
[2020-11-25 05:59:58,335 INFO  L631         BuchiCegarLoop]: Abstraction has 1635 states and 1769 transitions.
[2020-11-25 05:59:58,335 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:59:58,336 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1635 states and 1769 transitions.
[2020-11-25 05:59:58,339 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:58,340 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:58,340 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:58,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:58,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND TRUE   __exception
[L414]               __tmp__Balance := Balance;
[L415]               __tmp__DType := DType;
[L416]               __tmp__Alloc := Alloc;
[L417]               __tmp__balance_ADDR := balance_ADDR;
[L418]               __tmp__M_Ref_int := M_Ref_int;
[L419]               __tmp__sum__balances0 := sum__balances0;
[L420]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]               __tmp__sum__allowed1 := sum__allowed1;
[L423]               __tmp__Length := Length;
[L424]               __tmp__now := now;
[L425]               __tmp__name_Token := name_Token;
[L426]               __tmp__symbol_Token := symbol_Token;
[L427]               __tmp__decimals_Token := decimals_Token;
[L428]               __tmp___balances_Token := _balances_Token;
[L429]               __tmp___allowed_Token := _allowed_Token;
[L430]               __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]              __var_5 := null;
[L1564]  COND FALSE  !(!(to_s470 != null))
[L1568]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1204]  COND TRUE   !(b_s82 <= a_s82)
[L1205]              revert := true;
[L1568]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1569]  COND TRUE   revert
[L1422]  RET         call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND TRUE   revert
[L431]   RET         call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]               assume revert || gas < 0;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND TRUE   __exception
[L414]               __tmp__Balance := Balance;
[L415]               __tmp__DType := DType;
[L416]               __tmp__Alloc := Alloc;
[L417]               __tmp__balance_ADDR := balance_ADDR;
[L418]               __tmp__M_Ref_int := M_Ref_int;
[L419]               __tmp__sum__balances0 := sum__balances0;
[L420]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]               __tmp__sum__allowed1 := sum__allowed1;
[L423]               __tmp__Length := Length;
[L424]               __tmp__now := now;
[L425]               __tmp__name_Token := name_Token;
[L426]               __tmp__symbol_Token := symbol_Token;
[L427]               __tmp__decimals_Token := decimals_Token;
[L428]               __tmp___balances_Token := _balances_Token;
[L429]               __tmp___allowed_Token := _allowed_Token;
[L430]               __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]              __var_5 := null;
[L1564]  COND FALSE  !(!(to_s470 != null))
[L1568]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1204]  COND TRUE   !(b_s82 <= a_s82)
[L1205]              revert := true;
[L1568]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1569]  COND TRUE   revert
[L1422]  RET         call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND TRUE   revert
[L431]   RET         call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]               assume revert || gas < 0;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:58,344 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:58,345 INFO  L82        PathProgramCache]: Analyzing trace with hash -968450547, now seen corresponding path program 1 times
[2020-11-25 05:59:58,345 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:58,356 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:58,410 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:58,410 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:58,410 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 05:59:58,411 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:58,411 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 05:59:58,411 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 05:59:58,411 INFO  L87              Difference]: Start difference. First operand 1635 states and 1769 transitions. cyclomatic complexity: 136 Second operand 8 states.
[2020-11-25 05:59:58,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:59:58,892 INFO  L93              Difference]: Finished difference Result 1740 states and 1885 transitions.
[2020-11-25 05:59:58,892 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 05:59:58,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1740 states and 1885 transitions.
[2020-11-25 05:59:58,897 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:59:58,902 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1740 states to 1740 states and 1885 transitions.
[2020-11-25 05:59:58,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 535
[2020-11-25 05:59:58,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 535
[2020-11-25 05:59:58,903 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1740 states and 1885 transitions.
[2020-11-25 05:59:58,905 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:59:58,905 INFO  L728         BuchiCegarLoop]: Abstraction has 1740 states and 1885 transitions.
[2020-11-25 05:59:58,906 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1740 states and 1885 transitions.
[2020-11-25 05:59:58,917 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1740 to 1635.
[2020-11-25 05:59:58,917 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1635 states.
[2020-11-25 05:59:58,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1635 states to 1635 states and 1769 transitions.
[2020-11-25 05:59:58,920 INFO  L751         BuchiCegarLoop]: Abstraction has 1635 states and 1769 transitions.
[2020-11-25 05:59:58,920 INFO  L631         BuchiCegarLoop]: Abstraction has 1635 states and 1769 transitions.
[2020-11-25 05:59:58,920 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:59:58,920 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1635 states and 1769 transitions.
[2020-11-25 05:59:58,923 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:59:58,923 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:59:58,923 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:59:58,924 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:59:58,924 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND FALSE  !(revert)
[L1436]              __ret_0_ := true;
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND FALSE  !(revert)
[L1436]              __ret_0_ := true;
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 05:59:58,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:59:58,927 INFO  L82        PathProgramCache]: Analyzing trace with hash -1700786189, now seen corresponding path program 1 times
[2020-11-25 05:59:58,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:59:58,969 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:59:59,543 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:59:59,543 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:59:59,543 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 05:59:59,543 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:59:59,544 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 05:59:59,544 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=684, Unknown=0, NotChecked=0, Total=756
[2020-11-25 05:59:59,544 INFO  L87              Difference]: Start difference. First operand 1635 states and 1769 transitions. cyclomatic complexity: 136 Second operand 28 states.
[2020-11-25 06:00:02,000 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:00:02,000 INFO  L93              Difference]: Finished difference Result 1691 states and 1850 transitions.
[2020-11-25 06:00:02,001 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 06:00:02,001 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1691 states and 1850 transitions.
[2020-11-25 06:00:02,004 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:00:02,009 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1691 states to 1691 states and 1850 transitions.
[2020-11-25 06:00:02,009 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 505
[2020-11-25 06:00:02,010 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 505
[2020-11-25 06:00:02,010 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1691 states and 1850 transitions.
[2020-11-25 06:00:02,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:00:02,012 INFO  L728         BuchiCegarLoop]: Abstraction has 1691 states and 1850 transitions.
[2020-11-25 06:00:02,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1691 states and 1850 transitions.
[2020-11-25 06:00:02,024 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1691 to 1676.
[2020-11-25 06:00:02,024 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1676 states.
[2020-11-25 06:00:02,026 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1676 states to 1676 states and 1819 transitions.
[2020-11-25 06:00:02,026 INFO  L751         BuchiCegarLoop]: Abstraction has 1676 states and 1819 transitions.
[2020-11-25 06:00:02,027 INFO  L631         BuchiCegarLoop]: Abstraction has 1676 states and 1819 transitions.
[2020-11-25 06:00:02,027 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:00:02,027 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1676 states and 1819 transitions.
[2020-11-25 06:00:02,029 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:00:02,029 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:00:02,029 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:00:02,030 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:00:02,030 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND TRUE   __exception
[L414]               __tmp__Balance := Balance;
[L415]               __tmp__DType := DType;
[L416]               __tmp__Alloc := Alloc;
[L417]               __tmp__balance_ADDR := balance_ADDR;
[L418]               __tmp__M_Ref_int := M_Ref_int;
[L419]               __tmp__sum__balances0 := sum__balances0;
[L420]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]               __tmp__sum__allowed1 := sum__allowed1;
[L423]               __tmp__Length := Length;
[L424]               __tmp__now := now;
[L425]               __tmp__name_Token := name_Token;
[L426]               __tmp__symbol_Token := symbol_Token;
[L427]               __tmp__decimals_Token := decimals_Token;
[L428]               __tmp___balances_Token := _balances_Token;
[L429]               __tmp___allowed_Token := _allowed_Token;
[L430]               __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]              __var_5 := null;
[L1564]  COND FALSE  !(!(to_s470 != null))
[L1568]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1204]  COND FALSE  !(!(b_s82 <= a_s82))
[L1208]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1209]              __ret_0_ := c_s82;
[L1568]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1569]  COND FALSE  !(revert)
[L1572]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_Token[this][from_s470];
[L1573]              __tmp___balances_Token[this][from_s470] := __var_6;
[L1574]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_Token[this][from_s470];
[L1575]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][to_s470], value_s470);
[L1228]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND TRUE   !(c_s106 >= a_s106)
[L1230]              revert := true;
[L1575]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][to_s470], value_s470);
[L1576]  COND TRUE   revert
[L1422]  RET         call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND TRUE   revert
[L431]   RET         call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]               assume revert || gas < 0;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND TRUE   __exception
[L414]               __tmp__Balance := Balance;
[L415]               __tmp__DType := DType;
[L416]               __tmp__Alloc := Alloc;
[L417]               __tmp__balance_ADDR := balance_ADDR;
[L418]               __tmp__M_Ref_int := M_Ref_int;
[L419]               __tmp__sum__balances0 := sum__balances0;
[L420]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]               __tmp__sum__allowed1 := sum__allowed1;
[L423]               __tmp__Length := Length;
[L424]               __tmp__now := now;
[L425]               __tmp__name_Token := name_Token;
[L426]               __tmp__symbol_Token := symbol_Token;
[L427]               __tmp__decimals_Token := decimals_Token;
[L428]               __tmp___balances_Token := _balances_Token;
[L429]               __tmp___allowed_Token := _allowed_Token;
[L430]               __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]              __var_5 := null;
[L1564]  COND FALSE  !(!(to_s470 != null))
[L1568]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1204]  COND FALSE  !(!(b_s82 <= a_s82))
[L1208]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1209]              __ret_0_ := c_s82;
[L1568]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1569]  COND FALSE  !(revert)
[L1572]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_Token[this][from_s470];
[L1573]              __tmp___balances_Token[this][from_s470] := __var_6;
[L1574]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_Token[this][from_s470];
[L1575]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][to_s470], value_s470);
[L1228]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND TRUE   !(c_s106 >= a_s106)
[L1230]              revert := true;
[L1575]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][to_s470], value_s470);
[L1576]  COND TRUE   revert
[L1422]  RET         call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND TRUE   revert
[L431]   RET         call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]               assume revert || gas < 0;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:00:02,033 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:00:02,033 INFO  L82        PathProgramCache]: Analyzing trace with hash 30993511, now seen corresponding path program 1 times
[2020-11-25 06:00:02,033 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:00:02,041 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:00:02,101 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:00:02,102 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:00:02,102 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 06:00:02,102 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:00:02,102 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 06:00:02,102 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-11-25 06:00:02,102 INFO  L87              Difference]: Start difference. First operand 1676 states and 1819 transitions. cyclomatic complexity: 147 Second operand 14 states.
[2020-11-25 06:00:02,670 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:00:02,670 INFO  L93              Difference]: Finished difference Result 1756 states and 1915 transitions.
[2020-11-25 06:00:02,670 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 06:00:02,670 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1756 states and 1915 transitions.
[2020-11-25 06:00:02,674 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 06:00:02,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1756 states to 1756 states and 1915 transitions.
[2020-11-25 06:00:02,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 538
[2020-11-25 06:00:02,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 538
[2020-11-25 06:00:02,679 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1756 states and 1915 transitions.
[2020-11-25 06:00:02,680 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:00:02,680 INFO  L728         BuchiCegarLoop]: Abstraction has 1756 states and 1915 transitions.
[2020-11-25 06:00:02,681 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1756 states and 1915 transitions.
[2020-11-25 06:00:02,693 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1756 to 1697.
[2020-11-25 06:00:02,693 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1697 states.
[2020-11-25 06:00:02,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1697 states to 1697 states and 1839 transitions.
[2020-11-25 06:00:02,694 INFO  L751         BuchiCegarLoop]: Abstraction has 1697 states and 1839 transitions.
[2020-11-25 06:00:02,694 INFO  L631         BuchiCegarLoop]: Abstraction has 1697 states and 1839 transitions.
[2020-11-25 06:00:02,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 06:00:02,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1697 states and 1839 transitions.
[2020-11-25 06:00:02,696 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:00:02,696 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:00:02,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:00:02,697 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:00:02,697 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND TRUE   __exception
[L414]               __tmp__Balance := Balance;
[L415]               __tmp__DType := DType;
[L416]               __tmp__Alloc := Alloc;
[L417]               __tmp__balance_ADDR := balance_ADDR;
[L418]               __tmp__M_Ref_int := M_Ref_int;
[L419]               __tmp__sum__balances0 := sum__balances0;
[L420]               __tmp__alloc__allowed_Token_lvl0 := alloc__allowed_Token_lvl0;
[L421]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L422]               __tmp__sum__allowed1 := sum__allowed1;
[L423]               __tmp__Length := Length;
[L424]               __tmp__now := now;
[L425]               __tmp__name_Token := name_Token;
[L426]               __tmp__symbol_Token := symbol_Token;
[L427]               __tmp__decimals_Token := decimals_Token;
[L428]               __tmp___balances_Token := _balances_Token;
[L429]               __tmp___allowed_Token := _allowed_Token;
[L430]               __tmp___totalSupply_Token := _totalSupply_Token;
[L431]   CALL        call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1422]  CALL        call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1563]              __var_5 := null;
[L1564]  COND FALSE  !(!(to_s470 != null))
[L1568]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1204]  COND FALSE  !(!(b_s82 <= a_s82))
[L1208]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1209]              __ret_0_ := c_s82;
[L1568]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][from_s470], value_s470);
[L1569]  COND FALSE  !(revert)
[L1572]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_Token[this][from_s470];
[L1573]              __tmp___balances_Token[this][from_s470] := __var_6;
[L1574]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_Token[this][from_s470];
[L1575]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][to_s470], value_s470);
[L1228]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1229]  COND FALSE  !(!(c_s106 >= a_s106))
[L1233]              __ret_0_ := c_s106;
[L1575]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_Token[this][to_s470], value_s470);
[L1576]  COND FALSE  !(revert)
[L1579]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_Token[this][to_s470];
[L1580]              __tmp___balances_Token[this][to_s470] := __var_7;
[L1581]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_Token[this][to_s470];
[L1422]  RET         call _transfer~address~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1423]  COND FALSE  !(revert)
[L1426]              __ret_0_ := true;
[L431]   RET         call __ret_0_ := transfer~address~uint256_Token__fail(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L432]               assume revert || gas < 0;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND FALSE  !(gas >= 0)
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:00:02,700 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:00:02,700 INFO  L82        PathProgramCache]: Analyzing trace with hash 2120423843, now seen corresponding path program 1 times
[2020-11-25 06:00:02,700 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:00:02,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:00:02,772 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:00:02,772 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:00:02,772 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 06:00:02,773 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:00:02,773 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 06:00:02,773 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 06:00:02,773 INFO  L87              Difference]: Start difference. First operand 1697 states and 1839 transitions. cyclomatic complexity: 146 Second operand 5 states.
[2020-11-25 06:00:02,927 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:00:02,927 INFO  L93              Difference]: Finished difference Result 2163 states and 2408 transitions.
[2020-11-25 06:00:02,927 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:00:02,927 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2163 states and 2408 transitions.
[2020-11-25 06:00:02,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 06:00:02,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2163 states to 1683 states and 1925 transitions.
[2020-11-25 06:00:02,935 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 408
[2020-11-25 06:00:02,936 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 408
[2020-11-25 06:00:02,936 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1683 states and 1925 transitions.
[2020-11-25 06:00:02,937 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:00:02,937 INFO  L728         BuchiCegarLoop]: Abstraction has 1683 states and 1925 transitions.
[2020-11-25 06:00:02,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1683 states and 1925 transitions.
[2020-11-25 06:00:02,945 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1683 to 1225.
[2020-11-25 06:00:02,945 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1225 states.
[2020-11-25 06:00:02,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1225 states to 1225 states and 1332 transitions.
[2020-11-25 06:00:02,946 INFO  L751         BuchiCegarLoop]: Abstraction has 1225 states and 1332 transitions.
[2020-11-25 06:00:02,946 INFO  L631         BuchiCegarLoop]: Abstraction has 1225 states and 1332 transitions.
[2020-11-25 06:00:02,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 06:00:02,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1225 states and 1332 transitions.
[2020-11-25 06:00:02,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:00:02,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:00:02,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:00:02,950 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:00:02,950 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_Token0 := false;
[L2]                 call_transfer_Token0 := false;
[L2]     CALL        call main();
[L2366]              assume null == 0;
[L2367]  CALL        call this := FreshRefGenerator__success();
[L1107]              havoc newRef;
[L1108]              assume Alloc[newRef] == false;
[L1109]              Alloc[newRef] := true;
[L1110]              assume newRef != null;
[L2367]  RET         call this := FreshRefGenerator__success();
[L2368]              assume now >= 0;
[L2369]              assume DType[this] == Token;
[L2370]              assume msgvalue_MSG == 0;
[L2371]              gas := gas - 53000;
[L2372]  CALL        call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L209]               havoc __exception;
[L210]               revert := false;
[L211]   COND FALSE  !(__exception)
[L232]   CALL        call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1374]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1295]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1280]              assume msgsender_MSG != null;
[L1281]              Balance[this] := 0;
[L1295]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1296]  COND FALSE  !(revert)
[L1374]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1375]  COND FALSE  !(revert)
[L1378]  CALL        call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1333]              assume msgsender_MSG != null;
[L1334]              Balance[this] := 0;
[L1335]              name_Token[this] := 1672502729;
[L1336]              symbol_Token[this] := 624073;
[L1337]              decimals_Token[this] := 18;
[L1338]              _balances_Token[this] := zeroRefintArr();
[L1339]              sum__balances0[this] := 0;
[L1340]              _allowed_Token[this] := zeroRefRefintArr();
[L1341]              sum__allowed1[this] := 0;
[L1342]              _totalSupply_Token[this] := 0;
[L1344]              amount_s261 := nonlinearMul(3 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_Token[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1345]  CALL        call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1345]  RET         call __var_1 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_Token[this], amount_s261);
[L1346]  COND FALSE  !(revert)
[L1349]              _totalSupply_Token[this] := __var_1;
[L1350]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][banker_s261];
[L1351]              _balances_Token[this][banker_s261] := amount_s261;
[L1352]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][banker_s261];
[L1353]              assert { :EventEmitted "Transfer_Token" } true;
[L1378]  RET         call Token_Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L1379]  COND FALSE  !(revert)
[L232]   RET         call Token_Token__success(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L233]               assume !revert && gas >= 0;
[L2372]  RET         call Token_Token(this, msgsender_MSG, msgvalue_MSG, banker_s261);
[L2373]              assume !revert && gas >= 0;
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND FALSE  !(revert)
[L1436]              __ret_0_ := true;
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND FALSE  !(revert)
[L1436]              __ret_0_ := true;
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

Loop:
[L2376]  CALL        call CorralChoice_Token(this);
[L2246]              havoc msgsender_MSG;
[L2247]              havoc msgvalue_MSG;
[L2248]              havoc choice;
[L2249]              havoc to_s316;
[L2250]              havoc value_s316;
[L2251]              havoc __ret_0_transfer;
[L2252]              havoc spender_s335;
[L2253]              havoc value_s335;
[L2254]              havoc __ret_0_approve;
[L2255]              havoc from_s370;
[L2256]              havoc to_s370;
[L2257]              havoc value_s370;
[L2258]              havoc __ret_0_transferFrom;
[L2259]              havoc __ret_0_totalSupply;
[L2260]              havoc owner_s281;
[L2261]              havoc __ret_0_balanceOf;
[L2262]              havoc owner_s297;
[L2263]              havoc spender_s297;
[L2264]              havoc __ret_0_allowance;
[L2265]              havoc __ret_0_name;
[L2266]              havoc __ret_0_symbol;
[L2267]              havoc __ret_0_decimals;
[L2268]              havoc banker_s261;
[L2269]              havoc spender_s397;
[L2270]              havoc addedValue_s397;
[L2271]              havoc __ret_0_increaseAllowance;
[L2272]              havoc spender_s424;
[L2273]              havoc subtractedValue_s424;
[L2274]              havoc __ret_0_decreaseAllowance;
[L2275]              havoc tmpNow;
[L2276]              havoc gas;
[L2277]              assume gas > 4000000 && gas <= 8000000;
[L2278]              tmpNow := now;
[L2279]              havoc now;
[L2280]              assume now > tmpNow;
[L2281]              assume msgsender_MSG != null;
[L2282]              assume DType[msgsender_MSG] != SafeMath;
[L2283]              assume DType[msgsender_MSG] != IERC20;
[L2284]              assume DType[msgsender_MSG] != Token;
[L2285]              Alloc[msgsender_MSG] := true;
[L2286]  COND TRUE   choice == 11
[L2287]              gas := gas - 21000;
[L2288]  COND TRUE   gas >= 0
[L2289]              assume value_s316 >= 0 && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]              assume msgvalue_MSG == 0;
[L2291]  CALL        call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s316 && value_s316 <= _balances_Token[this][msgsender_MSG]) && value_s316 >= 0) && value_s316 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][to_s316] >= 0) && _balances_Token[this][to_s316] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_Token[this][msgsender_MSG] >= 0) && _balances_Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Token0 := true;
[L2]                 call_transfer_Token0 := false;
[L2]                 revert := revert_hold;
[L411]               havoc __exception;
[L412]               revert := false;
[L413]   COND FALSE  !(__exception)
[L434]   CALL        call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L1432]  CALL        call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1589]              __var_5 := null;
[L1590]  COND FALSE  !(!(to_s470 != null))
[L1594]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1216]  COND FALSE  !(!(b_s82 <= a_s82))
[L1220]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1221]              __ret_0_ := c_s82;
[L1594]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][from_s470], value_s470);
[L1595]  COND FALSE  !(revert)
[L1598]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][from_s470];
[L1599]              _balances_Token[this][from_s470] := __var_6;
[L1600]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][from_s470];
[L1601]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1240]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1241]  COND FALSE  !(!(c_s106 >= a_s106))
[L1245]              __ret_0_ := c_s106;
[L1601]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_Token[this][to_s470], value_s470);
[L1602]  COND FALSE  !(revert)
[L1605]              sum__balances0[this] := sum__balances0[this] - _balances_Token[this][to_s470];
[L1606]              _balances_Token[this][to_s470] := __var_7;
[L1607]              sum__balances0[this] := sum__balances0[this] + _balances_Token[this][to_s470];
[L1608]              assert { :EventEmitted "Transfer_Token" } true;
[L1432]  RET         call _transfer~address~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s316, value_s316);
[L1433]  COND FALSE  !(revert)
[L1436]              __ret_0_ := true;
[L434]   RET         call __ret_0_ := transfer~address~uint256_Token__success(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L435]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_Token[this] == old(_totalSupply_Token[this])) && _balances_Token[this] == old(_balances_Token[this])) && _allowed_Token[this] == old(_allowed_Token[this]));
[L2]                 revert := revert_hold;
[L2291]  RET         call __ret_0_transfer := transfer~address~uint256_Token(this, msgsender_MSG, msgvalue_MSG, to_s316, value_s316);
[L2376]  RET         call CorralChoice_Token(this);

[2020-11-25 06:00:02,953 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:00:02,953 INFO  L82        PathProgramCache]: Analyzing trace with hash 595402196, now seen corresponding path program 1 times
[2020-11-25 06:00:02,955 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:00:03,017 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 06:14:54,035 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 06:14:54,036 INFO  L168              Benchmark]: Toolchain (without parser) took 898599.44 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 940.6 MB in the beginning and 5.3 GB in the end (delta: -4.3 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,037 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,037 INFO  L168              Benchmark]: Boogie Preprocessor took 75.03 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,038 INFO  L168              Benchmark]: UtopiaSpecLang took 49.25 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,038 INFO  L168              Benchmark]: Boogie Printer took 10.24 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,038 INFO  L168              Benchmark]: RCFGBuilder took 595.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,038 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.09 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,039 INFO  L168              Benchmark]: BÃ¼chi Program Product took 927.79 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.6 MB). Free memory was 861.8 MB in the beginning and 883.7 MB in the end (delta: -21.9 MB). Peak memory consumption was 146.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,039 INFO  L168              Benchmark]: BlockEncodingV2 took 66.21 ms. Allocated memory is still 1.1 GB. Free memory was 883.7 MB in the beginning and 849.2 MB in the end (delta: 34.5 MB). Peak memory consumption was 34.5 MB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,040 INFO  L168              Benchmark]: BuchiAutomizer took 896834.56 ms. Allocated memory was 1.1 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 849.2 MB in the beginning and 5.3 GB in the end (delta: -4.4 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
[2020-11-25 06:14:54,042 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2004 locations, 3389 edges
  - StatisticsResult: Encoded RCFG
    1982 locations, 3337 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 75.03 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.25 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.24 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 595.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.09 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 927.79 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 55.6 MB). Free memory was 861.8 MB in the beginning and 883.7 MB in the end (delta: -21.9 MB). Peak memory consumption was 146.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 66.21 ms. Allocated memory is still 1.1 GB. Free memory was 883.7 MB in the beginning and 849.2 MB in the end (delta: 34.5 MB). Peak memory consumption was 34.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896834.56 ms. Allocated memory was 1.1 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 849.2 MB in the beginning and 5.3 GB in the end (delta: -4.4 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    826 locations, 1043 edges
  - StatisticsResult: BuchiProgram size
    2004 locations, 3389 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
