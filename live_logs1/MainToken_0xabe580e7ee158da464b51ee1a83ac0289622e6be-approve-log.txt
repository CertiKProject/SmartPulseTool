This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:45:02,245 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:45:02,247 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:45:02,257 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:45:02,257 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:45:02,258 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:45:02,259 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:45:02,261 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:45:02,262 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:45:02,263 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:45:02,264 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:45:02,264 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:45:02,265 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:45:02,265 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:45:02,266 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:45:02,267 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:45:02,268 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:45:02,269 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:45:02,271 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:45:02,272 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:45:02,273 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:45:02,274 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:45:02,275 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:45:02,275 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:45:02,276 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:45:02,276 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:45:02,276 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:45:02,277 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:45:02,277 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:45:02,277 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:45:02,278 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:45:02,279 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:45:02,279 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:45:02,280 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:45:02,280 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:45:02,280 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:45:02,281 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:45:02,281 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:45:02,281 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:45:02,282 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:45:02,282 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:45:02,283 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:45:02,291 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:45:02,291 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:45:02,292 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:45:02,292 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:45:02,292 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:45:02,293 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:45:02,293 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:45:02,293 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:45:02,293 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:45:02,293 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:45:02,293 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:45:02,293 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:45:02,293 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:45:02,294 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:45:02,294 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:45:02,295 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:45:02,295 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:45:02,295 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:45:02,295 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:45:02,295 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:45:02,327 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:45:02,338 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:45:02,341 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:45:02,343 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:45:02,343 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:45:02,344 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl
[2020-11-24 21:45:02,344 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl'
[2020-11-24 21:45:02,526 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:45:02,528 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:45:02,529 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:45:02,530 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:45:02,530 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:45:02,550 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,551 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,607 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,608 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,651 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,679 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,705 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,733 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:45:02,733 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:45:02,734 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:45:02,736 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:45:02,740 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/1) ...
[2020-11-24 21:45:02,773 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:02,779 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:02,787 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:02,794 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s379 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-24 21:45:02,797 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s379]==_value_s379 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s379,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-24 21:45:02,808 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:45:02,808 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:45:02,834 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:02 PropertyContainer
[2020-11-24 21:45:02,835 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:45:02,835 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:45:02,835 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:45:02,835 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:45:02,836 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/2) ...
[2020-11-24 21:45:02,836 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:45:02,837 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:45:02,870 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:02" (2/2) ...
[2020-11-24 21:45:02,871 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:45:02,871 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:45:02,871 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:45:02,871 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:45:02,872 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/2) ...
[2020-11-24 21:45:02,930 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:45:02,930 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:45:02,930 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:45:02,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:45:02,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,931 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,932 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,932 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,932 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:45:02,932 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:45:02,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:45:02,932 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:45:02,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:45:02,933 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:45:02,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:45:02,933 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:45:02,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:45:02,933 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:45:02,933 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:45:02,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:45:02,933 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:45:02,933 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:45:02,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:45:02,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:45:02,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:45:02,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:45:02,934 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:02,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:02,935 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:02,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:45:02,935 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:45:02,935 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:45:02,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:45:02,935 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:45:02,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:45:02,935 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:45:02,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:45:02,936 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:45:02,936 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:45:02,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:45:02,936 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:45:02,936 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:45:02,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:45:02,936 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:45:02,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:45:02,936 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:45:02,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:45:02,937 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:45:02,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:45:02,937 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:45:02,937 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:45:02,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:45:02,937 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:45:02,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:45:02,937 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:45:02,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:45:02,937 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:45:02,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:45:02,938 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:45:02,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:45:02,938 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:45:02,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:45:02,938 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:45:02,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:45:02,938 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:45:02,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:45:02,938 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:45:02,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:45:02,939 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:45:02,939 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:45:02,939 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:45:02,939 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:45:02,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:45:02,939 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:45:02,939 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:45:02,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:45:02,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:45:02,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:45:02,940 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:45:02,940 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:45:02,941 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:45:02,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:45:02,941 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:45:02,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:45:02,941 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:45:02,941 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:45:02,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:45:02,941 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:45:02,941 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:45:02,941 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:45:02,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:45:02,942 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:45:02,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:45:02,942 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:45:02,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:45:02,942 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:45:02,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:45:02,942 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:45:02,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:45:02,943 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:45:02,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:45:02,943 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:45:02,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:45:02,943 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:45:02,943 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:45:02,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:45:02,943 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:45:02,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:45:02,944 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:45:02,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:45:02,944 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:45:02,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:45:02,944 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:45:02,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:45:02,944 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:45:02,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:45:02,944 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:45:02,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:45:02,945 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:45:02,946 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:45:02,947 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:45:02,948 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:45:02,949 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:45:02,950 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:02,951 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:45:02,952 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:45:02,953 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:45:02,954 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:45:02,955 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:45:02,956 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:45:02,957 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:45:02,958 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:45:02,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:45:02,960 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:45:02,961 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:45:02,961 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:45:02,961 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:45:02,961 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:45:02,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:45:02,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:45:02,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:02,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:45:02,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:45:02,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:45:02,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:45:02,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:45:02,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:45:02,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:45:02,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:45:02,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:45:02,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:45:02,976 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:45:02,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:45:03,736 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:03,736 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:03,737 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:04,179 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:45:04,544 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:45:04,544 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:45:04,547 INFO  L202        PluginConnector]: Adding new model MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:04 BoogieIcfgContainer
[2020-11-24 21:45:04,548 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:02" (2/2) ...
[2020-11-24 21:45:04,548 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:45:04,548 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6276d30 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:04, skipping insertion in model container
[2020-11-24 21:45:04,548 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:45:04,548 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:45:04,548 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:45:04,550 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:45:04,550 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/3) ...
[2020-11-24 21:45:04,550 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@59b377f3 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:04, skipping insertion in model container
[2020-11-24 21:45:04,550 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:02" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:45:04,585 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:04 NWAContainer
[2020-11-24 21:45:04,585 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:45:04,585 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:45:04,585 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:45:04,586 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:45:04,587 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:04" (3/4) ...
[2020-11-24 21:45:04,587 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@aefa954 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:04, skipping insertion in model container
[2020-11-24 21:45:04,587 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:04" (4/4) ...
[2020-11-24 21:45:04,590 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:45:04,599 INFO  L110   BuchiProductObserver]: Initial RCFG 5386 locations, 7562 edges
[2020-11-24 21:45:04,599 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:45:04,615 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:45:08,748 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:45:08,764 INFO  L110   BuchiProductObserver]: BuchiProgram size 13452 locations, 24723 edges
[2020-11-24 21:45:08,764 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:08 BoogieIcfgContainer
[2020-11-24 21:45:08,764 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:45:08,765 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:45:08,765 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:45:08,766 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:45:08,766 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:08" (1/1) ...
[2020-11-24 21:45:08,993 INFO  L313           BlockEncoder]: Initial Icfg 13452 locations, 24723 edges
[2020-11-24 21:45:08,993 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:45:08,993 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:45:08,994 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:45:08,994 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:45:09,018 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:45:09,039 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:45:09,062 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:45:09,069 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:45:09,077 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:45:09,077 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:45:09,083 INFO  L313           BlockEncoder]: Encoded RCFG 13242 locations, 24137 edges
[2020-11-24 21:45:09,083 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:45:09 BasicIcfg
[2020-11-24 21:45:09,083 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:45:09,084 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:45:09,084 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:45:09,085 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:45:09,085 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:09,085 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:45:02" (1/6) ...
[2020-11-24 21:45:09,087 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@79d8e20e and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:45:09, skipping insertion in model container
[2020-11-24 21:45:09,087 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:09,087 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:45:02" (2/6) ...
[2020-11-24 21:45:09,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@79d8e20e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:45:09, skipping insertion in model container
[2020-11-24 21:45:09,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:09,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:45:04" (3/6) ...
[2020-11-24 21:45:09,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@79d8e20e and model type MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:45:09, skipping insertion in model container
[2020-11-24 21:45:09,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:09,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:45:04" (4/6) ...
[2020-11-24 21:45:09,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@79d8e20e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:45:09, skipping insertion in model container
[2020-11-24 21:45:09,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:09,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:45:08" (5/6) ...
[2020-11-24 21:45:09,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@79d8e20e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:45:09, skipping insertion in model container
[2020-11-24 21:45:09,089 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:45:09,089 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:45:09" (6/6) ...
[2020-11-24 21:45:09,090 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0xabe580e7ee158da464b51ee1a83ac0289622e6be_approve.bpl_BEv2
[2020-11-24 21:45:09,124 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:45:09,124 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:45:09,124 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:45:09,124 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:45:09,124 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:45:09,124 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:45:09,124 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:45:09,124 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:45:09,124 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:45:09,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13242 states.
[2020-11-24 21:45:09,346 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:09,346 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:09,346 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:09,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:09,355 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:09,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:45:09,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13242 states.
[2020-11-24 21:45:09,405 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:09,405 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:09,405 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:09,407 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:09,407 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND TRUE   choice == 38
[L14521]              gas := gas - 21000;
[L14522]  COND FALSE  !(gas >= 0)
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:09,422 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:09,422 INFO  L82        PathProgramCache]: Analyzing trace with hash -1778001806, now seen corresponding path program 1 times
[2020-11-24 21:45:09,427 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:09,450 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:09,487 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:45:09,489 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:09,489 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:45:09,917 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:09,926 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:45:09,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:45:09,928 INFO  L87              Difference]: Start difference. First operand 13242 states. Second operand 3 states.
[2020-11-24 21:45:10,446 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:10,447 INFO  L93              Difference]: Finished difference Result 8278 states and 9693 transitions.
[2020-11-24 21:45:10,447 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:45:10,448 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8278 states and 9693 transitions.
[2020-11-24 21:45:10,487 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:10,539 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8278 states to 8274 states and 9685 transitions.
[2020-11-24 21:45:10,539 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:45:10,543 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 21:45:10,544 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8274 states and 9685 transitions.
[2020-11-24 21:45:10,560 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:10,560 INFO  L728         BuchiCegarLoop]: Abstraction has 8274 states and 9685 transitions.
[2020-11-24 21:45:10,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8274 states and 9685 transitions.
[2020-11-24 21:45:10,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8274 to 8274.
[2020-11-24 21:45:10,684 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8274 states.
[2020-11-24 21:45:10,697 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8274 states to 8274 states and 9685 transitions.
[2020-11-24 21:45:10,698 INFO  L751         BuchiCegarLoop]: Abstraction has 8274 states and 9685 transitions.
[2020-11-24 21:45:10,698 INFO  L631         BuchiCegarLoop]: Abstraction has 8274 states and 9685 transitions.
[2020-11-24 21:45:10,698 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:45:10,699 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8274 states and 9685 transitions.
[2020-11-24 21:45:10,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:10,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:10,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:10,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:10,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:10,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:10,718 INFO  L82        PathProgramCache]: Analyzing trace with hash -177416410, now seen corresponding path program 1 times
[2020-11-24 21:45:10,719 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:10,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:10,771 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:45:10,771 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:10,771 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:45:10,772 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:10,772 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:45:10,772 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:45:10,772 INFO  L87              Difference]: Start difference. First operand 8274 states and 9685 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:45:10,980 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:10,981 INFO  L93              Difference]: Finished difference Result 9738 states and 11145 transitions.
[2020-11-24 21:45:10,981 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:45:10,981 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9738 states and 11145 transitions.
[2020-11-24 21:45:11,008 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:11,049 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9738 states to 9738 states and 11145 transitions.
[2020-11-24 21:45:11,049 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 21:45:11,051 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2275
[2020-11-24 21:45:11,051 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9738 states and 11145 transitions.
[2020-11-24 21:45:11,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:11,063 INFO  L728         BuchiCegarLoop]: Abstraction has 9738 states and 11145 transitions.
[2020-11-24 21:45:11,073 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9738 states and 11145 transitions.
[2020-11-24 21:45:11,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9738 to 8650.
[2020-11-24 21:45:11,175 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8650 states.
[2020-11-24 21:45:11,190 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8650 states to 8650 states and 9791 transitions.
[2020-11-24 21:45:11,190 INFO  L751         BuchiCegarLoop]: Abstraction has 8650 states and 9791 transitions.
[2020-11-24 21:45:11,190 INFO  L631         BuchiCegarLoop]: Abstraction has 8650 states and 9791 transitions.
[2020-11-24 21:45:11,190 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:45:11,190 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8650 states and 9791 transitions.
[2020-11-24 21:45:11,206 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:11,206 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:11,206 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:11,216 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:11,216 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND TRUE   !!initialized_MainToken[this]
[L9756]               revert := true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND TRUE   revert
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND TRUE   revert
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:11,230 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:11,231 INFO  L82        PathProgramCache]: Analyzing trace with hash -1688610702, now seen corresponding path program 1 times
[2020-11-24 21:45:11,232 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:11,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:11,881 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:45:11,881 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:11,881 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:45:11,882 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:11,882 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:45:11,882 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:45:11,882 INFO  L87              Difference]: Start difference. First operand 8650 states and 9791 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:45:12,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:12,009 INFO  L93              Difference]: Finished difference Result 9732 states and 10975 transitions.
[2020-11-24 21:45:12,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:45:12,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9732 states and 10975 transitions.
[2020-11-24 21:45:12,033 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:12,067 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9732 states to 9384 states and 10567 transitions.
[2020-11-24 21:45:12,068 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2152
[2020-11-24 21:45:12,069 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 21:45:12,069 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9384 states and 10567 transitions.
[2020-11-24 21:45:12,079 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:12,079 INFO  L728         BuchiCegarLoop]: Abstraction has 9384 states and 10567 transitions.
[2020-11-24 21:45:12,088 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9384 states and 10567 transitions.
[2020-11-24 21:45:12,161 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9384 to 8697.
[2020-11-24 21:45:12,162 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8697 states.
[2020-11-24 21:45:12,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8697 states to 8697 states and 9698 transitions.
[2020-11-24 21:45:12,173 INFO  L751         BuchiCegarLoop]: Abstraction has 8697 states and 9698 transitions.
[2020-11-24 21:45:12,173 INFO  L631         BuchiCegarLoop]: Abstraction has 8697 states and 9698 transitions.
[2020-11-24 21:45:12,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:45:12,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8697 states and 9698 transitions.
[2020-11-24 21:45:12,184 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:12,184 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:12,184 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:12,190 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:12,191 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:12,201 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:12,201 INFO  L82        PathProgramCache]: Analyzing trace with hash 1293614453, now seen corresponding path program 1 times
[2020-11-24 21:45:12,202 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:12,236 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:12,754 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:45:12,754 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:12,754 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:45:12,755 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:12,756 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:45:12,756 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:45:12,756 INFO  L87              Difference]: Start difference. First operand 8697 states and 9698 transitions. cyclomatic complexity: 1021 Second operand 7 states.
[2020-11-24 21:45:12,947 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:12,948 INFO  L93              Difference]: Finished difference Result 8708 states and 9709 transitions.
[2020-11-24 21:45:12,948 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:45:12,948 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8708 states and 9709 transitions.
[2020-11-24 21:45:12,972 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:13,008 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8708 states to 8697 states and 9697 transitions.
[2020-11-24 21:45:13,008 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2075
[2020-11-24 21:45:13,010 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2075
[2020-11-24 21:45:13,010 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8697 states and 9697 transitions.
[2020-11-24 21:45:13,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:13,018 INFO  L728         BuchiCegarLoop]: Abstraction has 8697 states and 9697 transitions.
[2020-11-24 21:45:13,028 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8697 states and 9697 transitions.
[2020-11-24 21:45:13,097 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8697 to 8697.
[2020-11-24 21:45:13,097 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8697 states.
[2020-11-24 21:45:13,110 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8697 states to 8697 states and 9697 transitions.
[2020-11-24 21:45:13,110 INFO  L751         BuchiCegarLoop]: Abstraction has 8697 states and 9697 transitions.
[2020-11-24 21:45:13,110 INFO  L631         BuchiCegarLoop]: Abstraction has 8697 states and 9697 transitions.
[2020-11-24 21:45:13,110 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:45:13,110 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8697 states and 9697 transitions.
[2020-11-24 21:45:13,123 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:45:13,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:13,124 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:13,129 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:13,129 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND TRUE   __exception
[L4389]               __tmp__Balance := Balance;
[L4390]               __tmp__DType := DType;
[L4391]               __tmp__Alloc := Alloc;
[L4392]               __tmp__balance_ADDR := balance_ADDR;
[L4393]               __tmp__M_Ref_int := M_Ref_int;
[L4394]               __tmp__sum_balances0 := sum_balances0;
[L4395]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4396]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4397]               __tmp__sum_allowed1 := sum_allowed1;
[L4398]               __tmp__M_int_int := M_int_int;
[L4399]               __tmp__sum_chains2 := sum_chains2;
[L4400]               __tmp__sum_freezings3 := sum_freezings3;
[L4401]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4402]               __tmp__M_int_Ref := M_int_Ref;
[L4403]               __tmp__sum := sum;
[L4404]               __tmp__Length := Length;
[L4405]               __tmp__now := now;
[L4406]               __tmp__balances_BasicToken := balances_BasicToken;
[L4407]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4408]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4409]               __tmp__owner_Ownable := owner_Ownable;
[L4410]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4411]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4412]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4413]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4414]               __tmp__paused_Pausable := paused_Pausable;
[L4415]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4416]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4417]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4418]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4419]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4420]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4421]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4422]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4423]               __tmp__initialized_MainToken := initialized_MainToken;
[L4424]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9455]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9301]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9267]               assume msgsender_MSG != null;
[L9268]               __tmp__Balance[this] := 0;
[L9269]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9270]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9271]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9272]               __tmp__TOKEN_NAME_Consts[this] := -1298559559;
[L9273]               __tmp__TOKEN_SYMBOL_Consts[this] := 120673937;
[L9274]               __tmp__PAUSED_Consts[this] := false;
[L9275]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9276]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9277]               __tmp__CONTINUE_MINTING_Consts[this] := false;
[L9301]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9302]   COND FALSE  !(revert)
[L9455]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9456]   COND FALSE  !(revert)
[L9459]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L9459]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9460]   COND FALSE  !(revert)
[L9463]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9463]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9464]   COND FALSE  !(revert)
[L9467]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L9467]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9468]   COND FALSE  !(revert)
[L9471]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L9471]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9472]   COND FALSE  !(revert)
[L9475]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7631]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7639]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7643]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]               assume msgsender_MSG != null;
[L7605]               __tmp__Balance[this] := 0;
[L7606]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7607]               __tmp__sum_chains2[this] := 0;
[L7608]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7609]               __tmp__sum_freezings3[this] := 0;
[L7610]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7611]               __tmp__sum_freezingBalance4[this] := 0;
[L7647]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L9475]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9476]   COND FALSE  !(revert)
[L9479]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L9479]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9480]   COND FALSE  !(revert)
[L9483]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7446]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7450]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7454]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7458]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L7462]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L7466]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7429]               assume msgsender_MSG != null;
[L7430]               __tmp__Balance[this] := 0;
[L7431]               __tmp__mintingFinished_MintableToken[this] := false;
[L7466]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7467]   COND FALSE  !(revert)
[L9483]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9484]   COND FALSE  !(revert)
[L9487]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9058]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L9058]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9059]   COND FALSE  !(revert)
[L9062]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9062]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9063]   COND FALSE  !(revert)
[L9066]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L9066]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9067]   COND FALSE  !(revert)
[L9070]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L9070]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9071]   COND FALSE  !(revert)
[L9074]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7631]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7631]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7639]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7643]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]               assume msgsender_MSG != null;
[L7605]               __tmp__Balance[this] := 0;
[L7606]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7607]               __tmp__sum_chains2[this] := 0;
[L7608]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7609]               __tmp__sum_freezings3[this] := 0;
[L7610]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7611]               __tmp__sum_freezingBalance4[this] := 0;
[L7647]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L9074]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9075]   COND FALSE  !(revert)
[L9078]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L9078]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9079]   COND FALSE  !(revert)
[L9082]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7446]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7446]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7450]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7454]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7028]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L7028]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6984]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6984]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6985]   COND FALSE  !(revert)
[L6988]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]               assume msgsender_MSG != null;
[L6970]               __tmp__Balance[this] := 0;
[L6988]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7032]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L7036]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]               assume msgsender_MSG != null;
[L7010]               __tmp__Balance[this] := 0;
[L7011]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7012]               __tmp__sum_allowed1[this] := 0;
[L7040]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7458]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L7462]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L7466]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7429]               assume msgsender_MSG != null;
[L7430]               __tmp__Balance[this] := 0;
[L7431]               __tmp__mintingFinished_MintableToken[this] := false;
[L7466]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7467]   COND FALSE  !(revert)
[L9082]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9083]   COND FALSE  !(revert)
[L9086]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9043]               assume msgsender_MSG != null;
[L9044]               __tmp__Balance[this] := 0;
[L9086]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9087]   COND FALSE  !(revert)
[L9487]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9488]   COND FALSE  !(revert)
[L9491]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8822]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L8822]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8823]   COND FALSE  !(revert)
[L8826]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6855]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6722]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6855]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   COND FALSE  !(revert)
[L6859]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6834]               assume msgsender_MSG != null;
[L6835]               __tmp__Balance[this] := 0;
[L6836]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6837]               __tmp__sum_balances0[this] := 0;
[L6838]               __tmp__totalSupply__BasicToken[this] := 0;
[L6859]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L8826]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8827]   COND FALSE  !(revert)
[L8830]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8807]               assume msgsender_MSG != null;
[L8808]               __tmp__Balance[this] := 0;
[L8830]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8831]   COND FALSE  !(revert)
[L9491]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9492]   COND FALSE  !(revert)
[L9495]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8952]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7282]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp__owner_Ownable[this] := null;
[L7267]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7282]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7283]   COND FALSE  !(revert)
[L8952]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8953]   COND FALSE  !(revert)
[L8956]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8935]               assume msgsender_MSG != null;
[L8936]               __tmp__Balance[this] := 0;
[L8937]               __tmp__paused_Pausable[this] := false;
[L8956]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8957]   COND FALSE  !(revert)
[L9495]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(revert)
[L9499]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9414]               assume msgsender_MSG != null;
[L9415]               __tmp__Balance[this] := 0;
[L9416]               __tmp__initialized_MainToken[this] := false;
[L9418]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9685]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9689]               __tmp__initialized_MainToken[this] := true;
[L9690]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9700]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9701]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9702]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9703]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9704]               __var_59 := 0 % 18446744073709551616;
[L9705]               freezes_s1673 := 0 % 18446744073709551616;
[L9706]               i_s1673 := 0;
[L9707]   COND FALSE  !(i_s1673 < __tmp__Length[addresses_s1673])
[L9731]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9418]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9419]   COND FALSE  !(revert)
[L9422]   COND TRUE   __tmp__DType[this] == MainToken
[L9423]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7321]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12714]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7321]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7322]   COND FALSE  !(revert)
[L7325]   COND TRUE   __tmp__DType[this] == MainToken
[L7326]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7394]               __var_11 := null;
[L7395]   COND FALSE  !(!(_newOwner_s581 != null))
[L7399]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7326]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7327]   COND FALSE  !(revert)
[L9423]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9424]   COND FALSE  !(revert)
[L9499]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9500]   COND FALSE  !(revert)
[L4424]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4425]               assume revert || gas < 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:13,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:13,139 INFO  L82        PathProgramCache]: Analyzing trace with hash -574233321, now seen corresponding path program 1 times
[2020-11-24 21:45:13,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:13,177 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:13,723 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:45:13,723 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:13,723 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:45:13,724 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:13,724 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:45:13,724 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:45:13,724 INFO  L87              Difference]: Start difference. First operand 8697 states and 9697 transitions. cyclomatic complexity: 1020 Second operand 4 states.
[2020-11-24 21:45:14,796 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:14,796 INFO  L93              Difference]: Finished difference Result 10897 states and 12443 transitions.
[2020-11-24 21:45:14,796 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:45:14,797 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10897 states and 12443 transitions.
[2020-11-24 21:45:14,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 21:45:14,844 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10897 states to 9988 states and 11392 transitions.
[2020-11-24 21:45:14,844 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2390
[2020-11-24 21:45:14,845 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2399
[2020-11-24 21:45:14,845 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9988 states and 11392 transitions.
[2020-11-24 21:45:14,852 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:14,852 INFO  L728         BuchiCegarLoop]: Abstraction has 9988 states and 11392 transitions.
[2020-11-24 21:45:14,858 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9988 states and 11392 transitions.
[2020-11-24 21:45:14,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9988 to 8971.
[2020-11-24 21:45:14,905 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8971 states.
[2020-11-24 21:45:14,913 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8971 states to 8971 states and 10097 transitions.
[2020-11-24 21:45:14,913 INFO  L751         BuchiCegarLoop]: Abstraction has 8971 states and 10097 transitions.
[2020-11-24 21:45:14,913 INFO  L631         BuchiCegarLoop]: Abstraction has 8971 states and 10097 transitions.
[2020-11-24 21:45:14,913 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:45:14,913 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8971 states and 10097 transitions.
[2020-11-24 21:45:14,922 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:45:14,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:14,922 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:14,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:14,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:14,937 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:14,937 INFO  L82        PathProgramCache]: Analyzing trace with hash 18102476, now seen corresponding path program 1 times
[2020-11-24 21:45:14,938 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:15,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:15,787 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 45 proven. 0 refuted. 0 times theorem prover too weak. 9781 trivial. 0 not checked.
[2020-11-24 21:45:15,787 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:15,787 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:45:15,788 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:15,788 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:45:15,788 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:45:15,788 INFO  L87              Difference]: Start difference. First operand 8971 states and 10097 transitions. cyclomatic complexity: 1145 Second operand 16 states.
[2020-11-24 21:45:23,994 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:23,994 INFO  L93              Difference]: Finished difference Result 9131 states and 10283 transitions.
[2020-11-24 21:45:23,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 21:45:23,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9131 states and 10283 transitions.
[2020-11-24 21:45:24,010 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 21:45:24,029 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9131 states to 9131 states and 10283 transitions.
[2020-11-24 21:45:24,029 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2322
[2020-11-24 21:45:24,032 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2322
[2020-11-24 21:45:24,032 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9131 states and 10283 transitions.
[2020-11-24 21:45:24,038 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:24,038 INFO  L728         BuchiCegarLoop]: Abstraction has 9131 states and 10283 transitions.
[2020-11-24 21:45:24,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9131 states and 10283 transitions.
[2020-11-24 21:45:24,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9131 to 9088.
[2020-11-24 21:45:24,105 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9088 states.
[2020-11-24 21:45:24,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9088 states to 9088 states and 10239 transitions.
[2020-11-24 21:45:24,118 INFO  L751         BuchiCegarLoop]: Abstraction has 9088 states and 10239 transitions.
[2020-11-24 21:45:24,118 INFO  L631         BuchiCegarLoop]: Abstraction has 9088 states and 10239 transitions.
[2020-11-24 21:45:24,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:45:24,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9088 states and 10239 transitions.
[2020-11-24 21:45:24,128 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-24 21:45:24,128 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:24,129 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:24,132 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:24,132 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND TRUE   __exception
[L924]                __tmp__Balance := Balance;
[L925]                __tmp__DType := DType;
[L926]                __tmp__Alloc := Alloc;
[L927]                __tmp__balance_ADDR := balance_ADDR;
[L928]                __tmp__M_Ref_int := M_Ref_int;
[L929]                __tmp__sum_balances0 := sum_balances0;
[L930]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L931]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L932]                __tmp__sum_allowed1 := sum_allowed1;
[L933]                __tmp__M_int_int := M_int_int;
[L934]                __tmp__sum_chains2 := sum_chains2;
[L935]                __tmp__sum_freezings3 := sum_freezings3;
[L936]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L937]                __tmp__M_int_Ref := M_int_Ref;
[L938]                __tmp__sum := sum;
[L939]                __tmp__Length := Length;
[L940]                __tmp__now := now;
[L941]                __tmp__balances_BasicToken := balances_BasicToken;
[L942]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L943]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L944]                __tmp__owner_Ownable := owner_Ownable;
[L945]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L946]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L947]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L948]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L949]                __tmp__paused_Pausable := paused_Pausable;
[L950]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L951]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L952]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L953]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L954]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L955]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L956]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L957]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L958]                __tmp__initialized_MainToken := initialized_MainToken;
[L959]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7157]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7158]               __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7159]               __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7160]               __ret_0_ := true;
[L959]    RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L960]                assume revert || gas < 0;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND TRUE   choice == 38
[L14521]              gas := gas - 21000;
[L14522]  COND TRUE   gas >= 0
[L14523]              assume msgvalue_MSG == 0;
[L14524]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L380]                havoc __exception;
[L381]                revert := false;
[L382]    COND FALSE  !(__exception)
[L421]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]               __ret_0_ := totalSupply__BasicToken[this];
[L421]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L422]                assume !revert && gas >= 0;
[L14524]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:24,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:24,141 INFO  L82        PathProgramCache]: Analyzing trace with hash -926187197, now seen corresponding path program 1 times
[2020-11-24 21:45:24,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:24,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:24,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 21:45:24,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:24,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:45:24,658 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:24,658 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:45:24,658 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:45:24,658 INFO  L87              Difference]: Start difference. First operand 9088 states and 10239 transitions. cyclomatic complexity: 1172 Second operand 5 states.
[2020-11-24 21:45:25,923 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:25,923 INFO  L93              Difference]: Finished difference Result 9974 states and 11226 transitions.
[2020-11-24 21:45:25,923 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:45:25,923 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9974 states and 11226 transitions.
[2020-11-24 21:45:25,945 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 21:45:25,965 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9974 states to 7138 states and 8258 transitions.
[2020-11-24 21:45:25,965 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1182
[2020-11-24 21:45:25,966 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1341
[2020-11-24 21:45:25,966 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7138 states and 8258 transitions.
[2020-11-24 21:45:25,971 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:25,971 INFO  L728         BuchiCegarLoop]: Abstraction has 7138 states and 8258 transitions.
[2020-11-24 21:45:25,975 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7138 states and 8258 transitions.
[2020-11-24 21:45:26,007 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7138 to 5656.
[2020-11-24 21:45:26,007 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5656 states.
[2020-11-24 21:45:26,013 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5656 states to 5656 states and 6376 transitions.
[2020-11-24 21:45:26,014 INFO  L751         BuchiCegarLoop]: Abstraction has 5656 states and 6376 transitions.
[2020-11-24 21:45:26,014 INFO  L631         BuchiCegarLoop]: Abstraction has 5656 states and 6376 transitions.
[2020-11-24 21:45:26,014 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:45:26,014 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5656 states and 6376 transitions.
[2020-11-24 21:45:26,019 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:45:26,020 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:45:26,020 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:45:26,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:45:26,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_StandardToken0 := false;
[L3]                  call_approve_StandardToken0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L14768]              assume null == 0;
[L14769]  CALL        call this := FreshRefGenerator__success();
[L6698]               havoc newRef;
[L6699]               assume Alloc[newRef] == false;
[L6700]               Alloc[newRef] := true;
[L6701]               assume newRef != null;
[L14769]  RET         call this := FreshRefGenerator__success();
[L14770]              assume now >= 0;
[L14771]              assume DType[this] == MainToken;
[L14772]              assume msgvalue_MSG == 0;
[L14773]              gas := gas - 53000;
[L14774]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4386]               havoc __exception;
[L4387]               revert := false;
[L4388]   COND FALSE  !(__exception)
[L4427]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9285]               assume msgsender_MSG != null;
[L9286]               Balance[this] := 0;
[L9287]               TOKEN_DECIMALS_Consts[this] := 18;
[L9288]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9289]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9290]               TOKEN_NAME_Consts[this] := -1298559559;
[L9291]               TOKEN_SYMBOL_Consts[this] := 120673937;
[L9292]               PAUSED_Consts[this] := false;
[L9293]               __var_52 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9294]               TARGET_USER_Consts[this] := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9295]               CONTINUE_MINTING_Consts[this] := false;
[L9309]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9310]   COND FALSE  !(revert)
[L9507]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9508]   COND FALSE  !(revert)
[L9511]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9511]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9512]   COND FALSE  !(revert)
[L9515]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9515]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9516]   COND FALSE  !(revert)
[L9519]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9519]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9520]   COND FALSE  !(revert)
[L9523]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9523]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9524]   COND FALSE  !(revert)
[L9527]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9527]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9528]   COND FALSE  !(revert)
[L9531]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9531]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9532]   COND FALSE  !(revert)
[L9535]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9535]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9536]   COND FALSE  !(revert)
[L9539]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L9094]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9095]   COND FALSE  !(revert)
[L9098]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L9098]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9099]   COND FALSE  !(revert)
[L9102]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L9102]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9103]   COND FALSE  !(revert)
[L9106]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L9106]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9107]   COND FALSE  !(revert)
[L9110]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7655]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7659]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7660]   COND FALSE  !(revert)
[L7663]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7663]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7664]   COND FALSE  !(revert)
[L7667]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7667]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7668]   COND FALSE  !(revert)
[L7671]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7618]               assume msgsender_MSG != null;
[L7619]               Balance[this] := 0;
[L7620]               chains_FreezableToken[this] := zerointintArr();
[L7621]               sum_chains2[this] := 0;
[L7622]               freezings_FreezableToken[this] := zerointintArr();
[L7623]               sum_freezings3[this] := 0;
[L7624]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7625]               sum_freezingBalance4[this] := 0;
[L7671]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7672]   COND FALSE  !(revert)
[L9110]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9111]   COND FALSE  !(revert)
[L9114]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L9114]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9115]   COND FALSE  !(revert)
[L9118]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7474]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7475]   COND FALSE  !(revert)
[L7478]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7478]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7479]   COND FALSE  !(revert)
[L7482]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7482]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7483]   COND FALSE  !(revert)
[L7486]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L7048]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]   COND FALSE  !(revert)
[L7052]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6996]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               Balance[this] := 0;
[L7000]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7052]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7053]   COND FALSE  !(revert)
[L7056]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L7056]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7057]   COND FALSE  !(revert)
[L7060]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]               assume msgsender_MSG != null;
[L7020]               Balance[this] := 0;
[L7021]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7022]               sum_allowed1[this] := 0;
[L7060]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7061]   COND FALSE  !(revert)
[L7486]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7487]   COND FALSE  !(revert)
[L7490]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L7490]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7491]   COND FALSE  !(revert)
[L7494]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7438]               assume msgsender_MSG != null;
[L7439]               Balance[this] := 0;
[L7440]               mintingFinished_MintableToken[this] := false;
[L7494]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7495]   COND FALSE  !(revert)
[L9118]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9119]   COND FALSE  !(revert)
[L9122]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9051]               assume msgsender_MSG != null;
[L9052]               Balance[this] := 0;
[L9122]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9123]   COND FALSE  !(revert)
[L9539]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9540]   COND FALSE  !(revert)
[L9543]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L8838]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8839]   COND FALSE  !(revert)
[L8842]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6715]               assume msgsender_MSG != null;
[L6716]               Balance[this] := 0;
[L6730]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6867]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]               assume msgsender_MSG != null;
[L6846]               Balance[this] := 0;
[L6847]               balances_BasicToken[this] := zeroRefintArr();
[L6848]               sum_balances0[this] := 0;
[L6849]               totalSupply__BasicToken[this] := 0;
[L6871]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L8842]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8843]   COND FALSE  !(revert)
[L8846]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8815]               assume msgsender_MSG != null;
[L8816]               Balance[this] := 0;
[L8846]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8847]   COND FALSE  !(revert)
[L9543]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9544]   COND FALSE  !(revert)
[L9547]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               owner_Ownable[this] := null;
[L7277]               owner_Ownable[this] := msgsender_MSG;
[L7290]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7291]   COND FALSE  !(revert)
[L8964]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8965]   COND FALSE  !(revert)
[L8968]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8944]               assume msgsender_MSG != null;
[L8945]               Balance[this] := 0;
[L8946]               paused_Pausable[this] := false;
[L8968]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8969]   COND FALSE  !(revert)
[L9547]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9548]   COND FALSE  !(revert)
[L9551]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9435]               assume msgsender_MSG != null;
[L9436]               Balance[this] := 0;
[L9437]               initialized_MainToken[this] := false;
[L9439]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9755]   COND FALSE  !(!!initialized_MainToken[this])
[L9759]               initialized_MainToken[this] := true;
[L9760]   COND FALSE  !(PAUSED_Consts[this])
[L9770]               __var_57 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9771]               addresses_s1673 := ConstantToRef(726363746593025037757646358436107745018220041085);
[L9772]               __var_58 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               amounts_s1673 := 10000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9774]               __var_59 := 0 % 18446744073709551616;
[L9775]               freezes_s1673 := 0 % 18446744073709551616;
[L9776]               i_s1673 := 0;
[L9777]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9779]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9780]   COND TRUE   DType[this] == MainToken
[L9781]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7532]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12754]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7532]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7536]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7536]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7537]   COND FALSE  !(revert)
[L7540]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6825]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6826]               assert c_s122 >= a_s122;
[L6827]               c_s122 := c_s122;
[L7540]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7541]   COND FALSE  !(revert)
[L7544]               totalSupply__BasicToken[this] := __var_12;
[L7545]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6825]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6826]               assert c_s122 >= a_s122;
[L6827]               c_s122 := c_s122;
[L7545]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7546]   COND FALSE  !(revert)
[L7549]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7550]               balances_BasicToken[this][_to_s664] := __var_13;
[L7551]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7552]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7553]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7554]               __ret_0_ := true;
[L9781]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9782]   COND FALSE  !(revert)
[L9796]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9797]   COND FALSE  !(gas < 0)
[L9777]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9801]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9802]   COND TRUE   DType[this] == MainToken
[L9803]   CALL        call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7575]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7575]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7576]   COND FALSE  !(revert)
[L7579]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12738]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7579]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7580]   COND FALSE  !(revert)
[L7583]               mintingFinished_MintableToken[this] := true;
[L7584]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7585]               __ret_0_ := true;
[L9803]   RET         call __var_62 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9804]   COND FALSE  !(revert)
[L9811]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9439]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9440]   COND FALSE  !(revert)
[L9443]   COND TRUE   DType[this] == MainToken
[L9444]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7357]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12722]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7357]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   COND TRUE   DType[this] == MainToken
[L7362]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7405]               __var_11 := null;
[L7406]   COND FALSE  !(!(_newOwner_s581 != null))
[L7410]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7411]               owner_Ownable[this] := _newOwner_s581;
[L7362]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7363]   COND FALSE  !(revert)
[L9444]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9445]   COND FALSE  !(revert)
[L9551]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9552]   COND FALSE  !(revert)
[L4427]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4428]               assume !revert && gas >= 0;
[L14774]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14775]              assume !revert && gas >= 0;
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND FALSE  !(choice == 33)
[L14559]  COND FALSE  !(choice == 32)
[L14566]  COND TRUE   choice == 31
[L14567]              gas := gas - 21000;
[L14568]  COND TRUE   gas >= 0
[L14569]              assume _subtractedValue_s497 >= 0 && _subtractedValue_s497 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14570]              assume msgvalue_MSG == 0;
[L14571]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1183]               havoc __exception;
[L1184]               revert := false;
[L1185]   COND FALSE  !(__exception)
[L1224]   CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L7241]               oldValue_s497 := allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7242]   COND TRUE   _subtractedValue_s497 > oldValue_s497
[L7243]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7244]               allowed_StandardToken[this][msgsender_MSG][_spender_s497] := 0;
[L7245]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s497];
[L7255]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7256]               __ret_0_ := true;
[L1224]   RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L1225]               assume !revert && gas >= 0;
[L14571]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s497, _subtractedValue_s497);
[L14778]  RET         call CorralChoice_MainToken(this);
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

Loop:
[L14778]  CALL        call CorralChoice_MainToken(this);
[L14435]              havoc msgsender_MSG;
[L14436]              havoc msgvalue_MSG;
[L14437]              havoc choice;
[L14438]              havoc __ret_0_totalSupply;
[L14439]              havoc _owner_s729;
[L14440]              havoc balance_s729;
[L14441]              havoc _to_s1572;
[L14442]              havoc _value_s1572;
[L14443]              havoc _success_s1572;
[L14444]              havoc _owner_s395;
[L14445]              havoc _spender_s395;
[L14446]              havoc __ret_0_allowance;
[L14447]              havoc _from_s1551;
[L14448]              havoc _to_s1551;
[L14449]              havoc _value_s1551;
[L14450]              havoc _success_s1551;
[L14451]              havoc _spender_s379;
[L14452]              havoc _value_s379;
[L14453]              havoc __ret_0_approve;
[L14454]              havoc _spender_s437;
[L14455]              havoc _addedValue_s437;
[L14456]              havoc __ret_0_increaseApproval;
[L14457]              havoc _spender_s497;
[L14458]              havoc _subtractedValue_s497;
[L14459]              havoc __ret_0_decreaseApproval;
[L14460]              havoc __ret_0_owner;
[L14461]              havoc _newOwner_s558;
[L14462]              havoc __ret_0_mintingFinished;
[L14463]              havoc _to_s664;
[L14464]              havoc _amount_s664;
[L14465]              havoc __ret_0_mint;
[L14466]              havoc __ret_0_finishMinting;
[L14467]              havoc _owner_s742;
[L14468]              havoc balance_s742;
[L14469]              havoc _owner_s754;
[L14470]              havoc balance_s754;
[L14471]              havoc _addr_s792;
[L14472]              havoc count_s792;
[L14473]              havoc _addr_s849;
[L14474]              havoc _index_s849;
[L14475]              havoc _release_s849;
[L14476]              havoc _balance_s849;
[L14477]              havoc _to_s938;
[L14478]              havoc _amount_s938;
[L14479]              havoc _until_s938;
[L14480]              havoc tokens_s1107;
[L14481]              havoc _value_s1261;
[L14482]              havoc __ret_0_paused;
[L14483]              havoc _to_s1449;
[L14484]              havoc _amount_s1449;
[L14485]              havoc _until_s1449;
[L14486]              havoc __ret_0_mintAndFreeze;
[L14487]              havoc __ret_0_TOKEN_DECIMALS;
[L14488]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14489]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14490]              havoc __ret_0_TOKEN_NAME;
[L14491]              havoc __ret_0_TOKEN_SYMBOL;
[L14492]              havoc __ret_0_PAUSED;
[L14493]              havoc __ret_0_TARGET_USER;
[L14494]              havoc __ret_0_CONTINUE_MINTING;
[L14495]              havoc __ret_0_initialized;
[L14496]              havoc _name_s1511;
[L14497]              havoc _symbol_s1519;
[L14498]              havoc _decimals_s1527;
[L14499]              havoc tmpNow;
[L14500]              havoc gas;
[L14501]              assume gas > 4000000 && gas <= 8000000;
[L14502]              tmpNow := now;
[L14503]              havoc now;
[L14504]              assume now > tmpNow;
[L14505]              assume msgsender_MSG != null;
[L14506]              assume DType[msgsender_MSG] != ERC20Basic;
[L14507]              assume DType[msgsender_MSG] != SafeMath;
[L14508]              assume DType[msgsender_MSG] != BasicToken;
[L14509]              assume DType[msgsender_MSG] != ERC20;
[L14510]              assume DType[msgsender_MSG] != StandardToken;
[L14511]              assume DType[msgsender_MSG] != Ownable;
[L14512]              assume DType[msgsender_MSG] != MintableToken;
[L14513]              assume DType[msgsender_MSG] != FreezableToken;
[L14514]              assume DType[msgsender_MSG] != BurnableToken;
[L14515]              assume DType[msgsender_MSG] != Pausable;
[L14516]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14517]              assume DType[msgsender_MSG] != Consts;
[L14518]              assume DType[msgsender_MSG] != MainToken;
[L14519]              Alloc[msgsender_MSG] := true;
[L14520]  COND FALSE  !(choice == 38)
[L14526]  COND FALSE  !(choice == 37)
[L14532]  COND FALSE  !(choice == 36)
[L14539]  COND FALSE  !(choice == 35)
[L14545]  COND FALSE  !(choice == 34)
[L14552]  COND TRUE   choice == 33
[L14553]              gas := gas - 21000;
[L14554]  COND TRUE   gas >= 0
[L14555]              assume _value_s379 >= 0 && _value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14556]              assume msgvalue_MSG == 0;
[L14557]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != _spender_s379;
[L3]                  call_approve_StandardToken0 := true;
[L3]                  call_approve_StandardToken0 := false;
[L3]                  revert := revert_hold;
[L921]                havoc __exception;
[L922]                revert := false;
[L923]    COND FALSE  !(__exception)
[L962]    CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L7166]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7167]               allowed_StandardToken[this][msgsender_MSG][_spender_s379] := _value_s379;
[L7168]               sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s379];
[L7169]               assert { :EventEmitted "Approval_StandardToken" } true;
[L7170]               __ret_0_ := true;
[L962]    RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L963]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s379] == _value_s379) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L3]                  revert := revert_hold;
[L14557]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s379, _value_s379);
[L14778]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:45:26,030 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:45:26,031 INFO  L82        PathProgramCache]: Analyzing trace with hash 439426262, now seen corresponding path program 1 times
[2020-11-24 21:45:26,032 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:45:26,100 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:45:26,790 INFO  L134       CoverageAnalysis]: Checked inductivity of 9928 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9928 trivial. 0 not checked.
[2020-11-24 21:45:26,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:45:26,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:45:26,791 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:45:26,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:45:26,791 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:45:26,791 INFO  L87              Difference]: Start difference. First operand 5656 states and 6376 transitions. cyclomatic complexity: 736 Second operand 7 states.
[2020-11-24 21:45:27,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:45:27,691 INFO  L93              Difference]: Finished difference Result 3176 states and 3577 transitions.
[2020-11-24 21:45:27,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:45:27,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3176 states and 3577 transitions.
[2020-11-24 21:45:27,697 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:45:27,697 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3176 states to 0 states and 0 transitions.
[2020-11-24 21:45:27,697 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:45:27,697 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:45:27,697 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:45:27,697 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:45:27,697 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:45:27,697 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:45:27,697 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:45:27,697 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 21:45:27,697 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:45:27,697 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:45:27,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:45:27,700 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:45:27 BasicIcfg
[2020-11-24 21:45:27,700 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:45:27,700 INFO  L168              Benchmark]: Toolchain (without parser) took 25173.95 ms. Allocated memory was 1.0 GB in the beginning and 4.1 GB in the end (delta: 3.1 GB). Free memory was 919.1 MB in the beginning and 1.5 GB in the end (delta: -562.9 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,701 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,702 INFO  L168              Benchmark]: Boogie Preprocessor took 203.87 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,702 INFO  L168              Benchmark]: UtopiaSpecLang took 101.30 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,702 INFO  L168              Benchmark]: Boogie Printer took 35.88 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.7 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,702 INFO  L168              Benchmark]: RCFGBuilder took 1676.88 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 184.0 MB). Free memory was 859.7 MB in the beginning and 1.1 GB in the end (delta: -216.5 MB). Peak memory consumption was 248.5 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,703 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.72 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,703 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4179.29 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 357.6 MB). Free memory was 1.1 GB in the beginning and 826.5 MB in the end (delta: 241.5 MB). Peak memory consumption was 804.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,704 INFO  L168              Benchmark]: BlockEncodingV2 took 318.86 ms. Allocated memory is still 1.6 GB. Free memory was 826.5 MB in the beginning and 634.5 MB in the end (delta: 192.0 MB). Peak memory consumption was 192.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,704 INFO  L168              Benchmark]: BuchiAutomizer took 18616.61 ms. Allocated memory was 1.6 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 634.5 MB in the beginning and 1.5 GB in the end (delta: -847.5 MB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-11-24 21:45:27,706 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13452 locations, 24723 edges
  - StatisticsResult: Encoded RCFG
    13242 locations, 24137 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 203.87 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 101.30 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.88 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 859.7 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1676.88 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 184.0 MB). Free memory was 859.7 MB in the beginning and 1.1 GB in the end (delta: -216.5 MB). Peak memory consumption was 248.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.72 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.1 MB). Peak memory consumption was 8.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4179.29 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 357.6 MB). Free memory was 1.1 GB in the beginning and 826.5 MB in the end (delta: 241.5 MB). Peak memory consumption was 804.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 318.86 ms. Allocated memory is still 1.6 GB. Free memory was 826.5 MB in the beginning and 634.5 MB in the end (delta: 192.0 MB). Peak memory consumption was 192.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 18616.61 ms. Allocated memory was 1.6 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 634.5 MB in the beginning and 1.5 GB in the end (delta: -847.5 MB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5386 locations, 7562 edges
  - StatisticsResult: BuchiProgram size
    13452 locations, 24723 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 18.5s and 9 iterations.  TraceHistogramMax:38. Analysis of lassos took 4.5s. Construction of modules took 9.2s. BÃ¼chi inclusion checks took 3.2s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 7 MinimizatonAttempts, 4317 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 9088 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 69451 SDtfs, 55747 SDslu, 92956 SDs, 0 SdLazy, 115822 SolverSat, 9323 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
