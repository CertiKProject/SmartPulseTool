This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:54:20,112 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:54:20,113 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:54:20,123 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:54:20,123 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:54:20,124 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:54:20,125 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:54:20,126 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:54:20,128 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:54:20,128 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:54:20,129 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:54:20,129 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:54:20,130 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:54:20,130 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:54:20,131 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:54:20,132 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:54:20,132 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:54:20,133 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:54:20,135 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:54:20,136 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:54:20,137 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:54:20,137 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:54:20,139 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:54:20,139 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:54:20,139 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:54:20,140 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:54:20,140 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:54:20,141 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:54:20,141 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:54:20,141 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:54:20,141 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:54:20,142 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:54:20,142 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:54:20,143 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:54:20,143 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:54:20,143 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:54:20,144 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:54:20,144 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:54:20,144 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:54:20,145 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:54:20,145 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:54:20,145 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:54:20,153 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:54:20,153 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:54:20,154 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:54:20,154 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:54:20,154 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:54:20,154 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:54:20,154 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:54:20,154 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:54:20,154 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:54:20,154 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:54:20,155 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:54:20,155 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:54:20,156 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:54:20,156 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:54:20,156 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:54:20,156 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:54:20,156 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:54:20,156 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:54:20,179 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:54:20,195 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:54:20,198 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:54:20,199 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:54:20,199 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:54:20,200 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl
[2020-11-25 01:54:20,200 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl'
[2020-11-25 01:54:20,279 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:54:20,280 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:54:20,280 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:54:20,280 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:54:20,281 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:54:20,296 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,298 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,324 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,324 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,342 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,351 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,357 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,366 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:54:20,366 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:54:20,366 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:54:20,368 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:54:20,371 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/1) ...
[2020-11-25 01:54:20,390 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MyToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && balances_MyToken[this][from] == old(balances_MyToken[this][from]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:54:20,396 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MyToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && balances_MyToken[this][from] == old(balances_MyToken[this][from]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:54:20,403 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MyToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && balances_MyToken[this][from] == old(balances_MyToken[this][from]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:54:20,411 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s474 && p1!=to_s474 ) && ( p2!=from_s474 || p3!=msg.sender ) ) && from_s474!=to_s474 ) && tokens_s474<=balances_MyToken[this][from_s474] ) && tokens_s474<=allowed_MyToken[this][from_s474][msg.sender] ) && ( balances_MyToken[this][to_s474] + tokens_s474 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s474>=0 ) && tokens_s474<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][to_s474]>=0 ) && balances_MyToken[this][to_s474]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][from_s474]>=0 ) && balances_MyToken[this][from_s474]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_MyToken[this][from_s474][msg.sender]>=0 ) && allowed_MyToken[this][from_s474][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:54:20,414 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s474==true && balances_MyToken[this][from_s474]==( ( old(balances_MyToken[this][from_s474]) ) - tokens_s474 ) ) && balances_MyToken[this][to_s474]==( ( old(balances_MyToken[this][to_s474]) ) + tokens_s474 ) ) && allowed_MyToken[this][from_s474][msg.sender]==( ( old(allowed_MyToken[this][from_s474][msg.sender]) ) - tokens_s474 ) ) && _totalSupply_MyToken[this]==( old(_totalSupply_MyToken[this]) ) ) && balances_MyToken[this][p1]==( old(balances_MyToken[this][p1]) ) ) && allowed_MyToken[this][p2][p3]==( old(allowed_MyToken[this][p2][p3]) ) ) && symbol_MyToken[this]==( old(symbol_MyToken[this]) ) ) && name_MyToken[this]==( old(name_MyToken[this]) ) ) && decimals_MyToken[this]==( old(decimals_MyToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s474,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_MyToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[to_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[from_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],IdentifierExpression[tokens_s474,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_MyToken>]]]]]]
[2020-11-25 01:54:20,418 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MyToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_MyToken[this][from] && value <= allowed_MyToken[this][from][msg.sender] && balances_MyToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][from] >= 0 &&  balances_MyToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_MyToken[this][from][msg.sender] >= 0 && allowed_MyToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transferFrom(from, to, value), return == true && balances_MyToken[this][from] == old(balances_MyToken[this][from]) - value && balances_MyToken[this][to] == old(balances_MyToken[this][to]) + value && allowed_MyToken[this][from][msg.sender] == old(allowed_MyToken[this][from][msg.sender]) - value && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1]) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:54:20,419 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_MyToken0) ==> ( <>AP(success_transferFrom_MyToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:54:20,426 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:54:20 PropertyContainer
[2020-11-25 01:54:20,426 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:54:20,426 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:54:20,427 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:54:20,427 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:54:20,427 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/2) ...
[2020-11-25 01:54:20,428 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:54:20,428 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:54:20,441 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:54:20" (2/2) ...
[2020-11-25 01:54:20,441 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:54:20,441 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:54:20,442 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:54:20,442 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:54:20,442 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/2) ...
[2020-11-25 01:54:20,494 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:54:20,494 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:54:20,494 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:54:20,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:54:20,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:54:20,495 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:54:20,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 01:54:20,496 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:54:20,497 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 01:54:20,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 01:54:20,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 01:54:20,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 01:54:20,497 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 01:54:20,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 01:54:20,497 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 01:54:20,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 01:54:20,497 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 01:54:20,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 01:54:20,497 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:54:20,498 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken
[2020-11-25 01:54:20,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken
[2020-11-25 01:54:20,498 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken
[2020-11-25 01:54:20,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken
[2020-11-25 01:54:20,498 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken
[2020-11-25 01:54:20,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken
[2020-11-25 01:54:20,498 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken
[2020-11-25 01:54:20,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken
[2020-11-25 01:54:20,498 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken
[2020-11-25 01:54:20,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken
[2020-11-25 01:54:20,498 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:54:20,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:54:20,499 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken
[2020-11-25 01:54:20,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken
[2020-11-25 01:54:20,499 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:54:20,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:54:20,499 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__success
[2020-11-25 01:54:20,499 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken
[2020-11-25 01:54:20,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken
[2020-11-25 01:54:20,499 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken
[2020-11-25 01:54:20,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken
[2020-11-25 01:54:20,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken
[2020-11-25 01:54:20,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:54:20,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyToken
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:54:20,501 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,502 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:54:20,503 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 01:54:20,504 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 01:54:20,505 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 01:54:20,505 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:54:20,505 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__success
[2020-11-25 01:54:20,505 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__fail
[2020-11-25 01:54:20,505 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__success
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__fail
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__success
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:54:20,506 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__success
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__success
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__fail
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__success
[2020-11-25 01:54:20,507 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__fail
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__success
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__fail
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__success
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__fail
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:54:20,508 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:54:20,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:54:20,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__fail
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__success
[2020-11-25 01:54:20,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__fail
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__success
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__success
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:54:20,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__success
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__success
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__fail
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__success
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__fail
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__success
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__fail
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__success
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__fail
[2020-11-25 01:54:20,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__success
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:54:20,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyToken
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:54:20,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:54:20,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:54:20,896 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:54:20,945 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:54:20,945 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:54:20,945 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:54:21,152 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:54:21,153 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 01:54:21,154 INFO  L202        PluginConnector]: Adding new model MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:54:21 BoogieIcfgContainer
[2020-11-25 01:54:21,155 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:54:20" (2/2) ...
[2020-11-25 01:54:21,155 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:54:21,155 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3167256b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:54:21, skipping insertion in model container
[2020-11-25 01:54:21,155 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:54:21,155 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:54:21,155 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:54:21,157 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:54:21,157 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/3) ...
[2020-11-25 01:54:21,158 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7b837a35 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:54:21, skipping insertion in model container
[2020-11-25 01:54:21,158 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:54:20" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:54:21,193 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:54:21 NWAContainer
[2020-11-25 01:54:21,194 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:54:21,194 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:54:21,194 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:54:21,195 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:54:21,196 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:54:21" (3/4) ...
[2020-11-25 01:54:21,196 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2ddb83f0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:54:21, skipping insertion in model container
[2020-11-25 01:54:21,196 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:54:21" (4/4) ...
[2020-11-25 01:54:21,200 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:54:21,203 INFO  L110   BuchiProductObserver]: Initial RCFG 1507 locations, 1893 edges
[2020-11-25 01:54:21,203 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:54:21,215 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:54:22,524 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:54:22,528 INFO  L110   BuchiProductObserver]: BuchiProgram size 3574 locations, 6133 edges
[2020-11-25 01:54:22,528 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:54:22 BoogieIcfgContainer
[2020-11-25 01:54:22,529 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:54:22,529 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:54:22,529 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:54:22,530 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:54:22,531 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:54:22" (1/1) ...
[2020-11-25 01:54:22,606 INFO  L313           BlockEncoder]: Initial Icfg 3574 locations, 6133 edges
[2020-11-25 01:54:22,606 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:54:22,607 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:54:22,607 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:54:22,607 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:54:22,618 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 13 locations because of local infeasibility
[2020-11-25 01:54:22,626 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 01:54:22,639 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:54:22,643 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:54:22,646 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:54:22,646 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:54:22,650 INFO  L313           BlockEncoder]: Encoded RCFG 3518 locations, 5985 edges
[2020-11-25 01:54:22,651 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:54:22 BasicIcfg
[2020-11-25 01:54:22,651 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:54:22,651 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:54:22,651 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:54:22,653 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:54:22,653 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:54:22,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:54:20" (1/6) ...
[2020-11-25 01:54:22,656 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5785d1be and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:54:22, skipping insertion in model container
[2020-11-25 01:54:22,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:54:22,656 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:54:20" (2/6) ...
[2020-11-25 01:54:22,656 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5785d1be and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:54:22, skipping insertion in model container
[2020-11-25 01:54:22,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:54:22,656 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:54:21" (3/6) ...
[2020-11-25 01:54:22,656 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5785d1be and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:54:22, skipping insertion in model container
[2020-11-25 01:54:22,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:54:22,657 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:54:21" (4/6) ...
[2020-11-25 01:54:22,657 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5785d1be and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:54:22, skipping insertion in model container
[2020-11-25 01:54:22,657 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:54:22,657 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:54:22" (5/6) ...
[2020-11-25 01:54:22,657 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5785d1be and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:54:22, skipping insertion in model container
[2020-11-25 01:54:22,657 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:54:22,657 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:54:22" (6/6) ...
[2020-11-25 01:54:22,658 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transferfrom-normal.bpl_BEv2
[2020-11-25 01:54:22,692 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:54:22,692 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:54:22,692 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:54:22,693 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:54:22,693 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:54:22,693 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:54:22,693 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:54:22,693 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:54:22,693 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:54:22,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3518 states.
[2020-11-25 01:54:22,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:22,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:22,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:22,780 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:22,780 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:22,780 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:54:22,780 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3518 states.
[2020-11-25 01:54:22,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:22,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:22,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:22,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:22,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND TRUE   revert
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:22,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:22,814 INFO  L82        PathProgramCache]: Analyzing trace with hash 1700404066, now seen corresponding path program 1 times
[2020-11-25 01:54:22,817 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:22,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:22,879 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:54:22,881 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:22,881 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:54:23,069 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:23,081 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:54:23,082 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:54:23,083 INFO  L87              Difference]: Start difference. First operand 3518 states. Second operand 3 states.
[2020-11-25 01:54:23,275 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:23,276 INFO  L93              Difference]: Finished difference Result 2377 states and 2580 transitions.
[2020-11-25 01:54:23,276 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:54:23,277 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2377 states and 2580 transitions.
[2020-11-25 01:54:23,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:23,314 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2377 states to 2377 states and 2580 transitions.
[2020-11-25 01:54:23,315 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:54:23,317 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 891
[2020-11-25 01:54:23,318 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2377 states and 2580 transitions.
[2020-11-25 01:54:23,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:23,325 INFO  L728         BuchiCegarLoop]: Abstraction has 2377 states and 2580 transitions.
[2020-11-25 01:54:23,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2377 states and 2580 transitions.
[2020-11-25 01:54:23,391 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2377 to 2377.
[2020-11-25 01:54:23,391 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2377 states.
[2020-11-25 01:54:23,398 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2377 states to 2377 states and 2580 transitions.
[2020-11-25 01:54:23,399 INFO  L751         BuchiCegarLoop]: Abstraction has 2377 states and 2580 transitions.
[2020-11-25 01:54:23,399 INFO  L631         BuchiCegarLoop]: Abstraction has 2377 states and 2580 transitions.
[2020-11-25 01:54:23,399 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:54:23,399 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2377 states and 2580 transitions.
[2020-11-25 01:54:23,407 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:23,407 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:23,407 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:23,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:23,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND TRUE   revert
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND TRUE   revert
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND TRUE   !(b_s45 <= a_s45)
[L1932]              revert := true;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND TRUE   revert
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND TRUE   !(b_s45 <= a_s45)
[L1932]              revert := true;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND TRUE   revert
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:23,415 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:23,415 INFO  L82        PathProgramCache]: Analyzing trace with hash -2067262717, now seen corresponding path program 1 times
[2020-11-25 01:54:23,416 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:23,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:23,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:54:23,456 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:23,456 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:54:23,458 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:23,458 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:54:23,458 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:54:23,458 INFO  L87              Difference]: Start difference. First operand 2377 states and 2580 transitions. cyclomatic complexity: 205 Second operand 4 states.
[2020-11-25 01:54:23,877 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:23,877 INFO  L93              Difference]: Finished difference Result 3527 states and 3988 transitions.
[2020-11-25 01:54:23,877 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:54:23,878 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3527 states and 3988 transitions.
[2020-11-25 01:54:23,891 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:54:23,906 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3527 states to 3423 states and 3878 transitions.
[2020-11-25 01:54:23,906 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1241
[2020-11-25 01:54:23,907 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1246
[2020-11-25 01:54:23,907 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3423 states and 3878 transitions.
[2020-11-25 01:54:23,912 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:23,913 INFO  L728         BuchiCegarLoop]: Abstraction has 3423 states and 3878 transitions.
[2020-11-25 01:54:23,915 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3423 states and 3878 transitions.
[2020-11-25 01:54:23,938 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3423 to 2401.
[2020-11-25 01:54:23,938 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2401 states.
[2020-11-25 01:54:23,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2401 states to 2401 states and 2564 transitions.
[2020-11-25 01:54:23,941 INFO  L751         BuchiCegarLoop]: Abstraction has 2401 states and 2564 transitions.
[2020-11-25 01:54:23,941 INFO  L631         BuchiCegarLoop]: Abstraction has 2401 states and 2564 transitions.
[2020-11-25 01:54:23,941 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:54:23,941 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2401 states and 2564 transitions.
[2020-11-25 01:54:23,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:23,946 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:23,946 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:23,948 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:23,948 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:23,951 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:23,952 INFO  L82        PathProgramCache]: Analyzing trace with hash 1580021962, now seen corresponding path program 1 times
[2020-11-25 01:54:23,952 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:23,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:24,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:54:24,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:24,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:54:24,111 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:24,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:54:24,111 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:54:24,111 INFO  L87              Difference]: Start difference. First operand 2401 states and 2564 transitions. cyclomatic complexity: 165 Second operand 15 states.
[2020-11-25 01:54:25,803 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:25,803 INFO  L93              Difference]: Finished difference Result 2621 states and 2831 transitions.
[2020-11-25 01:54:25,803 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:54:25,803 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2621 states and 2831 transitions.
[2020-11-25 01:54:25,810 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:54:25,819 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2621 states to 2621 states and 2831 transitions.
[2020-11-25 01:54:25,819 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 01:54:25,819 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 01:54:25,819 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2621 states and 2831 transitions.
[2020-11-25 01:54:25,822 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:25,822 INFO  L728         BuchiCegarLoop]: Abstraction has 2621 states and 2831 transitions.
[2020-11-25 01:54:25,825 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2621 states and 2831 transitions.
[2020-11-25 01:54:25,846 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2621 to 2551.
[2020-11-25 01:54:25,846 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2551 states.
[2020-11-25 01:54:25,849 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2551 states to 2551 states and 2731 transitions.
[2020-11-25 01:54:25,849 INFO  L751         BuchiCegarLoop]: Abstraction has 2551 states and 2731 transitions.
[2020-11-25 01:54:25,849 INFO  L631         BuchiCegarLoop]: Abstraction has 2551 states and 2731 transitions.
[2020-11-25 01:54:25,849 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:54:25,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2551 states and 2731 transitions.
[2020-11-25 01:54:25,853 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:54:25,854 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:25,854 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:25,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:25,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND TRUE   gas >= 0
[L3989]              assume a_s23 >= 0 && a_s23 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3990]              assume b_s23 >= 0 && b_s23 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3991]              assume msgvalue_MSG == 0;
[L3992]  CALL        call c_s23 := safeAdd~uint256~uint256_SafeMath(this, msgsender_MSG, msgvalue_MSG, a_s23, b_s23);
[L123]               havoc __exception;
[L124]               revert := false;
[L125]   COND TRUE   __exception
[L126]               __tmp__Balance := Balance;
[L127]               __tmp__DType := DType;
[L128]               __tmp__Alloc := Alloc;
[L129]               __tmp__balance_ADDR := balance_ADDR;
[L130]               __tmp__M_Ref_int := M_Ref_int;
[L131]               __tmp__sum_balances0 := sum_balances0;
[L132]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L133]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L134]               __tmp__sum_allowed1 := sum_allowed1;
[L135]               __tmp__Length := Length;
[L136]               __tmp__now := now;
[L137]               __tmp__owner_Owned := owner_Owned;
[L138]               __tmp__newOwner_Owned := newOwner_Owned;
[L139]               __tmp__symbol_MyToken := symbol_MyToken;
[L140]               __tmp__name_MyToken := name_MyToken;
[L141]               __tmp__decimals_MyToken := decimals_MyToken;
[L142]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L143]               __tmp__balances_MyToken := balances_MyToken;
[L144]               __tmp__allowed_MyToken := allowed_MyToken;
[L145]   CALL        call c_s23 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s23, b_s23);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND FALSE  !(!(c_s23 >= a_s23))
[L145]   RET         call c_s23 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s23, b_s23);
[L146]               assume revert || gas < 0;
[L3992]  RET         call c_s23 := safeAdd~uint256~uint256_SafeMath(this, msgsender_MSG, msgvalue_MSG, a_s23, b_s23);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:25,859 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:25,859 INFO  L82        PathProgramCache]: Analyzing trace with hash 1297898534, now seen corresponding path program 1 times
[2020-11-25 01:54:25,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:25,906 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:26,731 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 01:54:26,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:54:26,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 01:54:26,732 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:26,732 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 01:54:26,732 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=543, Unknown=0, NotChecked=0, Total=600
[2020-11-25 01:54:26,732 INFO  L87              Difference]: Start difference. First operand 2551 states and 2731 transitions. cyclomatic complexity: 184 Second operand 25 states.
[2020-11-25 01:54:31,940 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:31,940 INFO  L93              Difference]: Finished difference Result 2603 states and 2826 transitions.
[2020-11-25 01:54:31,940 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:54:31,941 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2603 states and 2826 transitions.
[2020-11-25 01:54:31,946 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 01:54:31,953 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2603 states to 2603 states and 2826 transitions.
[2020-11-25 01:54:31,953 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1001
[2020-11-25 01:54:31,954 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1001
[2020-11-25 01:54:31,954 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2603 states and 2826 transitions.
[2020-11-25 01:54:31,956 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:31,956 INFO  L728         BuchiCegarLoop]: Abstraction has 2603 states and 2826 transitions.
[2020-11-25 01:54:31,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2603 states and 2826 transitions.
[2020-11-25 01:54:31,982 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2603 to 2586.
[2020-11-25 01:54:31,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2586 states.
[2020-11-25 01:54:31,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2586 states to 2586 states and 2781 transitions.
[2020-11-25 01:54:31,986 INFO  L751         BuchiCegarLoop]: Abstraction has 2586 states and 2781 transitions.
[2020-11-25 01:54:31,986 INFO  L631         BuchiCegarLoop]: Abstraction has 2586 states and 2781 transitions.
[2020-11-25 01:54:31,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:54:31,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2586 states and 2781 transitions.
[2020-11-25 01:54:31,989 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:54:31,990 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:31,990 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:31,990 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:31,991 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:31,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:31,994 INFO  L82        PathProgramCache]: Analyzing trace with hash -1695540219, now seen corresponding path program 1 times
[2020-11-25 01:54:31,994 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:32,002 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:32,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 01:54:32,065 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:32,065 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 01:54:32,065 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:32,065 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:54:32,065 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:54:32,065 INFO  L87              Difference]: Start difference. First operand 2586 states and 2781 transitions. cyclomatic complexity: 201 Second operand 14 states.
[2020-11-25 01:54:33,307 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:33,307 INFO  L93              Difference]: Finished difference Result 2667 states and 2916 transitions.
[2020-11-25 01:54:33,307 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:54:33,307 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2667 states and 2916 transitions.
[2020-11-25 01:54:33,322 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 01:54:33,331 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2667 states to 2667 states and 2916 transitions.
[2020-11-25 01:54:33,331 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1010
[2020-11-25 01:54:33,331 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1010
[2020-11-25 01:54:33,332 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2667 states and 2916 transitions.
[2020-11-25 01:54:33,334 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:33,334 INFO  L728         BuchiCegarLoop]: Abstraction has 2667 states and 2916 transitions.
[2020-11-25 01:54:33,337 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2667 states and 2916 transitions.
[2020-11-25 01:54:33,359 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2667 to 2586.
[2020-11-25 01:54:33,359 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2586 states.
[2020-11-25 01:54:33,362 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2586 states to 2586 states and 2781 transitions.
[2020-11-25 01:54:33,362 INFO  L751         BuchiCegarLoop]: Abstraction has 2586 states and 2781 transitions.
[2020-11-25 01:54:33,362 INFO  L631         BuchiCegarLoop]: Abstraction has 2586 states and 2781 transitions.
[2020-11-25 01:54:33,362 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:54:33,362 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2586 states and 2781 transitions.
[2020-11-25 01:54:33,366 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:54:33,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:33,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:33,368 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:33,368 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND TRUE   !(c_s23 >= a_s23)
[L1906]              revert := true;
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:33,373 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:33,373 INFO  L82        PathProgramCache]: Analyzing trace with hash -1314250208, now seen corresponding path program 1 times
[2020-11-25 01:54:33,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:33,387 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:33,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 01:54:33,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:33,455 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:54:33,455 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:33,456 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:54:33,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:54:33,456 INFO  L87              Difference]: Start difference. First operand 2586 states and 2781 transitions. cyclomatic complexity: 201 Second operand 9 states.
[2020-11-25 01:54:34,176 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:34,177 INFO  L93              Difference]: Finished difference Result 2657 states and 2883 transitions.
[2020-11-25 01:54:34,177 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:54:34,177 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2657 states and 2883 transitions.
[2020-11-25 01:54:34,205 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:54:34,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2657 states to 2657 states and 2883 transitions.
[2020-11-25 01:54:34,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1005
[2020-11-25 01:54:34,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1005
[2020-11-25 01:54:34,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2657 states and 2883 transitions.
[2020-11-25 01:54:34,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:34,220 INFO  L728         BuchiCegarLoop]: Abstraction has 2657 states and 2883 transitions.
[2020-11-25 01:54:34,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2657 states and 2883 transitions.
[2020-11-25 01:54:34,236 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2657 to 2590.
[2020-11-25 01:54:34,236 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2590 states.
[2020-11-25 01:54:34,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2590 states to 2590 states and 2785 transitions.
[2020-11-25 01:54:34,239 INFO  L751         BuchiCegarLoop]: Abstraction has 2590 states and 2785 transitions.
[2020-11-25 01:54:34,239 INFO  L631         BuchiCegarLoop]: Abstraction has 2590 states and 2785 transitions.
[2020-11-25 01:54:34,239 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:54:34,239 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2590 states and 2785 transitions.
[2020-11-25 01:54:34,242 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:54:34,242 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:34,242 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:34,243 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:34,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND FALSE  !(revert)
[L2368]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] - __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2369]              __tmp__allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2370]              __tmp__sum_allowed1[from_s474] := __tmp__sum_allowed1[from_s474] + __tmp__allowed_MyToken[this][from_s474][msgsender_MSG];
[L2371]  COND TRUE   __tmp__DType[this] == MyToken
[L2372]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L1904]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1905]  COND FALSE  !(!(c_s23 >= a_s23))
[L2372]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s474], tokens_s474);
[L2373]  COND FALSE  !(revert)
[L2379]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s474];
[L2380]              __tmp__balances_MyToken[this][to_s474] := __var_8;
[L2381]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s474];
[L2382]              success_s474 := true;
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:34,254 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:34,254 INFO  L82        PathProgramCache]: Analyzing trace with hash 136820344, now seen corresponding path program 1 times
[2020-11-25 01:54:34,254 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:34,262 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:34,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 01:54:34,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:34,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 01:54:34,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:34,287 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 01:54:34,287 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 01:54:34,287 INFO  L87              Difference]: Start difference. First operand 2590 states and 2785 transitions. cyclomatic complexity: 201 Second operand 5 states.
[2020-11-25 01:54:34,497 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:34,497 INFO  L93              Difference]: Finished difference Result 3299 states and 3678 transitions.
[2020-11-25 01:54:34,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:54:34,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3299 states and 3678 transitions.
[2020-11-25 01:54:34,505 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:54:34,512 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3299 states to 2503 states and 2881 transitions.
[2020-11-25 01:54:34,512 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 789
[2020-11-25 01:54:34,512 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 789
[2020-11-25 01:54:34,512 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2503 states and 2881 transitions.
[2020-11-25 01:54:34,515 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:34,515 INFO  L728         BuchiCegarLoop]: Abstraction has 2503 states and 2881 transitions.
[2020-11-25 01:54:34,516 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2503 states and 2881 transitions.
[2020-11-25 01:54:34,530 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2503 to 1771.
[2020-11-25 01:54:34,530 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1771 states.
[2020-11-25 01:54:34,532 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1771 states to 1771 states and 1912 transitions.
[2020-11-25 01:54:34,532 INFO  L751         BuchiCegarLoop]: Abstraction has 1771 states and 1912 transitions.
[2020-11-25 01:54:34,532 INFO  L631         BuchiCegarLoop]: Abstraction has 1771 states and 1912 transitions.
[2020-11-25 01:54:34,532 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:54:34,532 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1771 states and 1912 transitions.
[2020-11-25 01:54:34,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:34,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:34,534 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:34,535 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:34,535 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:34,539 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:34,539 INFO  L82        PathProgramCache]: Analyzing trace with hash -1633165571, now seen corresponding path program 1 times
[2020-11-25 01:54:34,539 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:34,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:34,590 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 01:54:34,590 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:34,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:54:34,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:34,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:54:34,591 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:54:34,591 INFO  L87              Difference]: Start difference. First operand 1771 states and 1912 transitions. cyclomatic complexity: 145 Second operand 7 states.
[2020-11-25 01:54:34,908 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:34,908 INFO  L93              Difference]: Finished difference Result 1833 states and 1998 transitions.
[2020-11-25 01:54:34,908 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:54:34,908 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1833 states and 1998 transitions.
[2020-11-25 01:54:34,911 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:54:34,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1833 states to 1833 states and 1998 transitions.
[2020-11-25 01:54:34,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 638
[2020-11-25 01:54:34,915 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 638
[2020-11-25 01:54:34,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1833 states and 1998 transitions.
[2020-11-25 01:54:34,917 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:34,917 INFO  L728         BuchiCegarLoop]: Abstraction has 1833 states and 1998 transitions.
[2020-11-25 01:54:34,918 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1833 states and 1998 transitions.
[2020-11-25 01:54:34,927 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1833 to 1771.
[2020-11-25 01:54:34,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1771 states.
[2020-11-25 01:54:34,928 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1771 states to 1771 states and 1912 transitions.
[2020-11-25 01:54:34,929 INFO  L751         BuchiCegarLoop]: Abstraction has 1771 states and 1912 transitions.
[2020-11-25 01:54:34,929 INFO  L631         BuchiCegarLoop]: Abstraction has 1771 states and 1912 transitions.
[2020-11-25 01:54:34,929 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:54:34,929 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1771 states and 1912 transitions.
[2020-11-25 01:54:34,930 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:34,930 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:34,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:34,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:34,931 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:34,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:34,934 INFO  L82        PathProgramCache]: Analyzing trace with hash 1576185113, now seen corresponding path program 1 times
[2020-11-25 01:54:34,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:35,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:35,702 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 51
[2020-11-25 01:54:35,771 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:35,837 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:36,162 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 77
[2020-11-25 01:54:36,459 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 95
[2020-11-25 01:54:37,143 WARN  L188               SmtUtils]: Spent 583.00 ms on a formula simplification. DAG size of input: 215 DAG size of output: 128
[2020-11-25 01:54:37,653 WARN  L188               SmtUtils]: Spent 392.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 121
[2020-11-25 01:54:38,120 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 122
[2020-11-25 01:54:39,848 WARN  L188               SmtUtils]: Spent 1.56 s on a formula simplification. DAG size of input: 438 DAG size of output: 178
[2020-11-25 01:54:40,195 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:40,195 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:40,195 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:40,196 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:40,196 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:40,196 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 01:54:40,268 WARN  L188               SmtUtils]: Spent 290.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 76
[2020-11-25 01:54:40,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 01:54:40,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:54:40,610 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 01:54:40,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:40,610 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 01:54:40,610 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=93, Invalid=963, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 01:54:40,610 INFO  L87              Difference]: Start difference. First operand 1771 states and 1912 transitions. cyclomatic complexity: 145 Second operand 33 states.
[2020-11-25 01:54:47,010 WARN  L188               SmtUtils]: Spent 581.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 144
[2020-11-25 01:54:47,206 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 134
[2020-11-25 01:54:47,390 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification that was a NOOP. DAG size: 135
[2020-11-25 01:54:48,023 WARN  L188               SmtUtils]: Spent 486.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 125
[2020-11-25 01:54:53,312 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:53,312 INFO  L93              Difference]: Finished difference Result 1798 states and 1966 transitions.
[2020-11-25 01:54:53,312 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 01:54:53,312 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1798 states and 1966 transitions.
[2020-11-25 01:54:53,315 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:54:53,318 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1798 states to 1798 states and 1966 transitions.
[2020-11-25 01:54:53,318 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 622
[2020-11-25 01:54:53,318 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 622
[2020-11-25 01:54:53,318 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1798 states and 1966 transitions.
[2020-11-25 01:54:53,320 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:53,320 INFO  L728         BuchiCegarLoop]: Abstraction has 1798 states and 1966 transitions.
[2020-11-25 01:54:53,321 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1798 states and 1966 transitions.
[2020-11-25 01:54:53,330 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1798 to 1785.
[2020-11-25 01:54:53,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1785 states.
[2020-11-25 01:54:53,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1785 states to 1785 states and 1937 transitions.
[2020-11-25 01:54:53,331 INFO  L751         BuchiCegarLoop]: Abstraction has 1785 states and 1937 transitions.
[2020-11-25 01:54:53,331 INFO  L631         BuchiCegarLoop]: Abstraction has 1785 states and 1937 transitions.
[2020-11-25 01:54:53,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:54:53,332 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1785 states and 1937 transitions.
[2020-11-25 01:54:53,333 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:54:53,333 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:53,333 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:53,335 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:53,335 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND FALSE  !(choice == 10)
[L4057]  COND FALSE  !(choice == 9)
[L4063]  COND FALSE  !(choice == 8)
[L4069]  COND FALSE  !(choice == 7)
[L4075]  COND FALSE  !(choice == 6)
[L4081]  COND FALSE  !(choice == 5)
[L4087]  COND FALSE  !(choice == 4)
[L4093]  COND FALSE  !(choice == 3)
[L4099]  COND FALSE  !(choice == 2)
[L4105]  COND TRUE   choice == 1
[L4106]              gas := gas - 21000;
[L4107]  COND TRUE   gas >= 0
[L4108]              assume tokens_s533 >= 0 && tokens_s533 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4109]              assume msgvalue_MSG == 0;
[L4110]  CALL        call success_s533 := approveAndCall~address~uint256~bytes_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s533, tokens_s533, data_s533);
[L1157]              havoc __exception;
[L1158]              revert := false;
[L1159]  COND FALSE  !(__exception)
[L1182]  CALL        call success_s533 := approveAndCall~address~uint256~bytes_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s533, tokens_s533, data_s533);
[L2462]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s533];
[L2463]              allowed_MyToken[this][msgsender_MSG][spender_s533] := tokens_s533;
[L2464]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s533];
[L2465]              assert { :EventEmitted "Approval_MyToken" } true;
[L2466]              assume DType[spender_s533] == ApproveAndCallFallBack;
[L2467]              __var_9 := spender_s533;
[L2468]              __var_11 := this;
[L2470]              success_s533 := true;
[L1182]  RET         call success_s533 := approveAndCall~address~uint256~bytes_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s533, tokens_s533, data_s533);
[L1183]              assume !revert && gas >= 0;
[L4110]  RET         call success_s533 := approveAndCall~address~uint256~bytes_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s533, tokens_s533, data_s533);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:53,339 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:53,339 INFO  L82        PathProgramCache]: Analyzing trace with hash 1615986224, now seen corresponding path program 1 times
[2020-11-25 01:54:53,340 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:53,394 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:54,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 13 proven. 3 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-11-25 01:54:54,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:54:54,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:54:54,585 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:54,585 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:54:54,585 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=894, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:54:54,585 INFO  L87              Difference]: Start difference. First operand 1785 states and 1937 transitions. cyclomatic complexity: 158 Second operand 32 states.
[2020-11-25 01:54:59,484 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:59,484 INFO  L93              Difference]: Finished difference Result 1818 states and 2004 transitions.
[2020-11-25 01:54:59,484 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 01:54:59,485 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1818 states and 2004 transitions.
[2020-11-25 01:54:59,487 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:54:59,491 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1818 states to 1818 states and 2004 transitions.
[2020-11-25 01:54:59,491 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 624
[2020-11-25 01:54:59,491 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 624
[2020-11-25 01:54:59,491 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1818 states and 2004 transitions.
[2020-11-25 01:54:59,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:59,493 INFO  L728         BuchiCegarLoop]: Abstraction has 1818 states and 2004 transitions.
[2020-11-25 01:54:59,494 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1818 states and 2004 transitions.
[2020-11-25 01:54:59,502 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1818 to 1785.
[2020-11-25 01:54:59,502 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1785 states.
[2020-11-25 01:54:59,504 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1785 states to 1785 states and 1937 transitions.
[2020-11-25 01:54:59,504 INFO  L751         BuchiCegarLoop]: Abstraction has 1785 states and 1937 transitions.
[2020-11-25 01:54:59,504 INFO  L631         BuchiCegarLoop]: Abstraction has 1785 states and 1937 transitions.
[2020-11-25 01:54:59,504 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:54:59,504 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1785 states and 1937 transitions.
[2020-11-25 01:54:59,506 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:54:59,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:59,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:59,507 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:59,507 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_MyToken := symbol_MyToken;
[L1064]              __tmp__name_MyToken := name_MyToken;
[L1065]              __tmp__decimals_MyToken := decimals_MyToken;
[L1066]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1067]              __tmp__balances_MyToken := balances_MyToken;
[L1068]              __tmp__allowed_MyToken := allowed_MyToken;
[L1069]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2349]  COND TRUE   __tmp__DType[this] == MyToken
[L2350]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L1922]  COND FALSE  !(!(b_s45 <= a_s45))
[L1926]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2350]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][from_s474], tokens_s474);
[L2351]  COND FALSE  !(revert)
[L2357]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][from_s474];
[L2358]              __tmp__balances_MyToken[this][from_s474] := __var_6;
[L2359]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][from_s474];
[L2360]  COND TRUE   __tmp__DType[this] == MyToken
[L2361]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1922]  COND TRUE   !(b_s45 <= a_s45)
[L1923]              revert := true;
[L2361]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2362]  COND TRUE   revert
[L1069]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1070]              assume revert || gas < 0;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:59,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:59,510 INFO  L82        PathProgramCache]: Analyzing trace with hash 1857818040, now seen corresponding path program 1 times
[2020-11-25 01:54:59,510 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:59,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:59,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 01:54:59,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:59,561 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:54:59,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:59,562 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:54:59,562 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:54:59,562 INFO  L87              Difference]: Start difference. First operand 1785 states and 1937 transitions. cyclomatic complexity: 158 Second operand 7 states.
[2020-11-25 01:54:59,799 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:59,799 INFO  L93              Difference]: Finished difference Result 1823 states and 1997 transitions.
[2020-11-25 01:54:59,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:54:59,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1823 states and 1997 transitions.
[2020-11-25 01:54:59,802 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:54:59,806 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1823 states to 1783 states and 1955 transitions.
[2020-11-25 01:54:59,806 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 631
[2020-11-25 01:54:59,806 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 631
[2020-11-25 01:54:59,806 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1783 states and 1955 transitions.
[2020-11-25 01:54:59,807 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:59,807 INFO  L728         BuchiCegarLoop]: Abstraction has 1783 states and 1955 transitions.
[2020-11-25 01:54:59,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1783 states and 1955 transitions.
[2020-11-25 01:54:59,816 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1783 to 1713.
[2020-11-25 01:54:59,816 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1713 states.
[2020-11-25 01:54:59,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1713 states to 1713 states and 1846 transitions.
[2020-11-25 01:54:59,818 INFO  L751         BuchiCegarLoop]: Abstraction has 1713 states and 1846 transitions.
[2020-11-25 01:54:59,818 INFO  L631         BuchiCegarLoop]: Abstraction has 1713 states and 1846 transitions.
[2020-11-25 01:54:59,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:54:59,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1713 states and 1846 transitions.
[2020-11-25 01:54:59,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:54:59,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:59,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:59,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:59,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2298]  COND TRUE   DType[this] == MyToken
[L2299]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2299]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2300]  COND FALSE  !(revert)
[L2306]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2307]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2308]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2309]  COND TRUE   DType[this] == MyToken
[L2310]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2310]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2311]  COND FALSE  !(revert)
[L2317]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2318]              balances_MyToken[this][to_s387] := __var_5;
[L2319]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2320]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2321]              success_s387 := true;
[L958]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L959]               assume !revert && gas >= 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:59,824 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:59,824 INFO  L82        PathProgramCache]: Analyzing trace with hash -1350926506, now seen corresponding path program 1 times
[2020-11-25 01:54:59,825 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:59,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:00,240 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 01:55:00,240 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:00,240 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 01:55:00,240 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:00,240 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 01:55:00,240 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=541, Unknown=0, NotChecked=0, Total=600
[2020-11-25 01:55:00,241 INFO  L87              Difference]: Start difference. First operand 1713 states and 1846 transitions. cyclomatic complexity: 137 Second operand 25 states.
[2020-11-25 01:55:03,331 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:03,331 INFO  L93              Difference]: Finished difference Result 1732 states and 1871 transitions.
[2020-11-25 01:55:03,331 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 01:55:03,332 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1732 states and 1871 transitions.
[2020-11-25 01:55:03,334 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:03,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1732 states to 1732 states and 1871 transitions.
[2020-11-25 01:55:03,337 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 607
[2020-11-25 01:55:03,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 607
[2020-11-25 01:55:03,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1732 states and 1871 transitions.
[2020-11-25 01:55:03,339 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:03,339 INFO  L728         BuchiCegarLoop]: Abstraction has 1732 states and 1871 transitions.
[2020-11-25 01:55:03,340 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1732 states and 1871 transitions.
[2020-11-25 01:55:03,348 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1732 to 1717.
[2020-11-25 01:55:03,348 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1717 states.
[2020-11-25 01:55:03,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1717 states to 1717 states and 1856 transitions.
[2020-11-25 01:55:03,349 INFO  L751         BuchiCegarLoop]: Abstraction has 1717 states and 1856 transitions.
[2020-11-25 01:55:03,349 INFO  L631         BuchiCegarLoop]: Abstraction has 1717 states and 1856 transitions.
[2020-11-25 01:55:03,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:55:03,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1717 states and 1856 transitions.
[2020-11-25 01:55:03,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:03,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:03,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:03,352 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:03,352 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:03,356 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:03,356 INFO  L82        PathProgramCache]: Analyzing trace with hash -1165147381, now seen corresponding path program 1 times
[2020-11-25 01:55:03,356 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:03,424 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:04,369 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 85
[2020-11-25 01:55:05,005 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification. DAG size of input: 296 DAG size of output: 92
[2020-11-25 01:55:05,338 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 311 DAG size of output: 52
[2020-11-25 01:55:06,207 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 83
[2020-11-25 01:55:06,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 88 backedges. 4 proven. 82 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 01:55:06,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:06,826 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 01:55:06,826 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:06,826 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 01:55:06,827 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=2200, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 01:55:06,827 INFO  L87              Difference]: Start difference. First operand 1717 states and 1856 transitions. cyclomatic complexity: 144 Second operand 49 states.
[2020-11-25 01:55:11,125 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 109 DAG size of output: 93
[2020-11-25 01:55:11,328 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 126 DAG size of output: 116
[2020-11-25 01:55:11,491 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 106
[2020-11-25 01:55:16,304 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:16,305 INFO  L93              Difference]: Finished difference Result 1766 states and 1914 transitions.
[2020-11-25 01:55:16,305 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 01:55:16,306 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1766 states and 1914 transitions.
[2020-11-25 01:55:16,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:16,312 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1766 states to 1766 states and 1914 transitions.
[2020-11-25 01:55:16,312 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 609
[2020-11-25 01:55:16,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 609
[2020-11-25 01:55:16,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1766 states and 1914 transitions.
[2020-11-25 01:55:16,313 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:16,313 INFO  L728         BuchiCegarLoop]: Abstraction has 1766 states and 1914 transitions.
[2020-11-25 01:55:16,314 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1766 states and 1914 transitions.
[2020-11-25 01:55:16,321 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1766 to 1723.
[2020-11-25 01:55:16,321 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1723 states.
[2020-11-25 01:55:16,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1723 states to 1723 states and 1864 transitions.
[2020-11-25 01:55:16,323 INFO  L751         BuchiCegarLoop]: Abstraction has 1723 states and 1864 transitions.
[2020-11-25 01:55:16,323 INFO  L631         BuchiCegarLoop]: Abstraction has 1723 states and 1864 transitions.
[2020-11-25 01:55:16,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 01:55:16,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1723 states and 1864 transitions.
[2020-11-25 01:55:16,325 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:16,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:16,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:16,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:16,326 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_MyToken0 := true;
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:16,329 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:16,329 INFO  L82        PathProgramCache]: Analyzing trace with hash 1363831797, now seen corresponding path program 1 times
[2020-11-25 01:55:16,329 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:16,393 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:17,035 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 12
[2020-11-25 01:55:18,489 WARN  L188               SmtUtils]: Spent 680.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 117
[2020-11-25 01:55:18,897 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 73
[2020-11-25 01:55:19,439 INFO  L134       CoverageAnalysis]: Checked inductivity of 88 backedges. 3 proven. 5 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-11-25 01:55:19,439 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:19,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 01:55:19,440 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:19,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 01:55:19,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=117, Invalid=1215, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 01:55:19,440 INFO  L87              Difference]: Start difference. First operand 1723 states and 1864 transitions. cyclomatic complexity: 146 Second operand 37 states.
[2020-11-25 01:55:22,671 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 104
[2020-11-25 01:55:25,629 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:25,629 INFO  L93              Difference]: Finished difference Result 1744 states and 1894 transitions.
[2020-11-25 01:55:25,629 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:55:25,629 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1744 states and 1894 transitions.
[2020-11-25 01:55:25,632 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:25,636 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1744 states to 1744 states and 1894 transitions.
[2020-11-25 01:55:25,636 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 609
[2020-11-25 01:55:25,636 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 609
[2020-11-25 01:55:25,636 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1744 states and 1894 transitions.
[2020-11-25 01:55:25,637 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:25,637 INFO  L728         BuchiCegarLoop]: Abstraction has 1744 states and 1894 transitions.
[2020-11-25 01:55:25,638 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1744 states and 1894 transitions.
[2020-11-25 01:55:25,648 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1744 to 1721.
[2020-11-25 01:55:25,648 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1721 states.
[2020-11-25 01:55:25,653 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1721 states to 1721 states and 1859 transitions.
[2020-11-25 01:55:25,653 INFO  L751         BuchiCegarLoop]: Abstraction has 1721 states and 1859 transitions.
[2020-11-25 01:55:25,653 INFO  L631         BuchiCegarLoop]: Abstraction has 1721 states and 1859 transitions.
[2020-11-25 01:55:25,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 01:55:25,654 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1721 states and 1859 transitions.
[2020-11-25 01:55:25,657 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:25,657 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:25,657 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:25,659 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:25,659 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:25,663 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:25,664 INFO  L82        PathProgramCache]: Analyzing trace with hash 1907317260, now seen corresponding path program 2 times
[2020-11-25 01:55:25,664 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:25,760 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:26,861 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 160 DAG size of output: 92
[2020-11-25 01:55:27,340 INFO  L134       CoverageAnalysis]: Checked inductivity of 240 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-11-25 01:55:27,340 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:27,340 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 01:55:27,341 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:27,341 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 01:55:27,341 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=854, Unknown=0, NotChecked=0, Total=930
[2020-11-25 01:55:27,341 INFO  L87              Difference]: Start difference. First operand 1721 states and 1859 transitions. cyclomatic complexity: 143 Second operand 31 states.
[2020-11-25 01:55:34,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:34,125 INFO  L93              Difference]: Finished difference Result 1738 states and 1880 transitions.
[2020-11-25 01:55:34,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:55:34,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1738 states and 1880 transitions.
[2020-11-25 01:55:34,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:34,131 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1738 states to 1738 states and 1880 transitions.
[2020-11-25 01:55:34,131 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 607
[2020-11-25 01:55:34,131 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 607
[2020-11-25 01:55:34,131 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1738 states and 1880 transitions.
[2020-11-25 01:55:34,132 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:34,132 INFO  L728         BuchiCegarLoop]: Abstraction has 1738 states and 1880 transitions.
[2020-11-25 01:55:34,133 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1738 states and 1880 transitions.
[2020-11-25 01:55:34,140 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1738 to 1721.
[2020-11-25 01:55:34,140 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1721 states.
[2020-11-25 01:55:34,141 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1721 states to 1721 states and 1859 transitions.
[2020-11-25 01:55:34,142 INFO  L751         BuchiCegarLoop]: Abstraction has 1721 states and 1859 transitions.
[2020-11-25 01:55:34,142 INFO  L631         BuchiCegarLoop]: Abstraction has 1721 states and 1859 transitions.
[2020-11-25 01:55:34,142 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 01:55:34,142 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1721 states and 1859 transitions.
[2020-11-25 01:55:34,143 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:55:34,143 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:55:34,143 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:55:34,144 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:55:34,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_MyToken0 := false;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND TRUE   choice == 12
[L4037]              gas := gas - 21000;
[L4038]  COND TRUE   gas >= 0
[L4039]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4040]              assume msgvalue_MSG == 0;
[L4041]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2298]  COND TRUE   DType[this] == MyToken
[L2299]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2299]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2300]  COND FALSE  !(revert)
[L2306]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2307]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2308]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2309]  COND TRUE   DType[this] == MyToken
[L2310]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2310]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2311]  COND FALSE  !(revert)
[L2317]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2318]              balances_MyToken[this][to_s387] := __var_5;
[L2319]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2320]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2321]              success_s387 := true;
[L958]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L959]               assume !revert && gas >= 0;
[L4041]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND FALSE  !(choice == 11)
[L4050]  COND TRUE   choice == 10
[L4051]              gas := gas - 21000;
[L4052]  COND TRUE   gas >= 0
[L4053]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4054]              assume msgvalue_MSG == 0;
[L4055]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s474 && p1 != to_s474) && (p2 != from_s474 || p3 != msgsender_MSG)) && from_s474 != to_s474) && tokens_s474 <= balances_MyToken[this][from_s474]) && tokens_s474 <= allowed_MyToken[this][from_s474][msgsender_MSG]) && balances_MyToken[this][to_s474] + tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s474 >= 0) && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s474] >= 0) && balances_MyToken[this][to_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][from_s474] >= 0) && balances_MyToken[this][from_s474] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_MyToken[this][from_s474][msgsender_MSG] >= 0) && allowed_MyToken[this][from_s474][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_MyToken0 := true;
[L3]                 call_transferFrom_MyToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2391]  COND TRUE   DType[this] == MyToken
[L2392]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2393]  COND FALSE  !(revert)
[L2399]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2400]              balances_MyToken[this][from_s474] := __var_6;
[L2401]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2402]  COND TRUE   DType[this] == MyToken
[L2403]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1931]  COND FALSE  !(!(b_s45 <= a_s45))
[L1935]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2403]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2404]  COND FALSE  !(revert)
[L2410]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2411]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2412]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2413]  COND TRUE   DType[this] == MyToken
[L2414]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1913]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1914]  COND FALSE  !(!(c_s23 >= a_s23))
[L2414]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2415]  COND FALSE  !(revert)
[L2421]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2422]              balances_MyToken[this][to_s474] := __var_8;
[L2423]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2424]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2425]              success_s474 := true;
[L1072]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s474 == true && balances_MyToken[this][from_s474] == old(balances_MyToken[this][from_s474]) - tokens_s474) && balances_MyToken[this][to_s474] == old(balances_MyToken[this][to_s474]) + tokens_s474) && allowed_MyToken[this][from_s474][msgsender_MSG] == old(allowed_MyToken[this][from_s474][msgsender_MSG]) - tokens_s474) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this][p1] == old(balances_MyToken[this][p1])) && allowed_MyToken[this][p2][p3] == old(allowed_MyToken[this][p2][p3])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4055]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:55:34,147 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:55:34,148 INFO  L82        PathProgramCache]: Analyzing trace with hash 1197094089, now seen corresponding path program 1 times
[2020-11-25 01:55:34,148 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:55:34,197 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:55:34,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 215 backedges. 4 proven. 2 refuted. 0 times theorem prover too weak. 209 trivial. 0 not checked.
[2020-11-25 01:55:34,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:55:34,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 01:55:34,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:55:34,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 01:55:34,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=670, Unknown=0, NotChecked=0, Total=756
[2020-11-25 01:55:34,564 INFO  L87              Difference]: Start difference. First operand 1721 states and 1859 transitions. cyclomatic complexity: 143 Second operand 28 states.
[2020-11-25 01:55:36,173 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:55:36,173 INFO  L93              Difference]: Finished difference Result 981 states and 1091 transitions.
[2020-11-25 01:55:36,173 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 01:55:36,173 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 981 states and 1091 transitions.
[2020-11-25 01:55:36,175 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:55:36,175 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 981 states to 0 states and 0 transitions.
[2020-11-25 01:55:36,176 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:55:36,176 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:55:36,176 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:55:36,176 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:55:36,176 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:55:36,176 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:55:36,176 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:55:36,176 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 01:55:36,176 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:55:36,176 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:55:36,176 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:55:36,179 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:55:36 BasicIcfg
[2020-11-25 01:55:36,179 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:55:36,180 INFO  L168              Benchmark]: Toolchain (without parser) took 75900.24 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 935.2 MB in the beginning and 1.4 GB in the end (delta: -500.1 MB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,180 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,180 INFO  L168              Benchmark]: Boogie Preprocessor took 85.56 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,180 INFO  L168              Benchmark]: UtopiaSpecLang took 60.19 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,181 INFO  L168              Benchmark]: Boogie Printer took 14.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,181 INFO  L168              Benchmark]: RCFGBuilder took 713.73 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 795.6 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,181 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.34 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 792.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,182 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1334.75 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 198.7 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -216.8 MB). Peak memory consumption was 166.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,182 INFO  L168              Benchmark]: BlockEncodingV2 took 122.00 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 958.9 MB in the end (delta: 49.9 MB). Peak memory consumption was 49.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,182 INFO  L168              Benchmark]: BuchiAutomizer took 73528.14 ms. Allocated memory was 1.2 GB in the beginning and 3.9 GB in the end (delta: 2.6 GB). Free memory was 958.9 MB in the beginning and 1.4 GB in the end (delta: -476.5 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-11-25 01:55:36,184 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3574 locations, 6133 edges
  - StatisticsResult: Encoded RCFG
    3518 locations, 5985 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 85.56 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 60.19 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 713.73 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 795.6 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.34 ms. Allocated memory is still 1.0 GB. Free memory was 795.6 MB in the beginning and 792.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1334.75 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 198.7 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -216.8 MB). Peak memory consumption was 166.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 122.00 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 958.9 MB in the end (delta: 49.9 MB). Peak memory consumption was 49.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 73528.14 ms. Allocated memory was 1.2 GB in the beginning and 3.9 GB in the end (delta: 2.6 GB). Free memory was 958.9 MB in the beginning and 1.4 GB in the end (delta: -476.5 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1507 locations, 1893 edges
  - StatisticsResult: BuchiProgram size
    3574 locations, 6133 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 16 terminating modules (16 trivial, 0 deterministic, 0 nondeterministic). 16 modules have a trivial ranking function, the largest among these consists of 49 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 73.4s and 17 iterations.  TraceHistogramMax:3. Analysis of lassos took 17.7s. Construction of modules took 42.8s. BÃ¼chi inclusion checks took 12.1s. Highest rank in rank-based complementation 0. Minimization of det autom 16. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 15 MinimizatonAttempts, 2265 StatesRemovedByMinimization, 14 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 2590 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 31926 SDtfs, 42731 SDslu, 138506 SDs, 0 SdLazy, 257414 SolverSat, 6709 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 42.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU16 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_MyToken0) ==> ( <>(success_transferFrom_MyToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
