This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:02:51,891 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:02:51,892 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:02:51,901 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:02:51,901 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:02:51,901 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:02:51,902 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:02:51,903 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:02:51,904 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:02:51,905 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:02:51,906 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:02:51,906 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:02:51,906 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:02:51,907 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:02:51,908 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:02:51,908 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:02:51,909 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:02:51,910 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:02:51,911 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:02:51,913 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:02:51,914 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:02:51,914 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:02:51,915 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:02:51,915 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:02:51,915 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:02:51,916 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:02:51,916 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:02:51,917 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:02:51,917 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:02:51,917 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:02:51,917 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:02:51,917 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:02:51,918 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:02:51,918 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:02:51,919 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:02:51,919 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:02:51,919 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:02:51,919 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:02:51,919 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:02:51,920 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:02:51,920 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:02:51,920 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:02:51,926 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:02:51,926 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:02:51,927 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:02:51,927 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:02:51,927 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:02:51,927 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:02:51,927 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:02:51,927 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:02:51,927 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:02:51,927 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:02:51,927 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:02:51,928 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:02:51,928 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:02:51,928 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:02:51,929 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:02:51,929 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:02:51,945 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:02:51,956 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:02:51,959 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:02:51,960 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:02:51,960 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:02:51,961 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl
[2020-11-25 15:02:51,961 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl'
[2020-11-25 15:02:52,063 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:02:52,064 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:02:52,066 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:02:52,066 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:02:52,066 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:02:52,087 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,088 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,124 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,125 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,149 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,163 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,173 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,187 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:02:52,187 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:02:52,188 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:02:52,189 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:02:52,193 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/1) ...
[2020-11-25 15:02:52,212 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 15:02:52,217 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 15:02:52,224 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 15:02:52,233 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s481==_to_s481 && ( _value_s481>balances_BasicToken[this][_from_s481] || _value_s481>allowed_StandardToken[this][_from_s481][msg.sender] ) ) && _value_s481>=0 ) && _value_s481<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s481]>=0 ) && balances_BasicToken[this][_to_s481]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s481]>=0 ) && balances_BasicToken[this][_from_s481]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s481][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s481][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IdentifierExpression[_to_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s481,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:02:52,243 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.transferFrom(from, to, value), from == to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 15:02:52,244 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_StandardToken0) ==> ( <>AP(fail_transferFrom_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:02:52,258 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:52 PropertyContainer
[2020-11-25 15:02:52,258 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:02:52,258 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:02:52,259 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:02:52,259 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:02:52,260 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/2) ...
[2020-11-25 15:02:52,260 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:02:52,260 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:02:52,279 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:52" (2/2) ...
[2020-11-25 15:02:52,279 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:02:52,280 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:02:52,280 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:02:52,280 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:02:52,281 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/2) ...
[2020-11-25 15:02:52,333 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:02:52,333 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:02:52,333 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:02:52,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:02:52,333 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 15:02:52,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 15:02:52,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 15:02:52,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 15:02:52,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 15:02:52,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 15:02:52,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 15:02:52,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken
[2020-11-25 15:02:52,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken
[2020-11-25 15:02:52,335 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken
[2020-11-25 15:02:52,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken
[2020-11-25 15:02:52,336 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken
[2020-11-25 15:02:52,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken
[2020-11-25 15:02:52,336 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken
[2020-11-25 15:02:52,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken
[2020-11-25 15:02:52,336 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 15:02:52,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 15:02:52,336 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 15:02:52,336 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 15:02:52,336 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken
[2020-11-25 15:02:52,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken
[2020-11-25 15:02:52,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken
[2020-11-25 15:02:52,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 15:02:52,337 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 15:02:52,337 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 15:02:52,338 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 15:02:52,338 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 15:02:52,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 15:02:52,338 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 15:02:52,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 15:02:52,338 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 15:02:52,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 15:02:52,338 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 15:02:52,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 15:02:52,338 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 15:02:52,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 15:02:52,339 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 15:02:52,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 15:02:52,339 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 15:02:52,339 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-25 15:02:52,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-25 15:02:52,339 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-25 15:02:52,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-25 15:02:52,339 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU_NoBaseCtor__success
[2020-11-25 15:02:52,339 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU
[2020-11-25 15:02:52,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU
[2020-11-25 15:02:52,340 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU
[2020-11-25 15:02:52,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU
[2020-11-25 15:02:52,340 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU
[2020-11-25 15:02:52,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU
[2020-11-25 15:02:52,340 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU
[2020-11-25 15:02:52,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU
[2020-11-25 15:02:52,340 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU
[2020-11-25 15:02:52,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU
[2020-11-25 15:02:52,340 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 15:02:52,341 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ECU
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:02:52,342 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 15:02:52,343 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__success
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__fail
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 15:02:52,344 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken__success
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure allowAddress~address~bool_BasicToken__fail
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken__success
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure lockAddress~address~bool_BasicToken__fail
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken__success
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure setLocked~bool_BasicToken__fail
[2020-11-25 15:02:52,345 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken__success
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer~address_BasicToken__fail
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken__success
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure allowedAddresses~address_BasicToken__fail
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken__success
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAddresses~address_BasicToken__fail
[2020-11-25 15:02:52,346 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken__success
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure locked_BasicToken__fail
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,347 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 15:02:52,348 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU_NoBaseCtor__fail
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU__success
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ECU_ECU__fail
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU__success
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ECU__fail
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU__success
[2020-11-25 15:02:52,349 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ECU__fail
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU__success
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ECU__fail
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU__success
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_ECU__fail
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:02:52,350 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:02:52,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:02:52,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:02:52,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:02:52,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 15:02:52,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__success
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowAddress~address~bool_BasicToken__success
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockAddress~address~bool_BasicToken__success
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLocked~bool_BasicToken__success
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken__fail
[2020-11-25 15:02:52,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer~address_BasicToken__success
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken__fail
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowedAddresses~address_BasicToken__success
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken__fail
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAddresses~address_BasicToken__success
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken__fail
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure locked_BasicToken__success
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:02:52,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 15:02:52,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU_NoBaseCtor__fail
[2020-11-25 15:02:52,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU_NoBaseCtor__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU__fail
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ECU_ECU__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU__fail
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ECU__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU__fail
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ECU__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU__fail
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ECU__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU__fail
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_ECU__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:02:52,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 15:02:52,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-25 15:02:52,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ECU
[2020-11-25 15:02:52,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:02:52,360 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:02:52,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:02:52,615 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:02:52,616 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:02:53,336 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:02:53,336 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 15:02:53,338 INFO  L202        PluginConnector]: Adding new model ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:53 BoogieIcfgContainer
[2020-11-25 15:02:53,338 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:52" (2/2) ...
[2020-11-25 15:02:53,338 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:02:53,339 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@741fea4e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:53, skipping insertion in model container
[2020-11-25 15:02:53,339 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:02:53,339 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:02:53,339 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:02:53,340 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:02:53,341 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/3) ...
[2020-11-25 15:02:53,341 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2d639098 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:53, skipping insertion in model container
[2020-11-25 15:02:53,341 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:52" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:02:53,379 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:53 NWAContainer
[2020-11-25 15:02:53,379 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:02:53,379 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:02:53,379 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:02:53,380 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:02:53,380 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:53" (3/4) ...
[2020-11-25 15:02:53,381 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@73c943b8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:53, skipping insertion in model container
[2020-11-25 15:02:53,381 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:53" (4/4) ...
[2020-11-25 15:02:53,384 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:02:53,389 INFO  L110   BuchiProductObserver]: Initial RCFG 2504 locations, 3474 edges
[2020-11-25 15:02:53,389 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:02:53,401 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:02:55,322 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:02:55,331 INFO  L110   BuchiProductObserver]: BuchiProgram size 6258 locations, 11456 edges
[2020-11-25 15:02:55,331 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:55 BoogieIcfgContainer
[2020-11-25 15:02:55,331 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:02:55,331 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:02:55,331 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:02:55,333 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:02:55,333 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:55" (1/1) ...
[2020-11-25 15:02:55,473 INFO  L313           BlockEncoder]: Initial Icfg 6258 locations, 11456 edges
[2020-11-25 15:02:55,474 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:02:55,474 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:02:55,474 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:02:55,475 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:02:55,491 INFO  L70    emoveInfeasibleEdges]: Removed 93 edges and 19 locations because of local infeasibility
[2020-11-25 15:02:55,507 INFO  L70        RemoveSinkStates]: Removed 68 edges and 36 locations by removing sink states
[2020-11-25 15:02:55,528 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:02:55,533 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:02:55,539 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:02:55,539 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:02:55,544 INFO  L313           BlockEncoder]: Encoded RCFG 6169 locations, 11245 edges
[2020-11-25 15:02:55,544 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:02:55 BasicIcfg
[2020-11-25 15:02:55,544 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:02:55,545 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:02:55,545 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:02:55,546 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:02:55,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:02:55,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:02:52" (1/6) ...
[2020-11-25 15:02:55,548 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3a2f13bc and model type ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:02:55, skipping insertion in model container
[2020-11-25 15:02:55,548 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:02:55,548 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:02:52" (2/6) ...
[2020-11-25 15:02:55,549 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3a2f13bc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:02:55, skipping insertion in model container
[2020-11-25 15:02:55,549 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:02:55,549 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:02:53" (3/6) ...
[2020-11-25 15:02:55,549 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3a2f13bc and model type ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:02:55, skipping insertion in model container
[2020-11-25 15:02:55,549 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:02:55,549 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:02:53" (4/6) ...
[2020-11-25 15:02:55,550 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3a2f13bc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:02:55, skipping insertion in model container
[2020-11-25 15:02:55,550 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:02:55,550 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:02:55" (5/6) ...
[2020-11-25 15:02:55,550 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3a2f13bc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:02:55, skipping insertion in model container
[2020-11-25 15:02:55,550 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:02:55,550 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:02:55" (6/6) ...
[2020-11-25 15:02:55,552 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ECU_0x8fc9b6354e839ab1c8b31f4afa53607092b8c2e5_transferfrom-self-fail.bpl_BEv2
[2020-11-25 15:02:55,585 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:02:55,585 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:02:55,586 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:02:55,586 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:02:55,586 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:02:55,586 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:02:55,586 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:02:55,586 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:02:55,586 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:02:55,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6169 states.
[2020-11-25 15:02:55,698 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:02:55,698 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:02:55,698 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:02:55,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:02:55,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:02:55,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:02:55,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6169 states.
[2020-11-25 15:02:55,757 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:02:55,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:02:55,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:02:55,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:02:55,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND TRUE   revert
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND TRUE   choice == 22
[L7089]              gas := gas - 21000;
[L7090]  COND FALSE  !(gas >= 0)
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:02:55,777 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:02:55,777 INFO  L82        PathProgramCache]: Analyzing trace with hash 1383605474, now seen corresponding path program 1 times
[2020-11-25 15:02:55,781 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:02:55,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:02:55,834 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:02:55,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:02:55,835 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:02:56,282 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:02:56,292 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:02:56,293 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:02:56,294 INFO  L87              Difference]: Start difference. First operand 6169 states. Second operand 4 states.
[2020-11-25 15:02:57,259 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:02:57,260 INFO  L93              Difference]: Finished difference Result 4503 states and 7095 transitions.
[2020-11-25 15:02:57,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:02:57,262 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4503 states and 7095 transitions.
[2020-11-25 15:02:57,291 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:02:57,329 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4503 states to 4403 states and 6932 transitions.
[2020-11-25 15:02:57,330 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-11-25 15:02:57,334 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1293
[2020-11-25 15:02:57,335 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4403 states and 6932 transitions.
[2020-11-25 15:02:57,352 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:02:57,352 INFO  L728         BuchiCegarLoop]: Abstraction has 4403 states and 6932 transitions.
[2020-11-25 15:02:57,378 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4403 states and 6932 transitions.
[2020-11-25 15:02:57,456 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4403 to 3822.
[2020-11-25 15:02:57,456 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3822 states.
[2020-11-25 15:02:57,465 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3822 states to 3822 states and 5874 transitions.
[2020-11-25 15:02:57,466 INFO  L751         BuchiCegarLoop]: Abstraction has 3822 states and 5874 transitions.
[2020-11-25 15:02:57,466 INFO  L631         BuchiCegarLoop]: Abstraction has 3822 states and 5874 transitions.
[2020-11-25 15:02:57,466 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:02:57,466 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3822 states and 5874 transitions.
[2020-11-25 15:02:57,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:02:57,479 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:02:57,479 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:02:57,486 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:02:57,486 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND TRUE   __exception
[L1852]              __tmp__Balance := Balance;
[L1853]              __tmp__DType := DType;
[L1854]              __tmp__Alloc := Alloc;
[L1855]              __tmp__balance_ADDR := balance_ADDR;
[L1856]              __tmp__M_Ref_int := M_Ref_int;
[L1857]              __tmp__sum_balances0 := sum_balances0;
[L1858]              __tmp__M_Ref_bool := M_Ref_bool;
[L1859]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1860]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1861]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1862]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1863]              __tmp__sum_allowed3 := sum_allowed3;
[L1864]              __tmp__Length := Length;
[L1865]              __tmp__now := now;
[L1866]              __tmp__owner_Ownable := owner_Ownable;
[L1867]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1868]              __tmp__balances_BasicToken := balances_BasicToken;
[L1869]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1870]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1871]              __tmp__locked_BasicToken := locked_BasicToken;
[L1872]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1873]              __tmp__name_ECU := name_ECU;
[L1874]              __tmp__symbol_ECU := symbol_ECU;
[L1875]              __tmp__decimals_ECU := decimals_ECU;
[L1876]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1877]  CALL        call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L4118]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L4118]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4119]  COND FALSE  !(revert)
[L4122]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L4122]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4123]  COND FALSE  !(revert)
[L4126]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L4126]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4127]  COND FALSE  !(revert)
[L4130]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L4130]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4131]  COND FALSE  !(revert)
[L4134]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3672]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3672]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  COND FALSE  !(revert)
[L3676]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3676]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3677]  COND FALSE  !(revert)
[L3680]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3680]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3681]  COND FALSE  !(revert)
[L3684]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3684]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  COND FALSE  !(revert)
[L3688]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3653]              assume msgsender_MSG != null;
[L3654]              __tmp__Balance[this] := 0;
[L3655]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3656]              __tmp__sum_allowed3[this] := 0;
[L3688]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3689]  COND FALSE  !(revert)
[L4134]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4135]  COND FALSE  !(revert)
[L4138]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3964]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  COND FALSE  !(revert)
[L3968]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3968]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3969]  COND FALSE  !(revert)
[L3972]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3972]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3973]  COND FALSE  !(revert)
[L3976]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3976]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3977]  COND FALSE  !(revert)
[L3980]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3672]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3672]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  COND FALSE  !(revert)
[L3676]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3676]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3677]  COND FALSE  !(revert)
[L3680]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3680]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3681]  COND FALSE  !(revert)
[L3684]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3684]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  COND FALSE  !(revert)
[L3688]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3653]              assume msgsender_MSG != null;
[L3654]              __tmp__Balance[this] := 0;
[L3655]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3656]              __tmp__sum_allowed3[this] := 0;
[L3688]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3689]  COND FALSE  !(revert)
[L3980]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]  COND FALSE  !(revert)
[L3984]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3949]              assume msgsender_MSG != null;
[L3950]              __tmp__Balance[this] := 0;
[L3984]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3985]  COND FALSE  !(revert)
[L4138]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              __tmp__Balance[this] := 0;
[L4082]              __tmp__name_ECU[this] := -2027621617;
[L4083]              __tmp__symbol_ECU[this] := 1342424742;
[L4084]              __tmp__decimals_ECU[this] := 18;
[L4085]              __var_15 := __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4086]              __tmp__initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4088]              __tmp__totalSupply_ERC20Basic[this] := __tmp__initialSupply_ECU[this];
[L4089]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4090]              __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509] := __tmp__initialSupply_ECU[this];
[L4091]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4092]              __tmp__allowedAddresses_BasicToken[this][__tmp__owner_Ownable[this]] := true;
[L4142]  RET         call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L1877]  RET         call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]              assume revert || gas < 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND TRUE   choice == 22
[L7089]              gas := gas - 21000;
[L7090]  COND FALSE  !(gas >= 0)
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:02:57,495 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:02:57,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 1201911131, now seen corresponding path program 1 times
[2020-11-25 15:02:57,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:02:57,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:02:57,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 1312 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1312 trivial. 0 not checked.
[2020-11-25 15:02:57,695 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:02:57,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:02:57,697 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:02:57,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:02:57,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:02:57,698 INFO  L87              Difference]: Start difference. First operand 3822 states and 5874 transitions. cyclomatic complexity: 2054 Second operand 4 states.
[2020-11-25 15:02:58,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:02:58,141 INFO  L93              Difference]: Finished difference Result 3378 states and 3664 transitions.
[2020-11-25 15:02:58,141 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:02:58,141 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3378 states and 3664 transitions.
[2020-11-25 15:02:58,150 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:02:58,158 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3378 states to 3378 states and 3664 transitions.
[2020-11-25 15:02:58,158 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1011
[2020-11-25 15:02:58,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1051
[2020-11-25 15:02:58,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3378 states and 3664 transitions.
[2020-11-25 15:02:58,161 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:02:58,161 INFO  L728         BuchiCegarLoop]: Abstraction has 3378 states and 3664 transitions.
[2020-11-25 15:02:58,164 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3378 states and 3664 transitions.
[2020-11-25 15:02:58,184 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3378 to 3373.
[2020-11-25 15:02:58,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3373 states.
[2020-11-25 15:02:58,188 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3373 states to 3373 states and 3659 transitions.
[2020-11-25 15:02:58,188 INFO  L751         BuchiCegarLoop]: Abstraction has 3373 states and 3659 transitions.
[2020-11-25 15:02:58,188 INFO  L631         BuchiCegarLoop]: Abstraction has 3373 states and 3659 transitions.
[2020-11-25 15:02:58,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:02:58,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3373 states and 3659 transitions.
[2020-11-25 15:02:58,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:02:58,194 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:02:58,194 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:02:58,196 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:02:58,196 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND TRUE   choice == 9
[L7168]              gas := gas - 21000;
[L7169]  COND TRUE   gas >= 0
[L7170]              assume _value_s481 >= 0 && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7171]              assume msgvalue_MSG == 0;
[L7172]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s481 == _to_s481 && (_value_s481 > balances_BasicToken[this][_from_s481] || _value_s481 > allowed_StandardToken[this][_from_s481][msgsender_MSG])) && _value_s481 >= 0) && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s481] >= 0) && balances_BasicToken[this][_to_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s481] >= 0) && balances_BasicToken[this][_from_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s481][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s481][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L1338]              havoc __exception;
[L1339]              revert := false;
[L1340]  COND FALSE  !(__exception)
[L1369]  CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L3787]              __var_6 := null;
[L3788]  COND FALSE  !(!(_to_s481 != null))
[L3792]  COND TRUE   DType[this] == ECU
[L3793]  CALL        call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3793]  RET         call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3794]  COND FALSE  !(revert)
[L3810]  COND FALSE  !(!__var_7)
[L3814]              _allowance_s481 := allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3815]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3815]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3816]  COND FALSE  !(revert)
[L3819]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s481];
[L3820]              balances_BasicToken[this][_from_s481] := __var_8;
[L3821]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s481];
[L3822]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3822]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3823]  COND FALSE  !(revert)
[L3826]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s481];
[L3827]              balances_BasicToken[this][_to_s481] := __var_9;
[L3828]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s481];
[L3829]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3829]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3830]  COND FALSE  !(revert)
[L3833]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] - allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3834]              allowed_StandardToken[this][_from_s481][msgsender_MSG] := __var_10;
[L3835]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] + allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3836]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3837]              __ret_0_ := true;
[L1369]  RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L1370]              assume !revert && gas >= 0;
[L7172]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND TRUE   choice == 9
[L7168]              gas := gas - 21000;
[L7169]  COND TRUE   gas >= 0
[L7170]              assume _value_s481 >= 0 && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7171]              assume msgvalue_MSG == 0;
[L7172]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s481 == _to_s481 && (_value_s481 > balances_BasicToken[this][_from_s481] || _value_s481 > allowed_StandardToken[this][_from_s481][msgsender_MSG])) && _value_s481 >= 0) && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s481] >= 0) && balances_BasicToken[this][_to_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s481] >= 0) && balances_BasicToken[this][_from_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s481][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s481][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L1338]              havoc __exception;
[L1339]              revert := false;
[L1340]  COND FALSE  !(__exception)
[L1369]  CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L3787]              __var_6 := null;
[L3788]  COND FALSE  !(!(_to_s481 != null))
[L3792]  COND TRUE   DType[this] == ECU
[L3793]  CALL        call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3793]  RET         call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3794]  COND FALSE  !(revert)
[L3810]  COND FALSE  !(!__var_7)
[L3814]              _allowance_s481 := allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3815]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3815]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3816]  COND FALSE  !(revert)
[L3819]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s481];
[L3820]              balances_BasicToken[this][_from_s481] := __var_8;
[L3821]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s481];
[L3822]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3822]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3823]  COND FALSE  !(revert)
[L3826]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s481];
[L3827]              balances_BasicToken[this][_to_s481] := __var_9;
[L3828]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s481];
[L3829]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3829]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3830]  COND FALSE  !(revert)
[L3833]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] - allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3834]              allowed_StandardToken[this][_from_s481][msgsender_MSG] := __var_10;
[L3835]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] + allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3836]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3837]              __ret_0_ := true;
[L1369]  RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L1370]              assume !revert && gas >= 0;
[L7172]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:02:58,202 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:02:58,202 INFO  L82        PathProgramCache]: Analyzing trace with hash 1043395464, now seen corresponding path program 1 times
[2020-11-25 15:02:58,203 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:02:58,232 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:02:58,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 1316 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 1306 trivial. 0 not checked.
[2020-11-25 15:02:58,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:02:58,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 15:02:58,531 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:02:58,531 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 15:02:58,531 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 15:02:58,531 INFO  L87              Difference]: Start difference. First operand 3373 states and 3659 transitions. cyclomatic complexity: 288 Second operand 16 states.
[2020-11-25 15:03:01,021 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:03:01,021 INFO  L93              Difference]: Finished difference Result 3489 states and 3788 transitions.
[2020-11-25 15:03:01,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 15:03:01,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3489 states and 3788 transitions.
[2020-11-25 15:03:01,028 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:03:01,039 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3489 states to 3489 states and 3788 transitions.
[2020-11-25 15:03:01,039 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1070
[2020-11-25 15:03:01,039 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1070
[2020-11-25 15:03:01,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3489 states and 3788 transitions.
[2020-11-25 15:03:01,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:03:01,043 INFO  L728         BuchiCegarLoop]: Abstraction has 3489 states and 3788 transitions.
[2020-11-25 15:03:01,046 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3489 states and 3788 transitions.
[2020-11-25 15:03:01,069 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3489 to 3441.
[2020-11-25 15:03:01,069 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3441 states.
[2020-11-25 15:03:01,073 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3441 states to 3441 states and 3735 transitions.
[2020-11-25 15:03:01,073 INFO  L751         BuchiCegarLoop]: Abstraction has 3441 states and 3735 transitions.
[2020-11-25 15:03:01,073 INFO  L631         BuchiCegarLoop]: Abstraction has 3441 states and 3735 transitions.
[2020-11-25 15:03:01,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:03:01,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3441 states and 3735 transitions.
[2020-11-25 15:03:01,077 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:03:01,077 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:03:01,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:03:01,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:03:01,080 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND TRUE   __exception
[L1852]              __tmp__Balance := Balance;
[L1853]              __tmp__DType := DType;
[L1854]              __tmp__Alloc := Alloc;
[L1855]              __tmp__balance_ADDR := balance_ADDR;
[L1856]              __tmp__M_Ref_int := M_Ref_int;
[L1857]              __tmp__sum_balances0 := sum_balances0;
[L1858]              __tmp__M_Ref_bool := M_Ref_bool;
[L1859]              __tmp__sum_allowedAddresses1 := sum_allowedAddresses1;
[L1860]              __tmp__sum_lockedAddresses2 := sum_lockedAddresses2;
[L1861]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1862]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1863]              __tmp__sum_allowed3 := sum_allowed3;
[L1864]              __tmp__Length := Length;
[L1865]              __tmp__now := now;
[L1866]              __tmp__owner_Ownable := owner_Ownable;
[L1867]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1868]              __tmp__balances_BasicToken := balances_BasicToken;
[L1869]              __tmp__allowedAddresses_BasicToken := allowedAddresses_BasicToken;
[L1870]              __tmp__lockedAddresses_BasicToken := lockedAddresses_BasicToken;
[L1871]              __tmp__locked_BasicToken := locked_BasicToken;
[L1872]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1873]              __tmp__name_ECU := name_ECU;
[L1874]              __tmp__symbol_ECU := symbol_ECU;
[L1875]              __tmp__decimals_ECU := decimals_ECU;
[L1876]              __tmp__initialSupply_ECU := initialSupply_ECU;
[L1877]  CALL        call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L4118]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L4118]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4119]  COND FALSE  !(revert)
[L4122]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L4122]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4123]  COND FALSE  !(revert)
[L4126]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L4126]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4127]  COND FALSE  !(revert)
[L4130]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L4130]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4131]  COND FALSE  !(revert)
[L4134]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3672]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3672]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  COND FALSE  !(revert)
[L3676]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3676]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3677]  COND FALSE  !(revert)
[L3680]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3680]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3681]  COND FALSE  !(revert)
[L3684]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3684]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  COND FALSE  !(revert)
[L3688]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3653]              assume msgsender_MSG != null;
[L3654]              __tmp__Balance[this] := 0;
[L3655]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3656]              __tmp__sum_allowed3[this] := 0;
[L3688]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3689]  COND FALSE  !(revert)
[L4134]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4135]  COND FALSE  !(revert)
[L4138]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3964]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  COND FALSE  !(revert)
[L3968]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3968]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3969]  COND FALSE  !(revert)
[L3972]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3972]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3973]  COND FALSE  !(revert)
[L3976]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3976]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3977]  COND FALSE  !(revert)
[L3980]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3672]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3672]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3673]  COND FALSE  !(revert)
[L3676]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3628]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3628]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3629]  COND FALSE  !(revert)
[L3632]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]              assume msgsender_MSG != null;
[L3614]              __tmp__Balance[this] := 0;
[L3632]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3633]  COND FALSE  !(revert)
[L3676]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3677]  COND FALSE  !(revert)
[L3680]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3680]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3681]  COND FALSE  !(revert)
[L3684]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3319]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]              assume msgsender_MSG != null;
[L3249]              __tmp__Balance[this] := 0;
[L3250]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L3265]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3319]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3320]  COND FALSE  !(revert)
[L3323]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3188]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3169]              assume msgsender_MSG != null;
[L3170]              __tmp__Balance[this] := 0;
[L3171]              __tmp__owner_Ownable[this] := null;
[L3173]              __tmp__owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3188]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3189]  COND FALSE  !(revert)
[L3323]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3294]              assume msgsender_MSG != null;
[L3295]              __tmp__Balance[this] := 0;
[L3296]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3297]              __tmp__sum_balances0[this] := 0;
[L3298]              __tmp__allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3299]              __tmp__lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3300]              __tmp__locked_BasicToken[this] := true;
[L3327]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3684]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]  COND FALSE  !(revert)
[L3688]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3653]              assume msgsender_MSG != null;
[L3654]              __tmp__Balance[this] := 0;
[L3655]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3656]              __tmp__sum_allowed3[this] := 0;
[L3688]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3689]  COND FALSE  !(revert)
[L3980]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]  COND FALSE  !(revert)
[L3984]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3949]              assume msgsender_MSG != null;
[L3950]              __tmp__Balance[this] := 0;
[L3984]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3985]  COND FALSE  !(revert)
[L4138]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4080]              assume msgsender_MSG != null;
[L4081]              __tmp__Balance[this] := 0;
[L4082]              __tmp__name_ECU[this] := -2027621617;
[L4083]              __tmp__symbol_ECU[this] := 1342424742;
[L4084]              __tmp__decimals_ECU[this] := 18;
[L4085]              __var_15 := __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4086]              __tmp__initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, __tmp__decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4088]              __tmp__totalSupply_ERC20Basic[this] := __tmp__initialSupply_ECU[this];
[L4089]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4090]              __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509] := __tmp__initialSupply_ECU[this];
[L4091]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4092]              __tmp__allowedAddresses_BasicToken[this][__tmp__owner_Ownable[this]] := true;
[L4142]  RET         call ECU_ECU_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L1877]  RET         call ECU_ECU__fail(this, msgsender_MSG, msgvalue_MSG);
[L1878]              assume revert || gas < 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND TRUE   choice == 9
[L7168]              gas := gas - 21000;
[L7169]  COND TRUE   gas >= 0
[L7170]              assume _value_s481 >= 0 && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7171]              assume msgvalue_MSG == 0;
[L7172]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s481 == _to_s481 && (_value_s481 > balances_BasicToken[this][_from_s481] || _value_s481 > allowed_StandardToken[this][_from_s481][msgsender_MSG])) && _value_s481 >= 0) && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s481] >= 0) && balances_BasicToken[this][_to_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s481] >= 0) && balances_BasicToken[this][_from_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s481][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s481][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L1338]              havoc __exception;
[L1339]              revert := false;
[L1340]  COND FALSE  !(__exception)
[L1369]  CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L3787]              __var_6 := null;
[L3788]  COND FALSE  !(!(_to_s481 != null))
[L3792]  COND TRUE   DType[this] == ECU
[L3793]  CALL        call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3793]  RET         call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3794]  COND FALSE  !(revert)
[L3810]  COND FALSE  !(!__var_7)
[L3814]              _allowance_s481 := allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3815]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3815]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3816]  COND FALSE  !(revert)
[L3819]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s481];
[L3820]              balances_BasicToken[this][_from_s481] := __var_8;
[L3821]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s481];
[L3822]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3822]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3823]  COND FALSE  !(revert)
[L3826]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s481];
[L3827]              balances_BasicToken[this][_to_s481] := __var_9;
[L3828]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s481];
[L3829]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3829]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3830]  COND FALSE  !(revert)
[L3833]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] - allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3834]              allowed_StandardToken[this][_from_s481][msgsender_MSG] := __var_10;
[L3835]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] + allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3836]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3837]              __ret_0_ := true;
[L1369]  RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L1370]              assume !revert && gas >= 0;
[L7172]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND TRUE   choice == 22
[L7089]              gas := gas - 21000;
[L7090]  COND FALSE  !(gas >= 0)
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:03:01,086 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:03:01,086 INFO  L82        PathProgramCache]: Analyzing trace with hash 640987293, now seen corresponding path program 1 times
[2020-11-25 15:03:01,087 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:03:01,108 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:03:01,255 INFO  L134       CoverageAnalysis]: Checked inductivity of 1316 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1316 trivial. 0 not checked.
[2020-11-25 15:03:01,255 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:03:01,255 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:03:01,256 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:03:01,256 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:03:01,256 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:03:01,256 INFO  L87              Difference]: Start difference. First operand 3441 states and 3735 transitions. cyclomatic complexity: 297 Second operand 4 states.
[2020-11-25 15:03:01,499 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:03:01,499 INFO  L93              Difference]: Finished difference Result 4249 states and 4763 transitions.
[2020-11-25 15:03:01,499 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:03:01,499 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4249 states and 4763 transitions.
[2020-11-25 15:03:01,510 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:03:01,522 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4249 states to 4054 states and 4556 transitions.
[2020-11-25 15:03:01,522 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1297
[2020-11-25 15:03:01,522 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1297
[2020-11-25 15:03:01,522 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4054 states and 4556 transitions.
[2020-11-25 15:03:01,526 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:03:01,527 INFO  L728         BuchiCegarLoop]: Abstraction has 4054 states and 4556 transitions.
[2020-11-25 15:03:01,530 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4054 states and 4556 transitions.
[2020-11-25 15:03:01,550 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4054 to 3246.
[2020-11-25 15:03:01,551 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3246 states.
[2020-11-25 15:03:01,554 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3246 states to 3246 states and 3527 transitions.
[2020-11-25 15:03:01,554 INFO  L751         BuchiCegarLoop]: Abstraction has 3246 states and 3527 transitions.
[2020-11-25 15:03:01,554 INFO  L631         BuchiCegarLoop]: Abstraction has 3246 states and 3527 transitions.
[2020-11-25 15:03:01,554 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:03:01,554 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3246 states and 3527 transitions.
[2020-11-25 15:03:01,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:03:01,558 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:03:01,558 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:03:01,560 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:03:01,560 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L7234]              assume null == 0;
[L7235]  CALL        call this := FreshRefGenerator__success();
[L3065]              havoc newRef;
[L3066]              assume Alloc[newRef] == false;
[L3067]              Alloc[newRef] := true;
[L3068]              assume newRef != null;
[L7235]  RET         call this := FreshRefGenerator__success();
[L7236]              assume now >= 0;
[L7237]              assume DType[this] == ECU;
[L7238]              assume msgvalue_MSG == 0;
[L7239]              gas := gas - 53000;
[L7240]  CALL        call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1880]  CALL        call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4163]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4167]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3992]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3992]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3993]  COND FALSE  !(revert)
[L3996]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3996]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L4000]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L4004]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3696]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3696]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3697]  COND FALSE  !(revert)
[L3700]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3640]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3641]  COND FALSE  !(revert)
[L3644]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]              assume msgsender_MSG != null;
[L3622]              Balance[this] := 0;
[L3644]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3645]  COND FALSE  !(revert)
[L3700]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3701]  COND FALSE  !(revert)
[L3704]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3704]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3705]  COND FALSE  !(revert)
[L3708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3273]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3257]              assume msgsender_MSG != null;
[L3258]              Balance[this] := 0;
[L3259]              totalSupply_ERC20Basic[this] := 0;
[L3273]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3274]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]              assume msgsender_MSG != null;
[L3180]              Balance[this] := 0;
[L3181]              owner_Ownable[this] := null;
[L3183]              owner_Ownable[this] := 19781008330533595146085782002824322930726574509;
[L3196]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3197]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3307]              assume msgsender_MSG != null;
[L3308]              Balance[this] := 0;
[L3309]              balances_BasicToken[this] := zeroRefintArr();
[L3310]              sum_balances0[this] := 0;
[L3311]              allowedAddresses_BasicToken[this] := zeroRefboolArr();
[L3312]              lockedAddresses_BasicToken[this] := zeroRefboolArr();
[L3313]              locked_BasicToken[this] := true;
[L3343]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3712]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3665]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3666]              sum_allowed3[this] := 0;
[L3712]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L4008]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              Balance[this] := 0;
[L4012]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4013]  COND FALSE  !(revert)
[L4171]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L4175]  CALL        call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_ECU[this] := -2027621617;
[L4102]              symbol_ECU[this] := 1342424742;
[L4103]              decimals_ECU[this] := 18;
[L4104]              __var_15 := decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4105]              initialSupply_ECU[this] := 1000000000 * (nonlinearPow(10, decimals_ECU[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4107]              totalSupply_ERC20Basic[this] := initialSupply_ECU[this];
[L4108]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4109]              balances_BasicToken[this][19781008330533595146085782002824322930726574509] := initialSupply_ECU[this];
[L4110]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][19781008330533595146085782002824322930726574509];
[L4111]              assert { :EventEmitted "Transfer_ECU" } true;
[L4112]              allowedAddresses_BasicToken[this][owner_Ownable[this]] := true;
[L4175]  RET         call ECU_ECU_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4176]  COND FALSE  !(revert)
[L1880]  RET         call ECU_ECU__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume !revert && gas >= 0;
[L7240]  RET         call ECU_ECU(this, msgsender_MSG, msgvalue_MSG);
[L7241]              assume !revert && gas >= 0;
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND FALSE  !(choice == 9)
[L7174]  COND TRUE   choice == 8
[L7175]              gas := gas - 21000;
[L7176]  COND TRUE   gas >= 0
[L7177]              assume _value_s509 >= 0 && _value_s509 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7178]              assume msgvalue_MSG == 0;
[L7179]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1406]              havoc __exception;
[L1407]              revert := false;
[L1408]  COND FALSE  !(__exception)
[L1437]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L3852]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3853]              allowed_StandardToken[this][msgsender_MSG][_spender_s509] := _value_s509;
[L3854]              sum_allowed3[msgsender_MSG] := sum_allowed3[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s509];
[L3855]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3856]              __ret_0_ := true;
[L1437]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L1438]              assume !revert && gas >= 0;
[L7179]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s509, _value_s509);
[L7244]  RET         call CorralChoice_ECU(this);
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND FALSE  !(choice == 22)
[L7094]  COND FALSE  !(choice == 21)
[L7100]  COND FALSE  !(choice == 20)
[L7106]  COND FALSE  !(choice == 19)
[L7112]  COND FALSE  !(choice == 18)
[L7119]  COND FALSE  !(choice == 17)
[L7125]  COND FALSE  !(choice == 16)
[L7131]  COND FALSE  !(choice == 15)
[L7137]  COND FALSE  !(choice == 14)
[L7143]  COND FALSE  !(choice == 13)
[L7149]  COND FALSE  !(choice == 12)
[L7155]  COND FALSE  !(choice == 11)
[L7161]  COND FALSE  !(choice == 10)
[L7167]  COND TRUE   choice == 9
[L7168]              gas := gas - 21000;
[L7169]  COND TRUE   gas >= 0
[L7170]              assume _value_s481 >= 0 && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7171]              assume msgvalue_MSG == 0;
[L7172]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s481 == _to_s481 && (_value_s481 > balances_BasicToken[this][_from_s481] || _value_s481 > allowed_StandardToken[this][_from_s481][msgsender_MSG])) && _value_s481 >= 0) && _value_s481 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s481] >= 0) && balances_BasicToken[this][_to_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s481] >= 0) && balances_BasicToken[this][_from_s481] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s481][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s481][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L1338]              havoc __exception;
[L1339]              revert := false;
[L1340]  COND FALSE  !(__exception)
[L1369]  CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L3787]              __var_6 := null;
[L3788]  COND FALSE  !(!(_to_s481 != null))
[L3792]  COND TRUE   DType[this] == ECU
[L3793]  CALL        call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3436]  COND TRUE   locked_BasicToken[this]
[L3437]  COND FALSE  !(!allowedAddresses_BasicToken[this][_addr_s282] && _addr_s282 != owner_Ownable[this])
[L3445]              __ret_0_ := true;
[L3793]  RET         call __var_7 := canTransfer~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3794]  COND FALSE  !(revert)
[L3810]  COND FALSE  !(!__var_7)
[L3814]              _allowance_s481 := allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3815]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3815]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s481], _value_s481);
[L3816]  COND FALSE  !(revert)
[L3819]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s481];
[L3820]              balances_BasicToken[this][_from_s481] := __var_8;
[L3821]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s481];
[L3822]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3160]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3161]              assert c_s93 >= a_s93;
[L3162]              __ret_0_ := c_s93;
[L3822]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s481], _value_s481);
[L3823]  COND FALSE  !(revert)
[L3826]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s481];
[L3827]              balances_BasicToken[this][_to_s481] := __var_9;
[L3828]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s481];
[L3829]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3144]              assert b_s69 <= a_s69;
[L3145]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3829]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s481, _value_s481);
[L3830]  COND FALSE  !(revert)
[L3833]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] - allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3834]              allowed_StandardToken[this][_from_s481][msgsender_MSG] := __var_10;
[L3835]              sum_allowed3[_from_s481] := sum_allowed3[_from_s481] + allowed_StandardToken[this][_from_s481][msgsender_MSG];
[L3836]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3837]              __ret_0_ := true;
[L1369]  RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L1370]              assume !revert && gas >= 0;
[L7172]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s481, _to_s481, _value_s481);
[L7244]  RET         call CorralChoice_ECU(this);

Loop:
[L7244]  CALL        call CorralChoice_ECU(this);
[L7028]              havoc msgsender_MSG;
[L7029]              havoc msgvalue_MSG;
[L7030]              havoc choice;
[L7031]              havoc __ret_0_owner;
[L7032]              havoc newOwner_s146;
[L7033]              havoc __ret_0_totalSupply;
[L7034]              havoc _owner_s352;
[L7035]              havoc balance_s352;
[L7036]              havoc _to_s340;
[L7037]              havoc _value_s340;
[L7038]              havoc __ret_0_transfer;
[L7039]              havoc arg745_s0;
[L7040]              havoc __ret_0_allowedAddresses;
[L7041]              havoc arg746_s0;
[L7042]              havoc __ret_0_lockedAddresses;
[L7043]              havoc __ret_0_locked;
[L7044]              havoc _addr_s218;
[L7045]              havoc _allowed_s218;
[L7046]              havoc _addr_s240;
[L7047]              havoc _locked_s240;
[L7048]              havoc _locked_s252;
[L7049]              havoc _addr_s282;
[L7050]              havoc __ret_0_canTransfer;
[L7051]              havoc _owner_s525;
[L7052]              havoc _spender_s525;
[L7053]              havoc remaining_s525;
[L7054]              havoc _from_s481;
[L7055]              havoc _to_s481;
[L7056]              havoc _value_s481;
[L7057]              havoc __ret_0_transferFrom;
[L7058]              havoc _spender_s509;
[L7059]              havoc _value_s509;
[L7060]              havoc __ret_0_approve;
[L7061]              havoc _spender_s566;
[L7062]              havoc _addedValue_s566;
[L7063]              havoc success_s566;
[L7064]              havoc _spender_s626;
[L7065]              havoc _subtractedValue_s626;
[L7066]              havoc success_s626;
[L7067]              havoc _value_s692;
[L7068]              havoc __ret_0_name;
[L7069]              havoc __ret_0_symbol;
[L7070]              havoc __ret_0_decimals;
[L7071]              havoc __ret_0_initialSupply;
[L7072]              havoc tmpNow;
[L7073]              havoc gas;
[L7074]              assume gas > 4000000 && gas <= 8000000;
[L7075]              tmpNow := now;
[L7076]              havoc now;
[L7077]              assume now > tmpNow;
[L7078]              assume msgsender_MSG != null;
[L7079]              assume DType[msgsender_MSG] != SafeMath;
[L7080]              assume DType[msgsender_MSG] != Ownable;
[L7081]              assume DType[msgsender_MSG] != ERC20Basic;
[L7082]              assume DType[msgsender_MSG] != BasicToken;
[L7083]              assume DType[msgsender_MSG] != ERC20;
[L7084]              assume DType[msgsender_MSG] != StandardToken;
[L7085]              assume DType[msgsender_MSG] != BurnableToken;
[L7086]              assume DType[msgsender_MSG] != ECU;
[L7087]              Alloc[msgsender_MSG] := true;
[L7088]  COND TRUE   choice == 22
[L7089]              gas := gas - 21000;
[L7090]  COND FALSE  !(gas >= 0)
[L7244]  RET         call CorralChoice_ECU(this);

[2020-11-25 15:03:01,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:03:01,565 INFO  L82        PathProgramCache]: Analyzing trace with hash 1182778569, now seen corresponding path program 1 times
[2020-11-25 15:03:01,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:03:01,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:03:01,848 INFO  L134       CoverageAnalysis]: Checked inductivity of 1392 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1392 trivial. 0 not checked.
[2020-11-25 15:03:01,848 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:03:01,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 15:03:01,849 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:03:01,849 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 15:03:01,849 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=68, Unknown=0, NotChecked=0, Total=90
[2020-11-25 15:03:01,849 INFO  L87              Difference]: Start difference. First operand 3246 states and 3527 transitions. cyclomatic complexity: 284 Second operand 10 states.
[2020-11-25 15:03:02,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:03:02,859 INFO  L93              Difference]: Finished difference Result 1887 states and 2052 transitions.
[2020-11-25 15:03:02,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 15:03:02,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1887 states and 2052 transitions.
[2020-11-25 15:03:02,863 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:03:02,863 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1887 states to 0 states and 0 transitions.
[2020-11-25 15:03:02,863 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:03:02,863 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:03:02,863 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:03:02,863 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:03:02,863 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:03:02,863 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:03:02,863 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:03:02,863 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:03:02,863 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:03:02,863 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:03:02,863 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:03:02,866 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:03:02 BasicIcfg
[2020-11-25 15:03:02,866 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:03:02,867 INFO  L168              Benchmark]: Toolchain (without parser) took 10803.10 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 929.8 MB in the beginning and 1.4 GB in the end (delta: -443.4 MB). Peak memory consumption was 727.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,867 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,868 INFO  L168              Benchmark]: Boogie Preprocessor took 121.56 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,868 INFO  L168              Benchmark]: UtopiaSpecLang took 70.87 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,868 INFO  L168              Benchmark]: Boogie Printer took 20.86 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,868 INFO  L168              Benchmark]: RCFGBuilder took 1059.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 903.0 MB in the beginning and 982.4 MB in the end (delta: -79.4 MB). Peak memory consumption was 192.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,869 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.75 ms. Allocated memory is still 1.1 GB. Free memory was 982.4 MB in the beginning and 975.2 MB in the end (delta: 7.2 MB). Peak memory consumption was 7.2 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,869 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1951.98 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 169.9 MB). Free memory was 975.2 MB in the beginning and 760.4 MB in the end (delta: 214.8 MB). Peak memory consumption was 471.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,869 INFO  L168              Benchmark]: BlockEncodingV2 took 213.08 ms. Allocated memory is still 1.3 GB. Free memory was 760.4 MB in the beginning and 665.8 MB in the end (delta: 94.6 MB). Peak memory consumption was 94.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,870 INFO  L168              Benchmark]: BuchiAutomizer took 7321.86 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 946.3 MB). Free memory was 665.8 MB in the beginning and 1.4 GB in the end (delta: -707.4 MB). Peak memory consumption was 238.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:03:02,872 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6258 locations, 11456 edges
  - StatisticsResult: Encoded RCFG
    6169 locations, 11245 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 121.56 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 70.87 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 20.86 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1059.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 903.0 MB in the beginning and 982.4 MB in the end (delta: -79.4 MB). Peak memory consumption was 192.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.75 ms. Allocated memory is still 1.1 GB. Free memory was 982.4 MB in the beginning and 975.2 MB in the end (delta: 7.2 MB). Peak memory consumption was 7.2 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1951.98 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 169.9 MB). Free memory was 975.2 MB in the beginning and 760.4 MB in the end (delta: 214.8 MB). Peak memory consumption was 471.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 213.08 ms. Allocated memory is still 1.3 GB. Free memory was 760.4 MB in the beginning and 665.8 MB in the end (delta: 94.6 MB). Peak memory consumption was 94.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7321.86 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 946.3 MB). Free memory was 665.8 MB in the beginning and 1.4 GB in the end (delta: -707.4 MB). Peak memory consumption was 238.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2504 locations, 3474 edges
  - StatisticsResult: BuchiProgram size
    6258 locations, 11456 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.2s and 6 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.5s. Construction of modules took 3.9s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 1442 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3822 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 19157 SDtfs, 18801 SDslu, 27762 SDs, 0 SdLazy, 50886 SolverSat, 2745 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_StandardToken0) ==> ( <>(fail_transferFrom_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
