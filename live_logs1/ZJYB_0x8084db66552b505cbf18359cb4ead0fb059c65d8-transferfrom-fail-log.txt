This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:01:59,363 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:01:59,364 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:01:59,374 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:01:59,374 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:01:59,375 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:01:59,376 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:01:59,378 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:01:59,379 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:01:59,380 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:01:59,380 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:01:59,381 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:01:59,381 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:01:59,382 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:01:59,383 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:01:59,384 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:01:59,384 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:01:59,385 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:01:59,387 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:01:59,388 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:01:59,389 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:01:59,390 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:01:59,392 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:01:59,392 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:01:59,392 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:01:59,393 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:01:59,393 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:01:59,394 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:01:59,394 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:01:59,394 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:01:59,395 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:01:59,395 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:01:59,396 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:01:59,396 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:01:59,397 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:01:59,397 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:01:59,397 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:01:59,398 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:01:59,398 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:01:59,398 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:01:59,399 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:01:59,399 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:01:59,406 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:01:59,407 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:01:59,407 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:01:59,408 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:01:59,408 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:01:59,408 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:01:59,408 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:01:59,408 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:01:59,408 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:01:59,408 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:01:59,408 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:01:59,409 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:01:59,409 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:01:59,410 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:01:59,410 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:01:59,410 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:01:59,410 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:01:59,410 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:01:59,410 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:01:59,430 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:01:59,440 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:01:59,443 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:01:59,444 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:01:59,444 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:01:59,445 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl
[2020-11-25 11:01:59,445 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl'
[2020-11-25 11:01:59,515 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:01:59,516 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:01:59,516 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:01:59,517 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:01:59,517 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:01:59,532 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,533 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,560 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,561 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,577 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,585 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,590 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,597 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:01:59,597 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:01:59,597 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:01:59,599 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:01:59,605 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/1) ...
[2020-11-25 11:01:59,623 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ZJYB.transferFrom(from, to, value), from != to && (value > _balances_ZJYB[this][from] || value > _allowed_ZJYB[this][from][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][from] >= 0 &&  _balances_ZJYB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ZJYB[this][from][msg.sender] >= 0 && _allowed_ZJYB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transferFrom)))
[2020-11-25 11:01:59,627 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ZJYB.transferFrom(from, to, value), from != to && (value > _balances_ZJYB[this][from] || value > _allowed_ZJYB[this][from][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][from] >= 0 &&  _balances_ZJYB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ZJYB[this][from][msg.sender] >= 0 && _allowed_ZJYB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transferFrom)))
[2020-11-25 11:01:59,634 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ZJYB.transferFrom(from, to, value), from != to && (value > _balances_ZJYB[this][from] || value > _allowed_ZJYB[this][from][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][from] >= 0 &&  _balances_ZJYB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ZJYB[this][from][msg.sender] >= 0 && _allowed_ZJYB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transferFrom)))
[2020-11-25 11:01:59,640 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s499!=_to_s499 && ( ( _value_s499>_balances_ZJYB[this][_from_s499] || _value_s499>_allowed_ZJYB[this][_from_s499][msg.sender] ) || ( _balances_ZJYB[this][_to_s499] + _value_s499 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s499>=0 ) && _value_s499<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ZJYB[this][_to_s499]>=0 ) && _balances_ZJYB[this][_to_s499]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ZJYB[this][_from_s499]>=0 ) && _balances_ZJYB[this][_from_s499]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ZJYB[this][_from_s499][msg.sender]>=0 ) && _allowed_ZJYB[this][_from_s499][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>],IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_to_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[_from_s499,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ZJYB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:01:59,645 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ZJYB.transferFrom(from, to, value), from != to && (value > _balances_ZJYB[this][from] || value > _allowed_ZJYB[this][from][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][from] >= 0 &&  _balances_ZJYB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ZJYB[this][from][msg.sender] >= 0 && _allowed_ZJYB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transferFrom)))
[2020-11-25 11:01:59,645 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ZJYB0) ==> ( <>AP(fail_transferFrom_ZJYB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:01:59,656 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:01:59 PropertyContainer
[2020-11-25 11:01:59,656 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:01:59,657 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:01:59,657 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:01:59,657 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:01:59,659 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/2) ...
[2020-11-25 11:01:59,659 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:01:59,659 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:01:59,671 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:01:59" (2/2) ...
[2020-11-25 11:01:59,671 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:01:59,671 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:01:59,671 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:01:59,671 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:01:59,672 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/2) ...
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:01:59,723 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,723 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__success
[2020-11-25 11:01:59,724 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 11:01:59,724 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 11:01:59,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 11:01:59,724 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 11:01:59,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 11:01:59,724 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 11:01:59,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 11:01:59,724 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 11:01:59,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 11:01:59,724 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 11:01:59,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 11:01:59,725 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB_NoBaseCtor__success
[2020-11-25 11:01:59,725 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB
[2020-11-25 11:01:59,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB
[2020-11-25 11:01:59,725 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZJYB
[2020-11-25 11:01:59,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZJYB
[2020-11-25 11:01:59,725 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZJYB
[2020-11-25 11:01:59,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZJYB
[2020-11-25 11:01:59,725 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZJYB
[2020-11-25 11:01:59,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZJYB
[2020-11-25 11:01:59,726 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_ZJYB
[2020-11-25 11:01:59,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_ZJYB
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZJYB
[2020-11-25 11:01:59,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZJYB
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZJYB
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:01:59,727 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 11:01:59,728 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB_NoBaseCtor__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB__success
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZJYB__success
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZJYB__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZJYB__success
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZJYB__fail
[2020-11-25 11:01:59,729 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZJYB__success
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZJYB__fail
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZJYB__success
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZJYB__fail
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZJYB__success
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZJYB__fail
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZJYB__success
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZJYB__fail
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZJYB__success
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZJYB__fail
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZJYB__success
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZJYB__fail
[2020-11-25 11:01:59,730 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZJYB__success
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZJYB__fail
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_ZJYB__success
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_ZJYB__fail
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZJYB__success
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZJYB__fail
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:01:59,731 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 11:01:59,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:01:59,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:01:59,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:01:59,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__fail
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__success
[2020-11-25 11:01:59,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 11:01:59,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB_NoBaseCtor__fail
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB_NoBaseCtor__success
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB__fail
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB__success
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZJYB__fail
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZJYB__success
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZJYB__fail
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZJYB__success
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZJYB__fail
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZJYB__success
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZJYB__fail
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZJYB__success
[2020-11-25 11:01:59,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZJYB__fail
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZJYB__success
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZJYB__fail
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZJYB__success
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZJYB__fail
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZJYB__success
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZJYB__fail
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZJYB__success
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZJYB__fail
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZJYB__success
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_ZJYB__fail
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_ZJYB__success
[2020-11-25 11:01:59,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZJYB__fail
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZJYB__success
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 11:01:59,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 11:01:59,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZJYB
[2020-11-25 11:01:59,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:01:59,737 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:01:59,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:02:00,039 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:02:00,039 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:02:00,269 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:02:00,269 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 11:02:00,271 INFO  L202        PluginConnector]: Adding new model ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:02:00 BoogieIcfgContainer
[2020-11-25 11:02:00,271 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:01:59" (2/2) ...
[2020-11-25 11:02:00,271 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:02:00,271 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@ba27ef0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:02:00, skipping insertion in model container
[2020-11-25 11:02:00,271 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:02:00,271 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:02:00,272 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:02:00,273 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:02:00,273 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/3) ...
[2020-11-25 11:02:00,273 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6caf2d7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:02:00, skipping insertion in model container
[2020-11-25 11:02:00,274 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:01:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:02:00,309 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:02:00 NWAContainer
[2020-11-25 11:02:00,309 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:02:00,309 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:02:00,309 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:02:00,310 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:02:00,311 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:02:00" (3/4) ...
[2020-11-25 11:02:00,312 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1642faeb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:02:00, skipping insertion in model container
[2020-11-25 11:02:00,312 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:02:00" (4/4) ...
[2020-11-25 11:02:00,315 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:02:00,318 INFO  L110   BuchiProductObserver]: Initial RCFG 1233 locations, 1604 edges
[2020-11-25 11:02:00,318 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:02:00,327 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:02:01,305 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:02:01,309 INFO  L110   BuchiProductObserver]: BuchiProgram size 2972 locations, 5213 edges
[2020-11-25 11:02:01,309 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:02:01 BoogieIcfgContainer
[2020-11-25 11:02:01,309 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:02:01,310 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:02:01,310 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:02:01,311 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:02:01,312 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:02:01" (1/1) ...
[2020-11-25 11:02:01,384 INFO  L313           BlockEncoder]: Initial Icfg 2972 locations, 5213 edges
[2020-11-25 11:02:01,384 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:02:01,385 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:02:01,385 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:02:01,385 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:02:01,394 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 9 locations because of local infeasibility
[2020-11-25 11:02:01,401 INFO  L70        RemoveSinkStates]: Removed 104 edges and 62 locations by removing sink states
[2020-11-25 11:02:01,409 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:02:01,413 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:02:01,415 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:02:01,416 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:02:01,419 INFO  L313           BlockEncoder]: Encoded RCFG 2883 locations, 4981 edges
[2020-11-25 11:02:01,419 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:02:01 BasicIcfg
[2020-11-25 11:02:01,420 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:02:01,420 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:02:01,420 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:02:01,422 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:02:01,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:02:01,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:01:59" (1/6) ...
[2020-11-25 11:02:01,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:02:01, skipping insertion in model container
[2020-11-25 11:02:01,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:02:01,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:01:59" (2/6) ...
[2020-11-25 11:02:01,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:02:01, skipping insertion in model container
[2020-11-25 11:02:01,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:02:01,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:02:00" (3/6) ...
[2020-11-25 11:02:01,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:02:01, skipping insertion in model container
[2020-11-25 11:02:01,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:02:01,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:02:00" (4/6) ...
[2020-11-25 11:02:01,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:02:01, skipping insertion in model container
[2020-11-25 11:02:01,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:02:01,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:02:01" (5/6) ...
[2020-11-25 11:02:01,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:02:01, skipping insertion in model container
[2020-11-25 11:02:01,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:02:01,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:02:01" (6/6) ...
[2020-11-25 11:02:01,426 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transferfrom-fail.bpl_BEv2
[2020-11-25 11:02:01,458 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:02:01,459 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:02:01,459 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:02:01,459 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:02:01,459 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:02:01,459 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:02:01,459 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:02:01,459 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:02:01,459 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:02:01,523 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2883 states.
[2020-11-25 11:02:01,568 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:01,568 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:01,568 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:01,578 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:01,578 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:01,578 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:02:01,578 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2883 states.
[2020-11-25 11:02:01,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:01,592 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:01,592 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:01,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:01,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND TRUE   revert
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND TRUE   revert
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:01,611 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:01,611 INFO  L82        PathProgramCache]: Analyzing trace with hash -300998932, now seen corresponding path program 1 times
[2020-11-25 11:02:01,614 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:01,633 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:01,677 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:02:01,678 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:01,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:02:01,682 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:01,814 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:02:01,815 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:02:01,817 INFO  L87              Difference]: Start difference. First operand 2883 states. Second operand 4 states.
[2020-11-25 11:02:02,390 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:02,391 INFO  L93              Difference]: Finished difference Result 2921 states and 4629 transitions.
[2020-11-25 11:02:02,391 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:02:02,392 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2921 states and 4629 transitions.
[2020-11-25 11:02:02,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:02:02,432 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2921 states to 2781 states and 4393 transitions.
[2020-11-25 11:02:02,433 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-11-25 11:02:02,436 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1000
[2020-11-25 11:02:02,436 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2781 states and 4393 transitions.
[2020-11-25 11:02:02,446 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:02,446 INFO  L728         BuchiCegarLoop]: Abstraction has 2781 states and 4393 transitions.
[2020-11-25 11:02:02,459 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2781 states and 4393 transitions.
[2020-11-25 11:02:02,507 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2781 to 2370.
[2020-11-25 11:02:02,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2370 states.
[2020-11-25 11:02:02,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2370 states to 2370 states and 3647 transitions.
[2020-11-25 11:02:02,514 INFO  L751         BuchiCegarLoop]: Abstraction has 2370 states and 3647 transitions.
[2020-11-25 11:02:02,514 INFO  L631         BuchiCegarLoop]: Abstraction has 2370 states and 3647 transitions.
[2020-11-25 11:02:02,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:02:02,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2370 states and 3647 transitions.
[2020-11-25 11:02:02,520 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:02,521 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:02,521 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:02,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:02,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:02,524 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:02,524 INFO  L82        PathProgramCache]: Analyzing trace with hash -1092157870, now seen corresponding path program 1 times
[2020-11-25 11:02:02,525 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:02,531 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:02,545 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:02:02,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:02,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:02:02,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:02,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:02:02,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:02:02,547 INFO  L87              Difference]: Start difference. First operand 2370 states and 3647 transitions. cyclomatic complexity: 1279 Second operand 4 states.
[2020-11-25 11:02:02,885 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:02,885 INFO  L93              Difference]: Finished difference Result 2147 states and 2329 transitions.
[2020-11-25 11:02:02,885 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:02:02,886 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2147 states and 2329 transitions.
[2020-11-25 11:02:02,893 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:02,900 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2147 states to 2147 states and 2329 transitions.
[2020-11-25 11:02:02,900 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 11:02:02,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 689
[2020-11-25 11:02:02,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2147 states and 2329 transitions.
[2020-11-25 11:02:02,903 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:02,903 INFO  L728         BuchiCegarLoop]: Abstraction has 2147 states and 2329 transitions.
[2020-11-25 11:02:02,905 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2147 states and 2329 transitions.
[2020-11-25 11:02:02,920 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2147 to 2142.
[2020-11-25 11:02:02,920 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2142 states.
[2020-11-25 11:02:02,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2142 states to 2142 states and 2324 transitions.
[2020-11-25 11:02:02,924 INFO  L751         BuchiCegarLoop]: Abstraction has 2142 states and 2324 transitions.
[2020-11-25 11:02:02,924 INFO  L631         BuchiCegarLoop]: Abstraction has 2142 states and 2324 transitions.
[2020-11-25 11:02:02,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:02:02,924 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2142 states and 2324 transitions.
[2020-11-25 11:02:02,928 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:02,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:02,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:02,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:02,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND FALSE  !(DType[this] == ZJYB)
[L1642]  COND TRUE   DType[this] == SafeMath
[L1643]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1643]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1644]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND FALSE  !(DType[this] == ZJYB)
[L1642]  COND TRUE   DType[this] == SafeMath
[L1643]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1643]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1644]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND FALSE  !(DType[this] == ZJYB)
[L1642]  COND TRUE   DType[this] == SafeMath
[L1643]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1643]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1644]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND FALSE  !(DType[this] == ZJYB)
[L1642]  COND TRUE   DType[this] == SafeMath
[L1643]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1643]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1644]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:02,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:02,935 INFO  L82        PathProgramCache]: Analyzing trace with hash 1265733801, now seen corresponding path program 1 times
[2020-11-25 11:02:02,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:02,954 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:03,011 INFO  L134       CoverageAnalysis]: Checked inductivity of 18 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 11:02:03,011 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:02:03,011 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:02:03,012 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:03,012 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:02:03,012 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:02:03,012 INFO  L87              Difference]: Start difference. First operand 2142 states and 2324 transitions. cyclomatic complexity: 184 Second operand 7 states.
[2020-11-25 11:02:03,180 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:03,181 INFO  L93              Difference]: Finished difference Result 2192 states and 2379 transitions.
[2020-11-25 11:02:03,181 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:02:03,181 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2192 states and 2379 transitions.
[2020-11-25 11:02:03,189 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:03,196 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2192 states to 2148 states and 2334 transitions.
[2020-11-25 11:02:03,197 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 689
[2020-11-25 11:02:03,197 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 689
[2020-11-25 11:02:03,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2148 states and 2334 transitions.
[2020-11-25 11:02:03,199 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:03,199 INFO  L728         BuchiCegarLoop]: Abstraction has 2148 states and 2334 transitions.
[2020-11-25 11:02:03,201 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2148 states and 2334 transitions.
[2020-11-25 11:02:03,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2148 to 2148.
[2020-11-25 11:02:03,216 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2148 states.
[2020-11-25 11:02:03,220 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2148 states to 2148 states and 2334 transitions.
[2020-11-25 11:02:03,220 INFO  L751         BuchiCegarLoop]: Abstraction has 2148 states and 2334 transitions.
[2020-11-25 11:02:03,220 INFO  L631         BuchiCegarLoop]: Abstraction has 2148 states and 2334 transitions.
[2020-11-25 11:02:03,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:02:03,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2148 states and 2334 transitions.
[2020-11-25 11:02:03,225 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:03,225 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:03,225 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:03,227 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:03,227 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:03,231 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:03,231 INFO  L82        PathProgramCache]: Analyzing trace with hash -357322159, now seen corresponding path program 1 times
[2020-11-25 11:02:03,232 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:03,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:03,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 17 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 8 trivial. 0 not checked.
[2020-11-25 11:02:03,359 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:03,359 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 11:02:03,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:03,359 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 11:02:03,359 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-11-25 11:02:03,359 INFO  L87              Difference]: Start difference. First operand 2148 states and 2334 transitions. cyclomatic complexity: 188 Second operand 15 states.
[2020-11-25 11:02:04,485 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:04,486 INFO  L93              Difference]: Finished difference Result 2181 states and 2379 transitions.
[2020-11-25 11:02:04,486 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 11:02:04,487 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2181 states and 2379 transitions.
[2020-11-25 11:02:04,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:04,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2181 states to 2177 states and 2371 transitions.
[2020-11-25 11:02:04,502 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 11:02:04,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 11:02:04,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2177 states and 2371 transitions.
[2020-11-25 11:02:04,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:04,505 INFO  L728         BuchiCegarLoop]: Abstraction has 2177 states and 2371 transitions.
[2020-11-25 11:02:04,506 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2177 states and 2371 transitions.
[2020-11-25 11:02:04,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2177 to 2168.
[2020-11-25 11:02:04,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2168 states.
[2020-11-25 11:02:04,524 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2168 states to 2168 states and 2356 transitions.
[2020-11-25 11:02:04,524 INFO  L751         BuchiCegarLoop]: Abstraction has 2168 states and 2356 transitions.
[2020-11-25 11:02:04,524 INFO  L631         BuchiCegarLoop]: Abstraction has 2168 states and 2356 transitions.
[2020-11-25 11:02:04,524 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:02:04,525 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2168 states and 2356 transitions.
[2020-11-25 11:02:04,528 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:04,528 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:04,528 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:04,529 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:04,529 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND TRUE   __exception
[L442]               __tmp__Balance := Balance;
[L443]               __tmp__DType := DType;
[L444]               __tmp__Alloc := Alloc;
[L445]               __tmp__balance_ADDR := balance_ADDR;
[L446]               __tmp__M_Ref_int := M_Ref_int;
[L447]               __tmp__sum__balances0 := sum__balances0;
[L448]               __tmp__alloc__allowed_ZJYB_lvl0 := alloc__allowed_ZJYB_lvl0;
[L449]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L450]               __tmp__sum__allowed1 := sum__allowed1;
[L451]               __tmp__Length := Length;
[L452]               __tmp__now := now;
[L453]               __tmp__owner_Owned := owner_Owned;
[L454]               __tmp__newOwner_Owned := newOwner_Owned;
[L455]               __tmp__name_ZJYB := name_ZJYB;
[L456]               __tmp__symbol_ZJYB := symbol_ZJYB;
[L457]               __tmp__decimals_ZJYB := decimals_ZJYB;
[L458]               __tmp___balances_ZJYB := _balances_ZJYB;
[L459]               __tmp___allowed_ZJYB := _allowed_ZJYB;
[L460]               __tmp__totalSupply_ZJYB := totalSupply_ZJYB;
[L461]   CALL        call ZJYB_ZJYB__fail(this, msgsender_MSG, msgvalue_MSG);
[L1863]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1492]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1477]              assume msgsender_MSG != null;
[L1478]              __tmp__Balance[this] := 0;
[L1492]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1493]  COND FALSE  !(revert)
[L1863]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1864]  COND FALSE  !(revert)
[L1867]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1736]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1715]              assume msgsender_MSG != null;
[L1716]              __tmp__Balance[this] := 0;
[L1717]              __tmp__owner_Owned[this] := null;
[L1718]              __tmp__newOwner_Owned[this] := null;
[L1720]              __tmp__owner_Owned[this] := msgsender_MSG;
[L1736]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1737]  COND FALSE  !(revert)
[L1867]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1868]  COND FALSE  !(revert)
[L1871]  CALL        call ZJYB_ZJYB_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1821]              assume msgsender_MSG != null;
[L1822]              __tmp__Balance[this] := 0;
[L1823]              __tmp__name_ZJYB[this] := 1113454875;
[L1824]              __tmp__symbol_ZJYB[this] := 773017640;
[L1825]              __tmp__decimals_ZJYB[this] := 18;
[L1826]              __tmp___balances_ZJYB[this] := zeroRefintArr();
[L1827]              __tmp__sum__balances0[this] := 0;
[L1828]              __tmp___allowed_ZJYB[this] := zeroRefRefintArr();
[L1829]              __tmp__sum__allowed1[this] := 0;
[L1830]              __var_2 := __tmp__decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1831]              __tmp__totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, __tmp__decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1833]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZJYB[this][msgsender_MSG];
[L1834]              __tmp___balances_ZJYB[this][msgsender_MSG] := __tmp__totalSupply_ZJYB[this];
[L1835]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZJYB[this][msgsender_MSG];
[L1871]  RET         call ZJYB_ZJYB_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]  COND FALSE  !(revert)
[L461]   RET         call ZJYB_ZJYB__fail(this, msgsender_MSG, msgvalue_MSG);
[L462]               assume revert || gas < 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:04,532 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:04,532 INFO  L82        PathProgramCache]: Analyzing trace with hash 2046659823, now seen corresponding path program 1 times
[2020-11-25 11:02:04,533 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:04,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:04,567 INFO  L134       CoverageAnalysis]: Checked inductivity of 17 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 17 trivial. 0 not checked.
[2020-11-25 11:02:04,567 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:04,567 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:02:04,567 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:04,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:02:04,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:02:04,568 INFO  L87              Difference]: Start difference. First operand 2168 states and 2356 transitions. cyclomatic complexity: 191 Second operand 4 states.
[2020-11-25 11:02:04,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:04,725 INFO  L93              Difference]: Finished difference Result 2741 states and 3089 transitions.
[2020-11-25 11:02:04,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:02:04,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2741 states and 3089 transitions.
[2020-11-25 11:02:04,732 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 11:02:04,740 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2741 states to 2661 states and 3009 transitions.
[2020-11-25 11:02:04,740 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 870
[2020-11-25 11:02:04,741 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 870
[2020-11-25 11:02:04,741 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2661 states and 3009 transitions.
[2020-11-25 11:02:04,743 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:04,743 INFO  L728         BuchiCegarLoop]: Abstraction has 2661 states and 3009 transitions.
[2020-11-25 11:02:04,745 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2661 states and 3009 transitions.
[2020-11-25 11:02:04,759 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2661 to 2088.
[2020-11-25 11:02:04,759 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2088 states.
[2020-11-25 11:02:04,760 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2088 states to 2088 states and 2275 transitions.
[2020-11-25 11:02:04,761 INFO  L751         BuchiCegarLoop]: Abstraction has 2088 states and 2275 transitions.
[2020-11-25 11:02:04,761 INFO  L631         BuchiCegarLoop]: Abstraction has 2088 states and 2275 transitions.
[2020-11-25 11:02:04,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:02:04,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2088 states and 2275 transitions.
[2020-11-25 11:02:04,763 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:04,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:04,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:04,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:04,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:04,767 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:04,767 INFO  L82        PathProgramCache]: Analyzing trace with hash 1419142745, now seen corresponding path program 1 times
[2020-11-25 11:02:04,768 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:04,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:05,026 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-11-25 11:02:05,026 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:05,027 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 11:02:05,027 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:05,027 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 11:02:05,027 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=47, Invalid=333, Unknown=0, NotChecked=0, Total=380
[2020-11-25 11:02:05,027 INFO  L87              Difference]: Start difference. First operand 2088 states and 2275 transitions. cyclomatic complexity: 190 Second operand 20 states.
[2020-11-25 11:02:07,401 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:07,402 INFO  L93              Difference]: Finished difference Result 2166 states and 2365 transitions.
[2020-11-25 11:02:07,402 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 11:02:07,402 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2166 states and 2365 transitions.
[2020-11-25 11:02:07,407 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:07,412 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2166 states to 2166 states and 2365 transitions.
[2020-11-25 11:02:07,413 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 712
[2020-11-25 11:02:07,413 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 712
[2020-11-25 11:02:07,413 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2166 states and 2365 transitions.
[2020-11-25 11:02:07,415 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:07,415 INFO  L728         BuchiCegarLoop]: Abstraction has 2166 states and 2365 transitions.
[2020-11-25 11:02:07,417 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2166 states and 2365 transitions.
[2020-11-25 11:02:07,428 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2166 to 2122.
[2020-11-25 11:02:07,428 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2122 states.
[2020-11-25 11:02:07,430 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2122 states to 2122 states and 2320 transitions.
[2020-11-25 11:02:07,430 INFO  L751         BuchiCegarLoop]: Abstraction has 2122 states and 2320 transitions.
[2020-11-25 11:02:07,430 INFO  L631         BuchiCegarLoop]: Abstraction has 2122 states and 2320 transitions.
[2020-11-25 11:02:07,430 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:02:07,430 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2122 states and 2320 transitions.
[2020-11-25 11:02:07,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:07,433 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:07,433 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:07,436 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:07,436 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:07,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:07,441 INFO  L82        PathProgramCache]: Analyzing trace with hash 1495204413, now seen corresponding path program 1 times
[2020-11-25 11:02:07,441 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:07,462 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:07,788 INFO  L134       CoverageAnalysis]: Checked inductivity of 197 backedges. 9 proven. 2 refuted. 0 times theorem prover too weak. 186 trivial. 0 not checked.
[2020-11-25 11:02:07,788 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:02:07,788 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [22] total 22
[2020-11-25 11:02:07,788 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:07,788 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 11:02:07,789 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=54, Invalid=452, Unknown=0, NotChecked=0, Total=506
[2020-11-25 11:02:07,789 INFO  L87              Difference]: Start difference. First operand 2122 states and 2320 transitions. cyclomatic complexity: 203 Second operand 23 states.
[2020-11-25 11:02:10,073 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:10,074 INFO  L93              Difference]: Finished difference Result 2172 states and 2383 transitions.
[2020-11-25 11:02:10,074 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 11:02:10,074 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2172 states and 2383 transitions.
[2020-11-25 11:02:10,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:10,107 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2172 states to 2172 states and 2383 transitions.
[2020-11-25 11:02:10,107 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 712
[2020-11-25 11:02:10,108 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 712
[2020-11-25 11:02:10,108 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2172 states and 2383 transitions.
[2020-11-25 11:02:10,112 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:10,112 INFO  L728         BuchiCegarLoop]: Abstraction has 2172 states and 2383 transitions.
[2020-11-25 11:02:10,115 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2172 states and 2383 transitions.
[2020-11-25 11:02:10,126 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2172 to 2119.
[2020-11-25 11:02:10,126 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2119 states.
[2020-11-25 11:02:10,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2119 states to 2119 states and 2317 transitions.
[2020-11-25 11:02:10,128 INFO  L751         BuchiCegarLoop]: Abstraction has 2119 states and 2317 transitions.
[2020-11-25 11:02:10,128 INFO  L631         BuchiCegarLoop]: Abstraction has 2119 states and 2317 transitions.
[2020-11-25 11:02:10,128 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:02:10,128 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2119 states and 2317 transitions.
[2020-11-25 11:02:10,130 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:10,130 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:10,130 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:10,132 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:10,132 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == ZJYB)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:10,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:10,139 INFO  L82        PathProgramCache]: Analyzing trace with hash 96676508, now seen corresponding path program 1 times
[2020-11-25 11:02:10,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:10,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:10,252 INFO  L134       CoverageAnalysis]: Checked inductivity of 187 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 182 trivial. 0 not checked.
[2020-11-25 11:02:10,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:10,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:02:10,253 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:10,253 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:02:10,253 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:02:10,254 INFO  L87              Difference]: Start difference. First operand 2119 states and 2317 transitions. cyclomatic complexity: 203 Second operand 7 states.
[2020-11-25 11:02:10,305 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:10,305 INFO  L93              Difference]: Finished difference Result 2157 states and 2355 transitions.
[2020-11-25 11:02:10,305 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:02:10,306 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2157 states and 2355 transitions.
[2020-11-25 11:02:10,311 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:10,318 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2157 states to 2125 states and 2323 transitions.
[2020-11-25 11:02:10,318 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 697
[2020-11-25 11:02:10,318 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 697
[2020-11-25 11:02:10,318 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2125 states and 2323 transitions.
[2020-11-25 11:02:10,321 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:10,321 INFO  L728         BuchiCegarLoop]: Abstraction has 2125 states and 2323 transitions.
[2020-11-25 11:02:10,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2125 states and 2323 transitions.
[2020-11-25 11:02:10,336 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2125 to 2125.
[2020-11-25 11:02:10,337 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2125 states.
[2020-11-25 11:02:10,339 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2125 states to 2125 states and 2323 transitions.
[2020-11-25 11:02:10,339 INFO  L751         BuchiCegarLoop]: Abstraction has 2125 states and 2323 transitions.
[2020-11-25 11:02:10,340 INFO  L631         BuchiCegarLoop]: Abstraction has 2125 states and 2323 transitions.
[2020-11-25 11:02:10,340 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:02:10,340 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2125 states and 2323 transitions.
[2020-11-25 11:02:10,343 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:02:10,343 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:02:10,343 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:02:10,345 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:02:10,345 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ZJYB0 := false;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s499 != _to_s499 && ((_value_s499 > _balances_ZJYB[this][_from_s499] || _value_s499 > _allowed_ZJYB[this][_from_s499][msgsender_MSG]) || _balances_ZJYB[this][_to_s499] + _value_s499 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s499 >= 0) && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s499] >= 0) && _balances_ZJYB[this][_to_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_from_s499] >= 0) && _balances_ZJYB[this][_from_s499] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] >= 0) && _allowed_ZJYB[this][_from_s499][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ZJYB0 := true;
[L2]                 call_transferFrom_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:02:10,350 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:02:10,350 INFO  L82        PathProgramCache]: Analyzing trace with hash -1138204088, now seen corresponding path program 1 times
[2020-11-25 11:02:10,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:02:10,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:02:10,555 INFO  L134       CoverageAnalysis]: Checked inductivity of 187 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 178 trivial. 0 not checked.
[2020-11-25 11:02:10,555 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:02:10,555 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 11:02:10,556 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:02:10,556 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 11:02:10,556 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=87, Unknown=0, NotChecked=0, Total=110
[2020-11-25 11:02:10,556 INFO  L87              Difference]: Start difference. First operand 2125 states and 2323 transitions. cyclomatic complexity: 203 Second operand 11 states.
[2020-11-25 11:02:11,117 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:02:11,117 INFO  L93              Difference]: Finished difference Result 1261 states and 1381 transitions.
[2020-11-25 11:02:11,117 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 11:02:11,117 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1261 states and 1381 transitions.
[2020-11-25 11:02:11,119 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:02:11,119 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1261 states to 0 states and 0 transitions.
[2020-11-25 11:02:11,119 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:02:11,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:02:11,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:02:11,120 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:02:11,120 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:02:11,120 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:02:11,120 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:02:11,120 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 11:02:11,120 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:02:11,120 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:02:11,120 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:02:11,123 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:02:11 BasicIcfg
[2020-11-25 11:02:11,123 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:02:11,123 INFO  L168              Benchmark]: Toolchain (without parser) took 11607.75 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 901.3 MB). Free memory was 940.6 MB in the beginning and 708.5 MB in the end (delta: 232.1 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,124 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,125 INFO  L168              Benchmark]: Boogie Preprocessor took 80.80 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,125 INFO  L168              Benchmark]: UtopiaSpecLang took 59.11 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,125 INFO  L168              Benchmark]: Boogie Printer took 13.95 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,125 INFO  L168              Benchmark]: RCFGBuilder took 600.35 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 833.2 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,125 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.72 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 829.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,126 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1000.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 77.1 MB). Free memory was 829.6 MB in the beginning and 747.9 MB in the end (delta: 81.7 MB). Peak memory consumption was 158.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,126 INFO  L168              Benchmark]: BlockEncodingV2 took 109.76 ms. Allocated memory is still 1.1 GB. Free memory was 747.9 MB in the beginning and 706.4 MB in the end (delta: 41.5 MB). Peak memory consumption was 41.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,127 INFO  L168              Benchmark]: BuchiAutomizer took 9702.94 ms. Allocated memory was 1.1 GB in the beginning and 1.9 GB in the end (delta: 824.2 MB). Free memory was 706.4 MB in the beginning and 708.5 MB in the end (delta: -2.1 MB). Peak memory consumption was 822.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:02:11,129 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2972 locations, 5213 edges
  - StatisticsResult: Encoded RCFG
    2883 locations, 4981 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 80.80 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.11 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.95 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 600.35 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 833.2 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.72 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 829.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1000.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 77.1 MB). Free memory was 829.6 MB in the beginning and 747.9 MB in the end (delta: 81.7 MB). Peak memory consumption was 158.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 109.76 ms. Allocated memory is still 1.1 GB. Free memory was 747.9 MB in the beginning and 706.4 MB in the end (delta: 41.5 MB). Peak memory consumption was 41.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9702.94 ms. Allocated memory was 1.1 GB in the beginning and 1.9 GB in the end (delta: 824.2 MB). Free memory was 706.4 MB in the beginning and 708.5 MB in the end (delta: -2.1 MB). Peak memory consumption was 822.1 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1233 locations, 1604 edges
  - StatisticsResult: BuchiProgram size
    2972 locations, 5213 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 23 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.6s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.3s. Construction of modules took 5.8s. BÃ¼chi inclusion checks took 1.9s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 8 MinimizatonAttempts, 1095 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2370 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 20479 SDtfs, 19165 SDslu, 53465 SDs, 0 SdLazy, 85576 SolverSat, 2787 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ZJY(fail_transferFrom_ZJYB0)0) ==> ( <>(fail_transferFrom_ZJYB0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
