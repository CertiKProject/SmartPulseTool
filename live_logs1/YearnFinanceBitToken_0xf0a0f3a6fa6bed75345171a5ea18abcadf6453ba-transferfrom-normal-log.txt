This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:28:52,823 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:28:52,825 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:28:52,836 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:28:52,836 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:28:52,837 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:28:52,838 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:28:52,839 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:28:52,841 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:28:52,841 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:28:52,842 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:28:52,842 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:28:52,843 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:28:52,843 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:28:52,844 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:28:52,845 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:28:52,845 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:28:52,846 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:28:52,847 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:28:52,848 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:28:52,849 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:28:52,850 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:28:52,852 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:28:52,852 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:28:52,852 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:28:52,852 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:28:52,853 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:28:52,853 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:28:52,853 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:28:52,854 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:28:52,854 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:28:52,854 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:28:52,855 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:28:52,855 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:28:52,856 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:28:52,856 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:28:52,857 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:28:52,857 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:28:52,857 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:28:52,858 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:28:52,858 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:28:52,858 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:28:52,866 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:28:52,866 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:28:52,867 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:28:52,867 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:28:52,867 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:28:52,868 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:28:52,868 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:28:52,868 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:28:52,868 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:28:52,868 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:28:52,868 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:28:52,869 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:28:52,869 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:28:52,870 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:28:52,870 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:28:52,870 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:28:52,870 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:28:52,870 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:28:52,870 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:28:52,900 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:28:52,915 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:28:52,917 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:28:52,918 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:28:52,918 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:28:52,919 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl
[2020-11-25 09:28:52,919 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl'
[2020-11-25 09:28:52,987 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:28:52,988 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:28:52,988 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:28:52,988 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:28:52,988 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:28:53,004 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,006 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,029 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,030 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,047 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,054 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,059 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,067 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:28:53,067 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:28:53,067 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:28:53,069 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:28:53,073 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/1) ...
[2020-11-25 09:28:53,088 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(YearnFinanceBitToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && balances_YearnFinanceBitToken[this][from] == old(balances_YearnFinanceBitToken[this][from]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:53,093 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(YearnFinanceBitToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && balances_YearnFinanceBitToken[this][from] == old(balances_YearnFinanceBitToken[this][from]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:53,100 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(YearnFinanceBitToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && balances_YearnFinanceBitToken[this][from] == old(balances_YearnFinanceBitToken[this][from]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:53,108 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s393 && p1!=to_s393 ) && ( p2!=from_s393 || p3!=msg.sender ) ) && from_s393!=to_s393 ) && tokens_s393<=balances_YearnFinanceBitToken[this][from_s393] ) && tokens_s393<=allowed_YearnFinanceBitToken[this][from_s393][msg.sender] ) && ( balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s393>=0 ) && tokens_s393<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][to_s393]>=0 ) && balances_YearnFinanceBitToken[this][to_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_YearnFinanceBitToken[this][from_s393]>=0 ) && balances_YearnFinanceBitToken[this][from_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_YearnFinanceBitToken[this][from_s393][msg.sender]>=0 ) && allowed_YearnFinanceBitToken[this][from_s393][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:28:53,111 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s393==true && balances_YearnFinanceBitToken[this][from_s393]==( ( old(balances_YearnFinanceBitToken[this][from_s393]) ) - tokens_s393 ) ) && balances_YearnFinanceBitToken[this][to_s393]==( ( old(balances_YearnFinanceBitToken[this][to_s393]) ) + tokens_s393 ) ) && allowed_YearnFinanceBitToken[this][from_s393][msg.sender]==( ( old(allowed_YearnFinanceBitToken[this][from_s393][msg.sender]) ) - tokens_s393 ) ) && _totalSupply_YearnFinanceBitToken[this]==( old(_totalSupply_YearnFinanceBitToken[this]) ) ) && balances_YearnFinanceBitToken[this][p1]==( old(balances_YearnFinanceBitToken[this][p1]) ) ) && allowed_YearnFinanceBitToken[this][p2][p3]==( old(allowed_YearnFinanceBitToken[this][p2][p3]) ) ) && name_YearnFinanceBitToken[this]==( old(name_YearnFinanceBitToken[this]) ) ) && symbol_YearnFinanceBitToken[this]==( old(symbol_YearnFinanceBitToken[this]) ) ) && decimals_YearnFinanceBitToken[this]==( old(decimals_YearnFinanceBitToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s393,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_YearnFinanceBitToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YearnFinanceBitToken>]]]]]]
[2020-11-25 09:28:53,115 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(YearnFinanceBitToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_YearnFinanceBitToken[this][from] && value <= allowed_YearnFinanceBitToken[this][from][msg.sender] && balances_YearnFinanceBitToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][to] >= 0 && balances_YearnFinanceBitToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_YearnFinanceBitToken[this][from] >= 0 &&  balances_YearnFinanceBitToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_YearnFinanceBitToken[this][from][msg.sender] >= 0 && allowed_YearnFinanceBitToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YearnFinanceBitToken.transferFrom(from, to, value), return == true && balances_YearnFinanceBitToken[this][from] == old(balances_YearnFinanceBitToken[this][from]) - value && balances_YearnFinanceBitToken[this][to] == old(balances_YearnFinanceBitToken[this][to]) + value && allowed_YearnFinanceBitToken[this][from][msg.sender] == old(allowed_YearnFinanceBitToken[this][from][msg.sender]) - value && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this]) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1]) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3]) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this]) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this]) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]))))
[2020-11-25 09:28:53,115 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_YearnFinanceBitToken0) ==> ( <>AP(success_transferFrom_YearnFinanceBitToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:28:53,121 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:53 PropertyContainer
[2020-11-25 09:28:53,122 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:28:53,122 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:28:53,122 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:28:53,122 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:28:53,123 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/2) ...
[2020-11-25 09:28:53,123 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:28:53,123 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:28:53,134 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:53" (2/2) ...
[2020-11-25 09:28:53,134 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:28:53,135 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:28:53,135 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:28:53,135 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:28:53,135 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/2) ...
[2020-11-25 09:28:53,187 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:28:53,187 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:28:53,188 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:28:53,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:28:53,189 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:28:53,189 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:28:53,189 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:53,190 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:28:53,191 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:28:53,192 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:53,193 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:28:53,194 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:28:53,195 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:28:53,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:28:53,195 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,196 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__fail
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure YearnFinanceBitToken_YearnFinanceBitToken__success
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:53,197 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YearnFinanceBitToken__success
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YearnFinanceBitToken__success
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YearnFinanceBitToken__success
[2020-11-25 09:28:53,198 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YearnFinanceBitToken__success
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YearnFinanceBitToken__success
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YearnFinanceBitToken__success
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__fail
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_YearnFinanceBitToken__success
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:28:53,199 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YearnFinanceBitToken
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:28:53,200 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:28:53,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:28:53,361 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:53,380 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:53,380 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:53,381 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:28:53,791 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:28:53,792 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 09:28:53,794 INFO  L202        PluginConnector]: Adding new model YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:53 BoogieIcfgContainer
[2020-11-25 09:28:53,794 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:53" (2/2) ...
[2020-11-25 09:28:53,794 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:28:53,795 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@43a6b00d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:53, skipping insertion in model container
[2020-11-25 09:28:53,795 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:28:53,795 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:28:53,795 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:28:53,797 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:28:53,798 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/3) ...
[2020-11-25 09:28:53,798 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2742e77a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:53, skipping insertion in model container
[2020-11-25 09:28:53,798 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:53" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:28:53,838 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:53 NWAContainer
[2020-11-25 09:28:53,838 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:28:53,838 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:28:53,838 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:28:53,839 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:28:53,840 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:53" (3/4) ...
[2020-11-25 09:28:53,841 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7311f263 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:53, skipping insertion in model container
[2020-11-25 09:28:53,841 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:53" (4/4) ...
[2020-11-25 09:28:53,844 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:28:53,847 INFO  L110   BuchiProductObserver]: Initial RCFG 1052 locations, 1325 edges
[2020-11-25 09:28:53,847 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:28:53,860 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:28:54,934 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:28:54,937 INFO  L110   BuchiProductObserver]: BuchiProgram size 2494 locations, 4287 edges
[2020-11-25 09:28:54,938 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:54 BoogieIcfgContainer
[2020-11-25 09:28:54,938 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:28:54,938 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:28:54,938 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:28:54,939 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:28:54,940 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:54" (1/1) ...
[2020-11-25 09:28:55,008 INFO  L313           BlockEncoder]: Initial Icfg 2494 locations, 4287 edges
[2020-11-25 09:28:55,008 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:28:55,009 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:28:55,009 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:28:55,010 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:28:55,019 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 09:28:55,025 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 09:28:55,033 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:28:55,037 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:28:55,039 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:28:55,040 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:28:55,043 INFO  L313           BlockEncoder]: Encoded RCFG 2450 locations, 4169 edges
[2020-11-25 09:28:55,043 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:28:55 BasicIcfg
[2020-11-25 09:28:55,043 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:28:55,044 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:28:55,044 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:28:55,046 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:28:55,046 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:55,046 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:28:52" (1/6) ...
[2020-11-25 09:28:55,048 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4d064787 and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:55, skipping insertion in model container
[2020-11-25 09:28:55,048 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:55,048 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:28:53" (2/6) ...
[2020-11-25 09:28:55,048 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4d064787 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:55, skipping insertion in model container
[2020-11-25 09:28:55,048 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:55,048 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:28:53" (3/6) ...
[2020-11-25 09:28:55,049 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4d064787 and model type YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:28:55, skipping insertion in model container
[2020-11-25 09:28:55,049 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:55,049 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:28:53" (4/6) ...
[2020-11-25 09:28:55,049 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4d064787 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:28:55, skipping insertion in model container
[2020-11-25 09:28:55,049 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:55,049 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:28:54" (5/6) ...
[2020-11-25 09:28:55,049 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4d064787 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:28:55, skipping insertion in model container
[2020-11-25 09:28:55,049 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:28:55,049 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:28:55" (6/6) ...
[2020-11-25 09:28:55,050 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YearnFinanceBitToken_0xf0a0f3a6fa6bed75345171a5ea18abcadf6453ba_transferfrom-normal.bpl_BEv2
[2020-11-25 09:28:55,077 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:28:55,078 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:28:55,078 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:28:55,078 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:28:55,078 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:28:55,078 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:28:55,078 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:28:55,078 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:28:55,078 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:28:55,101 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2450 states.
[2020-11-25 09:28:55,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:55,174 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:55,174 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:55,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:55,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:55,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:28:55,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2450 states.
[2020-11-25 09:28:55,197 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:55,197 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:55,197 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:55,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:55,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:55,214 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:55,214 INFO  L82        PathProgramCache]: Analyzing trace with hash 487717601, now seen corresponding path program 1 times
[2020-11-25 09:28:55,217 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:55,234 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:55,269 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:55,272 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:55,273 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:28:55,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:55,441 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:28:55,442 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:28:55,443 INFO  L87              Difference]: Start difference. First operand 2450 states. Second operand 3 states.
[2020-11-25 09:28:55,558 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:55,558 INFO  L93              Difference]: Finished difference Result 1725 states and 1882 transitions.
[2020-11-25 09:28:55,558 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:28:55,559 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1725 states and 1882 transitions.
[2020-11-25 09:28:55,567 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:55,578 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1725 states to 1725 states and 1882 transitions.
[2020-11-25 09:28:55,579 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:28:55,580 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 09:28:55,581 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1725 states and 1882 transitions.
[2020-11-25 09:28:55,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:55,585 INFO  L728         BuchiCegarLoop]: Abstraction has 1725 states and 1882 transitions.
[2020-11-25 09:28:55,598 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1725 states and 1882 transitions.
[2020-11-25 09:28:55,625 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1725 to 1725.
[2020-11-25 09:28:55,626 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1725 states.
[2020-11-25 09:28:55,629 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1725 states to 1725 states and 1882 transitions.
[2020-11-25 09:28:55,629 INFO  L751         BuchiCegarLoop]: Abstraction has 1725 states and 1882 transitions.
[2020-11-25 09:28:55,630 INFO  L631         BuchiCegarLoop]: Abstraction has 1725 states and 1882 transitions.
[2020-11-25 09:28:55,630 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:28:55,630 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1725 states and 1882 transitions.
[2020-11-25 09:28:55,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:55,635 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:55,635 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:55,636 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:55,637 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:55,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:55,641 INFO  L82        PathProgramCache]: Analyzing trace with hash 908896401, now seen corresponding path program 1 times
[2020-11-25 09:28:55,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:55,650 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:55,667 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:55,667 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:55,667 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:28:55,668 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:55,668 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:28:55,668 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:28:55,668 INFO  L87              Difference]: Start difference. First operand 1725 states and 1882 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 09:28:56,034 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:56,034 INFO  L93              Difference]: Finished difference Result 2599 states and 2958 transitions.
[2020-11-25 09:28:56,034 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:28:56,035 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2599 states and 2958 transitions.
[2020-11-25 09:28:56,050 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:28:56,065 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2599 states to 2523 states and 2876 transitions.
[2020-11-25 09:28:56,065 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 09:28:56,067 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 09:28:56,067 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2523 states and 2876 transitions.
[2020-11-25 09:28:56,072 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:56,072 INFO  L728         BuchiCegarLoop]: Abstraction has 2523 states and 2876 transitions.
[2020-11-25 09:28:56,075 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2523 states and 2876 transitions.
[2020-11-25 09:28:56,100 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2523 to 1745.
[2020-11-25 09:28:56,100 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1745 states.
[2020-11-25 09:28:56,104 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1745 states to 1745 states and 1874 transitions.
[2020-11-25 09:28:56,104 INFO  L751         BuchiCegarLoop]: Abstraction has 1745 states and 1874 transitions.
[2020-11-25 09:28:56,104 INFO  L631         BuchiCegarLoop]: Abstraction has 1745 states and 1874 transitions.
[2020-11-25 09:28:56,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:28:56,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1745 states and 1874 transitions.
[2020-11-25 09:28:56,109 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:56,109 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:56,109 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:56,112 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:56,112 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:56,115 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:56,116 INFO  L82        PathProgramCache]: Analyzing trace with hash -1713192628, now seen corresponding path program 1 times
[2020-11-25 09:28:56,116 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:56,129 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:56,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:28:56,179 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:28:56,179 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:28:56,179 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:56,180 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:28:56,180 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:28:56,180 INFO  L87              Difference]: Start difference. First operand 1745 states and 1874 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 09:28:56,819 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:28:56,820 INFO  L93              Difference]: Finished difference Result 1903 states and 2046 transitions.
[2020-11-25 09:28:56,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:28:56,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1903 states and 2046 transitions.
[2020-11-25 09:28:56,827 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:28:56,834 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1903 states to 1903 states and 2046 transitions.
[2020-11-25 09:28:56,834 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 09:28:56,835 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 09:28:56,835 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1903 states and 2046 transitions.
[2020-11-25 09:28:56,837 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:28:56,837 INFO  L728         BuchiCegarLoop]: Abstraction has 1903 states and 2046 transitions.
[2020-11-25 09:28:56,839 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1903 states and 2046 transitions.
[2020-11-25 09:28:56,855 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1903 to 1797.
[2020-11-25 09:28:56,855 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1797 states.
[2020-11-25 09:28:56,858 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1797 states to 1797 states and 1930 transitions.
[2020-11-25 09:28:56,858 INFO  L751         BuchiCegarLoop]: Abstraction has 1797 states and 1930 transitions.
[2020-11-25 09:28:56,858 INFO  L631         BuchiCegarLoop]: Abstraction has 1797 states and 1930 transitions.
[2020-11-25 09:28:56,858 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:28:56,858 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1797 states and 1930 transitions.
[2020-11-25 09:28:56,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:28:56,862 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:28:56,862 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:28:56,863 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:28:56,863 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:28:56,867 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:28:56,867 INFO  L82        PathProgramCache]: Analyzing trace with hash -501084604, now seen corresponding path program 1 times
[2020-11-25 09:28:56,867 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:28:56,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:28:58,066 WARN  L188               SmtUtils]: Spent 250.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 78
[2020-11-25 09:28:58,800 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 68
[2020-11-25 09:28:59,062 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 09:28:59,063 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:28:59,063 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 09:28:59,063 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:28:59,063 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 09:28:59,064 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=582, Unknown=0, NotChecked=0, Total=650
[2020-11-25 09:28:59,064 INFO  L87              Difference]: Start difference. First operand 1797 states and 1930 transitions. cyclomatic complexity: 135 Second operand 26 states.
[2020-11-25 09:29:05,485 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:05,485 INFO  L93              Difference]: Finished difference Result 1868 states and 2027 transitions.
[2020-11-25 09:29:05,485 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 09:29:05,485 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1868 states and 2027 transitions.
[2020-11-25 09:29:05,490 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:29:05,495 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1868 states to 1868 states and 2027 transitions.
[2020-11-25 09:29:05,495 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 09:29:05,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-11-25 09:29:05,496 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1868 states and 2027 transitions.
[2020-11-25 09:29:05,497 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:05,497 INFO  L728         BuchiCegarLoop]: Abstraction has 1868 states and 2027 transitions.
[2020-11-25 09:29:05,499 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1868 states and 2027 transitions.
[2020-11-25 09:29:05,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1868 to 1851.
[2020-11-25 09:29:05,512 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1851 states.
[2020-11-25 09:29:05,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1851 states to 1851 states and 1994 transitions.
[2020-11-25 09:29:05,514 INFO  L751         BuchiCegarLoop]: Abstraction has 1851 states and 1994 transitions.
[2020-11-25 09:29:05,514 INFO  L631         BuchiCegarLoop]: Abstraction has 1851 states and 1994 transitions.
[2020-11-25 09:29:05,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:29:05,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1851 states and 1994 transitions.
[2020-11-25 09:29:05,517 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:05,517 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:05,517 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:05,519 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:05,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:05,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:05,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 2016992186, now seen corresponding path program 1 times
[2020-11-25 09:29:05,523 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:05,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:05,557 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:29:05,557 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:05,557 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:29:05,557 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:05,558 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:29:05,558 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:29:05,558 INFO  L87              Difference]: Start difference. First operand 1851 states and 1994 transitions. cyclomatic complexity: 147 Second operand 7 states.
[2020-11-25 09:29:05,846 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:05,846 INFO  L93              Difference]: Finished difference Result 1935 states and 2094 transitions.
[2020-11-25 09:29:05,846 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:29:05,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1935 states and 2094 transitions.
[2020-11-25 09:29:05,852 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:29:05,856 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1935 states to 1935 states and 2094 transitions.
[2020-11-25 09:29:05,856 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 09:29:05,857 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 09:29:05,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1935 states and 2094 transitions.
[2020-11-25 09:29:05,858 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:05,858 INFO  L728         BuchiCegarLoop]: Abstraction has 1935 states and 2094 transitions.
[2020-11-25 09:29:05,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1935 states and 2094 transitions.
[2020-11-25 09:29:05,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1935 to 1886.
[2020-11-25 09:29:05,873 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1886 states.
[2020-11-25 09:29:05,874 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1886 states to 1886 states and 2030 transitions.
[2020-11-25 09:29:05,874 INFO  L751         BuchiCegarLoop]: Abstraction has 1886 states and 2030 transitions.
[2020-11-25 09:29:05,874 INFO  L631         BuchiCegarLoop]: Abstraction has 1886 states and 2030 transitions.
[2020-11-25 09:29:05,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:29:05,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1886 states and 2030 transitions.
[2020-11-25 09:29:05,877 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:05,877 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:05,877 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:05,878 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:05,878 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:05,881 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:05,881 INFO  L82        PathProgramCache]: Analyzing trace with hash -2077323650, now seen corresponding path program 1 times
[2020-11-25 09:29:05,881 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:05,889 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:06,050 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 09:29:06,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:06,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:29:06,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:06,051 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:29:06,051 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:29:06,051 INFO  L87              Difference]: Start difference. First operand 1886 states and 2030 transitions. cyclomatic complexity: 148 Second operand 17 states.
[2020-11-25 09:29:07,574 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:07,574 INFO  L93              Difference]: Finished difference Result 1971 states and 2176 transitions.
[2020-11-25 09:29:07,574 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 09:29:07,574 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1971 states and 2176 transitions.
[2020-11-25 09:29:07,580 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 09:29:07,586 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1971 states to 1971 states and 2176 transitions.
[2020-11-25 09:29:07,586 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 702
[2020-11-25 09:29:07,586 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 702
[2020-11-25 09:29:07,586 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1971 states and 2176 transitions.
[2020-11-25 09:29:07,588 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:07,588 INFO  L728         BuchiCegarLoop]: Abstraction has 1971 states and 2176 transitions.
[2020-11-25 09:29:07,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1971 states and 2176 transitions.
[2020-11-25 09:29:07,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1971 to 1912.
[2020-11-25 09:29:07,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1912 states.
[2020-11-25 09:29:07,605 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1912 states to 1912 states and 2073 transitions.
[2020-11-25 09:29:07,605 INFO  L751         BuchiCegarLoop]: Abstraction has 1912 states and 2073 transitions.
[2020-11-25 09:29:07,605 INFO  L631         BuchiCegarLoop]: Abstraction has 1912 states and 2073 transitions.
[2020-11-25 09:29:07,605 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:29:07,605 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1912 states and 2073 transitions.
[2020-11-25 09:29:07,608 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:29:07,608 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:07,608 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:07,609 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:07,609 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND FALSE  !(!(c_s90 >= a_s90))
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND FALSE  !(revert)
[L1626]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][to_s393];
[L1627]              __tmp__balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1628]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][to_s393];
[L1629]              success_s393 := true;
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:07,611 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:07,611 INFO  L82        PathProgramCache]: Analyzing trace with hash -340723562, now seen corresponding path program 1 times
[2020-11-25 09:29:07,612 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:07,618 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:07,651 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 09:29:07,651 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:07,651 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:29:07,651 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:07,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:29:07,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:29:07,652 INFO  L87              Difference]: Start difference. First operand 1912 states and 2073 transitions. cyclomatic complexity: 167 Second operand 5 states.
[2020-11-25 09:29:07,861 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:07,861 INFO  L93              Difference]: Finished difference Result 2459 states and 2780 transitions.
[2020-11-25 09:29:07,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:29:07,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2459 states and 2780 transitions.
[2020-11-25 09:29:07,866 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:29:07,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2459 states to 1917 states and 2237 transitions.
[2020-11-25 09:29:07,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 561
[2020-11-25 09:29:07,871 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 561
[2020-11-25 09:29:07,871 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1917 states and 2237 transitions.
[2020-11-25 09:29:07,873 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:07,873 INFO  L728         BuchiCegarLoop]: Abstraction has 1917 states and 2237 transitions.
[2020-11-25 09:29:07,874 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1917 states and 2237 transitions.
[2020-11-25 09:29:07,884 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1917 to 1349.
[2020-11-25 09:29:07,884 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1349 states.
[2020-11-25 09:29:07,885 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1349 states to 1349 states and 1466 transitions.
[2020-11-25 09:29:07,885 INFO  L751         BuchiCegarLoop]: Abstraction has 1349 states and 1466 transitions.
[2020-11-25 09:29:07,885 INFO  L631         BuchiCegarLoop]: Abstraction has 1349 states and 1466 transitions.
[2020-11-25 09:29:07,885 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:29:07,885 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1349 states and 1466 transitions.
[2020-11-25 09:29:07,887 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:07,887 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:07,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:07,888 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:07,888 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:07,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:07,892 INFO  L82        PathProgramCache]: Analyzing trace with hash -1775611468, now seen corresponding path program 1 times
[2020-11-25 09:29:07,892 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:07,930 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:08,058 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:29:08,607 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 09:29:08,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:08,608 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 09:29:08,608 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:08,608 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 09:29:08,608 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=640, Unknown=0, NotChecked=0, Total=702
[2020-11-25 09:29:08,608 INFO  L87              Difference]: Start difference. First operand 1349 states and 1466 transitions. cyclomatic complexity: 121 Second operand 27 states.
[2020-11-25 09:29:11,494 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:11,494 INFO  L93              Difference]: Finished difference Result 1368 states and 1497 transitions.
[2020-11-25 09:29:11,494 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 09:29:11,494 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1368 states and 1497 transitions.
[2020-11-25 09:29:11,496 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:11,499 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1368 states to 1368 states and 1497 transitions.
[2020-11-25 09:29:11,499 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 437
[2020-11-25 09:29:11,499 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 437
[2020-11-25 09:29:11,499 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1368 states and 1497 transitions.
[2020-11-25 09:29:11,500 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:11,500 INFO  L728         BuchiCegarLoop]: Abstraction has 1368 states and 1497 transitions.
[2020-11-25 09:29:11,501 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1368 states and 1497 transitions.
[2020-11-25 09:29:11,508 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1368 to 1363.
[2020-11-25 09:29:11,508 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1363 states.
[2020-11-25 09:29:11,509 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1363 states to 1363 states and 1491 transitions.
[2020-11-25 09:29:11,509 INFO  L751         BuchiCegarLoop]: Abstraction has 1363 states and 1491 transitions.
[2020-11-25 09:29:11,509 INFO  L631         BuchiCegarLoop]: Abstraction has 1363 states and 1491 transitions.
[2020-11-25 09:29:11,509 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:29:11,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1363 states and 1491 transitions.
[2020-11-25 09:29:11,511 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:11,511 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:11,511 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:11,512 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:11,512 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:11,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:11,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -236771058, now seen corresponding path program 1 times
[2020-11-25 09:29:11,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:11,525 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:11,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 09:29:11,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:11,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 09:29:11,657 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:11,657 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 09:29:11,658 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=339, Unknown=0, NotChecked=0, Total=380
[2020-11-25 09:29:11,658 INFO  L87              Difference]: Start difference. First operand 1363 states and 1491 transitions. cyclomatic complexity: 134 Second operand 20 states.
[2020-11-25 09:29:12,948 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:12,949 INFO  L93              Difference]: Finished difference Result 1407 states and 1564 transitions.
[2020-11-25 09:29:12,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 09:29:12,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1407 states and 1564 transitions.
[2020-11-25 09:29:12,951 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:12,954 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1407 states to 1407 states and 1564 transitions.
[2020-11-25 09:29:12,955 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 453
[2020-11-25 09:29:12,955 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 453
[2020-11-25 09:29:12,955 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1407 states and 1564 transitions.
[2020-11-25 09:29:12,956 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:12,956 INFO  L728         BuchiCegarLoop]: Abstraction has 1407 states and 1564 transitions.
[2020-11-25 09:29:12,957 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1407 states and 1564 transitions.
[2020-11-25 09:29:12,964 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1407 to 1353.
[2020-11-25 09:29:12,964 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1353 states.
[2020-11-25 09:29:12,965 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1353 states to 1353 states and 1476 transitions.
[2020-11-25 09:29:12,965 INFO  L751         BuchiCegarLoop]: Abstraction has 1353 states and 1476 transitions.
[2020-11-25 09:29:12,965 INFO  L631         BuchiCegarLoop]: Abstraction has 1353 states and 1476 transitions.
[2020-11-25 09:29:12,965 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:29:12,965 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1353 states and 1476 transitions.
[2020-11-25 09:29:12,967 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:12,967 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:12,967 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:12,967 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:12,967 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:12,970 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:12,970 INFO  L82        PathProgramCache]: Analyzing trace with hash 1954041443, now seen corresponding path program 1 times
[2020-11-25 09:29:12,971 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:13,024 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:13,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 09:29:13,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:13,455 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-11-25 09:29:13,455 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:13,455 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 09:29:13,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=489, Unknown=0, NotChecked=0, Total=552
[2020-11-25 09:29:13,456 INFO  L87              Difference]: Start difference. First operand 1353 states and 1476 transitions. cyclomatic complexity: 128 Second operand 24 states.
[2020-11-25 09:29:16,368 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:16,368 INFO  L93              Difference]: Finished difference Result 1410 states and 1537 transitions.
[2020-11-25 09:29:16,368 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 09:29:16,368 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1410 states and 1537 transitions.
[2020-11-25 09:29:16,371 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:16,374 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1410 states to 1410 states and 1537 transitions.
[2020-11-25 09:29:16,374 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 446
[2020-11-25 09:29:16,375 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 446
[2020-11-25 09:29:16,375 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1410 states and 1537 transitions.
[2020-11-25 09:29:16,375 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:16,376 INFO  L728         BuchiCegarLoop]: Abstraction has 1410 states and 1537 transitions.
[2020-11-25 09:29:16,376 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1410 states and 1537 transitions.
[2020-11-25 09:29:16,383 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1410 to 1343.
[2020-11-25 09:29:16,383 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1343 states.
[2020-11-25 09:29:16,384 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1343 states to 1343 states and 1462 transitions.
[2020-11-25 09:29:16,384 INFO  L751         BuchiCegarLoop]: Abstraction has 1343 states and 1462 transitions.
[2020-11-25 09:29:16,384 INFO  L631         BuchiCegarLoop]: Abstraction has 1343 states and 1462 transitions.
[2020-11-25 09:29:16,384 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:29:16,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1343 states and 1462 transitions.
[2020-11-25 09:29:16,386 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:16,386 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:16,386 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:16,387 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:16,387 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:16,390 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:16,390 INFO  L82        PathProgramCache]: Analyzing trace with hash -327927593, now seen corresponding path program 1 times
[2020-11-25 09:29:16,390 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:16,447 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:17,133 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 64
[2020-11-25 09:29:17,914 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 83
[2020-11-25 09:29:18,356 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 1 proven. 8 refuted. 0 times theorem prover too weak. 62 trivial. 0 not checked.
[2020-11-25 09:29:18,356 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:29:18,356 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 09:29:18,356 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:18,357 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 09:29:18,357 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=132, Invalid=1760, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 09:29:18,357 INFO  L87              Difference]: Start difference. First operand 1343 states and 1462 transitions. cyclomatic complexity: 124 Second operand 44 states.
[2020-11-25 09:29:21,150 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 115
[2020-11-25 09:29:21,383 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 99
[2020-11-25 09:29:21,776 WARN  L188               SmtUtils]: Spent 249.00 ms on a formula simplification. DAG size of input: 92 DAG size of output: 92
[2020-11-25 09:29:24,218 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:24,218 INFO  L93              Difference]: Finished difference Result 1380 states and 1531 transitions.
[2020-11-25 09:29:24,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 09:29:24,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1380 states and 1531 transitions.
[2020-11-25 09:29:24,221 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:29:24,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1380 states to 1380 states and 1531 transitions.
[2020-11-25 09:29:24,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 441
[2020-11-25 09:29:24,224 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 441
[2020-11-25 09:29:24,224 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1380 states and 1531 transitions.
[2020-11-25 09:29:24,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:24,225 INFO  L728         BuchiCegarLoop]: Abstraction has 1380 states and 1531 transitions.
[2020-11-25 09:29:24,226 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1380 states and 1531 transitions.
[2020-11-25 09:29:24,234 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1380 to 1365.
[2020-11-25 09:29:24,234 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1365 states.
[2020-11-25 09:29:24,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1365 states to 1365 states and 1495 transitions.
[2020-11-25 09:29:24,236 INFO  L751         BuchiCegarLoop]: Abstraction has 1365 states and 1495 transitions.
[2020-11-25 09:29:24,236 INFO  L631         BuchiCegarLoop]: Abstraction has 1365 states and 1495 transitions.
[2020-11-25 09:29:24,236 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:29:24,236 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1365 states and 1495 transitions.
[2020-11-25 09:29:24,237 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:24,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:24,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:24,238 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:24,238 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_YearnFinanceBitToken_lvl0 := alloc_allowed_YearnFinanceBitToken_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_YearnFinanceBitToken := name_YearnFinanceBitToken;
[L722]               __tmp__symbol_YearnFinanceBitToken := symbol_YearnFinanceBitToken;
[L723]               __tmp__decimals_YearnFinanceBitToken := decimals_YearnFinanceBitToken;
[L724]               __tmp___totalSupply_YearnFinanceBitToken := _totalSupply_YearnFinanceBitToken;
[L725]               __tmp__balances_YearnFinanceBitToken := balances_YearnFinanceBitToken;
[L726]               __tmp__allowed_YearnFinanceBitToken := allowed_YearnFinanceBitToken;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1605]              __tmp__balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_YearnFinanceBitToken[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == YearnFinanceBitToken
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:24,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:24,241 INFO  L82        PathProgramCache]: Analyzing trace with hash 1222089035, now seen corresponding path program 1 times
[2020-11-25 09:29:24,242 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:24,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:24,327 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 09:29:24,327 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:24,328 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 09:29:24,328 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:24,328 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 09:29:24,328 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 09:29:24,328 INFO  L87              Difference]: Start difference. First operand 1365 states and 1495 transitions. cyclomatic complexity: 137 Second operand 9 states.
[2020-11-25 09:29:24,631 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:24,631 INFO  L93              Difference]: Finished difference Result 1397 states and 1553 transitions.
[2020-11-25 09:29:24,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 09:29:24,631 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1397 states and 1553 transitions.
[2020-11-25 09:29:24,633 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:29:24,637 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1397 states to 1361 states and 1515 transitions.
[2020-11-25 09:29:24,637 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 446
[2020-11-25 09:29:24,637 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 446
[2020-11-25 09:29:24,637 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1361 states and 1515 transitions.
[2020-11-25 09:29:24,638 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:24,638 INFO  L728         BuchiCegarLoop]: Abstraction has 1361 states and 1515 transitions.
[2020-11-25 09:29:24,639 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1361 states and 1515 transitions.
[2020-11-25 09:29:24,645 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1361 to 1301.
[2020-11-25 09:29:24,646 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1301 states.
[2020-11-25 09:29:24,647 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1301 states to 1301 states and 1420 transitions.
[2020-11-25 09:29:24,647 INFO  L751         BuchiCegarLoop]: Abstraction has 1301 states and 1420 transitions.
[2020-11-25 09:29:24,647 INFO  L631         BuchiCegarLoop]: Abstraction has 1301 states and 1420 transitions.
[2020-11-25 09:29:24,647 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:29:24,647 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1301 states and 1420 transitions.
[2020-11-25 09:29:24,648 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:29:24,648 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:29:24,648 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:29:24,649 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:29:24,649 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == YearnFinanceBitToken;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_YearnFinanceBitToken[this] := 627147201;
[L1421]              symbol_YearnFinanceBitToken[this] := 627147201;
[L1422]              decimals_YearnFinanceBitToken[this] := 0;
[L1423]              _totalSupply_YearnFinanceBitToken[this] := 0;
[L1424]              balances_YearnFinanceBitToken[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_YearnFinanceBitToken[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_YearnFinanceBitToken[this] := 1658284292;
[L1430]              symbol_YearnFinanceBitToken[this] := -1175268548;
[L1431]              decimals_YearnFinanceBitToken[this] := 18;
[L1432]              _totalSupply_YearnFinanceBitToken[this] := 7000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1434]              balances_YearnFinanceBitToken[this][msgsender_MSG] := _totalSupply_YearnFinanceBitToken[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1465]  RET         call YearnFinanceBitToken_YearnFinanceBitToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call YearnFinanceBitToken_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call YearnFinanceBitToken_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1523]              allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_YearnFinanceBitToken[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_YearnFinanceBitToken" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1573]              balances_YearnFinanceBitToken[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s334];
[L1584]              balances_YearnFinanceBitToken[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s393 && p1 != to_s393) && (p2 != from_s393 || p3 != msgsender_MSG)) && from_s393 != to_s393) && tokens_s393 <= balances_YearnFinanceBitToken[this][from_s393]) && tokens_s393 <= allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) && balances_YearnFinanceBitToken[this][to_s393] + tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][to_s393] >= 0) && balances_YearnFinanceBitToken[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_YearnFinanceBitToken[this][from_s393] >= 0) && balances_YearnFinanceBitToken[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] >= 0) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := true;
[L3]                 call_transferFrom_YearnFinanceBitToken0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][from_s393];
[L1647]              balances_YearnFinanceBitToken[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][from_s393];
[L1649]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1658]              allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == YearnFinanceBitToken
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_YearnFinanceBitToken[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_YearnFinanceBitToken[this][to_s393];
[L1669]              balances_YearnFinanceBitToken[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_YearnFinanceBitToken[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_YearnFinanceBitToken" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s393 == true && balances_YearnFinanceBitToken[this][from_s393] == old(balances_YearnFinanceBitToken[this][from_s393]) - tokens_s393) && balances_YearnFinanceBitToken[this][to_s393] == old(balances_YearnFinanceBitToken[this][to_s393]) + tokens_s393) && allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG] == old(allowed_YearnFinanceBitToken[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_YearnFinanceBitToken[this] == old(_totalSupply_YearnFinanceBitToken[this])) && balances_YearnFinanceBitToken[this][p1] == old(balances_YearnFinanceBitToken[this][p1])) && allowed_YearnFinanceBitToken[this][p2][p3] == old(allowed_YearnFinanceBitToken[this][p2][p3])) && name_YearnFinanceBitToken[this] == old(name_YearnFinanceBitToken[this])) && symbol_YearnFinanceBitToken[this] == old(symbol_YearnFinanceBitToken[this])) && decimals_YearnFinanceBitToken[this] == old(decimals_YearnFinanceBitToken[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_YearnFinanceBitToken(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

Loop:
[L2864]  CALL        call CorralChoice_YearnFinanceBitToken(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != YearnFinanceBitToken;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_YearnFinanceBitToken(this);

[2020-11-25 09:29:24,652 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:29:24,652 INFO  L82        PathProgramCache]: Analyzing trace with hash -681749261, now seen corresponding path program 1 times
[2020-11-25 09:29:24,653 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:29:24,722 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:29:24,984 INFO  L134       CoverageAnalysis]: Checked inductivity of 164 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 164 trivial. 0 not checked.
[2020-11-25 09:29:24,985 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:29:24,985 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 09:29:24,985 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:29:24,985 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 09:29:24,985 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-11-25 09:29:24,985 INFO  L87              Difference]: Start difference. First operand 1301 states and 1420 transitions. cyclomatic complexity: 125 Second operand 18 states.
[2020-11-25 09:29:25,959 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:29:25,959 INFO  L93              Difference]: Finished difference Result 753 states and 824 transitions.
[2020-11-25 09:29:25,959 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 09:29:25,959 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 753 states and 824 transitions.
[2020-11-25 09:29:25,961 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:29:25,961 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 753 states to 0 states and 0 transitions.
[2020-11-25 09:29:25,961 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:29:25,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:29:25,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:29:25,961 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:29:25,961 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:29:25,961 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:29:25,961 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:29:25,961 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:29:25,961 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:29:25,961 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:29:25,961 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:29:25,964 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:29:25 BasicIcfg
[2020-11-25 09:29:25,964 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:29:25,964 INFO  L168              Benchmark]: Toolchain (without parser) took 32977.05 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 945.9 MB in the beginning and 2.5 GB in the end (delta: -1.6 GB). Peak memory consumption was 146.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,965 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,965 INFO  L168              Benchmark]: Boogie Preprocessor took 78.70 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,965 INFO  L168              Benchmark]: UtopiaSpecLang took 54.52 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,966 INFO  L168              Benchmark]: Boogie Printer took 12.58 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,966 INFO  L168              Benchmark]: RCFGBuilder took 660.48 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 843.8 MB in the end (delta: 80.6 MB). Peak memory consumption was 80.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,967 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.69 ms. Allocated memory is still 1.0 GB. Free memory was 843.8 MB in the beginning and 840.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,967 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1099.66 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 840.3 MB in the beginning and 754.4 MB in the end (delta: 85.9 MB). Peak memory consumption was 148.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,967 INFO  L168              Benchmark]: BlockEncodingV2 took 105.26 ms. Allocated memory is still 1.1 GB. Free memory was 754.4 MB in the beginning and 716.9 MB in the end (delta: 37.5 MB). Peak memory consumption was 37.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,967 INFO  L168              Benchmark]: BuchiAutomizer took 30920.28 ms. Allocated memory was 1.1 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 716.9 MB in the beginning and 2.5 GB in the end (delta: -1.8 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:29:25,970 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2494 locations, 4287 edges
  - StatisticsResult: Encoded RCFG
    2450 locations, 4169 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 78.70 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.52 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.58 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 660.48 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 843.8 MB in the end (delta: 80.6 MB). Peak memory consumption was 80.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.69 ms. Allocated memory is still 1.0 GB. Free memory was 843.8 MB in the beginning and 840.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1099.66 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 840.3 MB in the beginning and 754.4 MB in the end (delta: 85.9 MB). Peak memory consumption was 148.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 105.26 ms. Allocated memory is still 1.1 GB. Free memory was 754.4 MB in the beginning and 716.9 MB in the end (delta: 37.5 MB). Peak memory consumption was 37.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 30920.28 ms. Allocated memory was 1.1 GB in the beginning and 2.8 GB in the end (delta: 1.7 GB). Free memory was 716.9 MB in the beginning and 2.5 GB in the end (delta: -1.8 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1052 locations, 1325 edges
  - StatisticsResult: BuchiProgram size
    2494 locations, 4287 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 13 terminating modules (13 trivial, 0 deterministic, 0 nondeterministic). 13 modules have a trivial ranking function, the largest among these consists of 44 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 30.8s and 14 iterations.  TraceHistogramMax:3. Analysis of lassos took 6.3s. Construction of modules took 18.3s. BÃ¼chi inclusion checks took 5.5s. Highest rank in rank-based complementation 0. Minimization of det autom 13. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 12 MinimizatonAttempts, 1778 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1912 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 20127 SDtfs, 26606 SDslu, 75582 SDs, 0 SdLazy, 117553 SolverSat, 4387 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_YearnFinance(success_transferFrom_YearnFinanceBitToken0)itToken0) ==> ( <>(success_transferFrom_YearnFinanceBitToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
