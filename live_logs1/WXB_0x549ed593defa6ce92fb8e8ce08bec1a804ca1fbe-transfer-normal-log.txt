This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:50:07,308 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:50:07,309 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:50:07,319 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:50:07,320 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:50:07,320 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:50:07,321 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:50:07,323 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:50:07,324 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:50:07,324 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:50:07,325 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:50:07,325 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:50:07,326 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:50:07,327 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:50:07,328 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:50:07,328 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:50:07,329 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:50:07,330 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:50:07,331 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:50:07,332 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:50:07,333 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:50:07,334 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:50:07,335 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:50:07,335 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:50:07,336 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:50:07,336 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:50:07,336 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:50:07,337 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:50:07,337 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:50:07,337 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:50:07,338 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:50:07,338 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:50:07,339 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:50:07,339 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:50:07,340 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:50:07,340 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:50:07,340 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:50:07,341 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:50:07,341 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:50:07,341 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:50:07,342 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:50:07,342 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:50:07,349 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:50:07,350 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:50:07,350 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:50:07,350 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:50:07,351 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:50:07,351 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:50:07,351 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:50:07,351 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:50:07,352 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:50:07,353 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:50:07,353 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:50:07,353 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:50:07,374 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:50:07,387 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:50:07,389 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:50:07,390 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:50:07,390 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:50:07,391 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl
[2020-11-25 08:50:07,391 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl'
[2020-11-25 08:50:07,446 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:50:07,447 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:50:07,448 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:50:07,448 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:50:07,448 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:50:07,464 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,465 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,485 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,486 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,497 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,503 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,506 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,511 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:50:07,511 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:50:07,511 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:50:07,513 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:50:07,515 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/1) ...
[2020-11-25 08:50:07,526 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(WXB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= holders_WXB[this][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][msg.sender] >= 0 &&  holders_WXB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transfer(to, value), return == true && holders_WXB[this][msg.sender] == old(holders_WXB[this][msg.sender]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && approach_WXB[this] == old(approach_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:07,531 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(WXB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= holders_WXB[this][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][msg.sender] >= 0 &&  holders_WXB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transfer(to, value), return == true && holders_WXB[this][msg.sender] == old(holders_WXB[this][msg.sender]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && approach_WXB[this] == old(approach_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:07,538 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(WXB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= holders_WXB[this][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][msg.sender] >= 0 &&  holders_WXB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transfer(to, value), return == true && holders_WXB[this][msg.sender] == old(holders_WXB[this][msg.sender]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && approach_WXB[this] == old(approach_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:07,544 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=_to_s213 ) && msg.sender!=_to_s213 ) && _val_s213<=holders_WXB[this][msg.sender] ) && ( holders_WXB[this][_to_s213] + _val_s213 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _val_s213>=0 ) && _val_s213<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_WXB[this][_to_s213]>=0 ) && holders_WXB[this][_to_s213]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_WXB[this][msg.sender]>=0 ) && holders_WXB[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>],IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],IdentifierExpression[_val_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_val_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_val_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:50:07,545 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && holders_WXB[this][msg.sender]==( ( old(holders_WXB[this][msg.sender]) ) - _val_s213 ) ) && holders_WXB[this][_to_s213]==( ( old(holders_WXB[this][_to_s213]) ) + _val_s213 ) ) && totalSupply_WXB[this]==( old(totalSupply_WXB[this]) ) ) && approach_WXB[this]==( old(approach_WXB[this]) ) ) && holders_WXB[this][p1]==( old(holders_WXB[this][p1]) ) ) && decimals_WXB[this]==( old(decimals_WXB[this]) ) ) && symbol_WXB[this]==( old(symbol_WXB[this]) ) ) && name_WXB[this]==( old(name_WXB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_WXB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]],IdentifierExpression[_val_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[_to_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]],IdentifierExpression[_val_s213,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_WXB>]]]]]]
[2020-11-25 08:50:07,548 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(WXB.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= holders_WXB[this][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][msg.sender] >= 0 &&  holders_WXB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transfer(to, value), return == true && holders_WXB[this][msg.sender] == old(holders_WXB[this][msg.sender]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && approach_WXB[this] == old(approach_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:07,548 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_WXB0) ==> ( <>AP(success_transfer_WXB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:50:07,551 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:07 PropertyContainer
[2020-11-25 08:50:07,552 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:50:07,552 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:50:07,552 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:50:07,552 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:50:07,553 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/2) ...
[2020-11-25 08:50:07,553 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:50:07,553 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:50:07,559 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:07" (2/2) ...
[2020-11-25 08:50:07,559 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:50:07,560 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:50:07,560 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:50:07,560 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:50:07,561 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/2) ...
[2020-11-25 08:50:07,600 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:50:07,600 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:50:07,600 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:50:07,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB_NoBaseCtor__success
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB
[2020-11-25 08:50:07,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_WXB__success
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB
[2020-11-25 08:50:07,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB
[2020-11-25 08:50:07,601 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB
[2020-11-25 08:50:07,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB
[2020-11-25 08:50:07,602 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_WXB
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB_NoBaseCtor__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_WXB__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB__success
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB__fail
[2020-11-25 08:50:07,603 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB__success
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:50:07,604 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:50:07,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:50:07,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:50:07,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:50:07,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:50:07,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB_NoBaseCtor__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB_NoBaseCtor__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB__fail
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB__success
[2020-11-25 08:50:07,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_WXB
[2020-11-25 08:50:07,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:50:07,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:50:07,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:50:07,707 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:07,796 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:07,796 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:07,797 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:07,979 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:50:07,979 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 08:50:07,981 INFO  L202        PluginConnector]: Adding new model WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:07 BoogieIcfgContainer
[2020-11-25 08:50:07,981 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:07" (2/2) ...
[2020-11-25 08:50:07,981 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:50:07,981 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7f1402e4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:07, skipping insertion in model container
[2020-11-25 08:50:07,981 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:50:07,982 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:50:07,982 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:50:07,983 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:50:07,983 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/3) ...
[2020-11-25 08:50:07,984 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@679739e5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:07, skipping insertion in model container
[2020-11-25 08:50:07,984 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:07" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:50:08,017 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:08 NWAContainer
[2020-11-25 08:50:08,018 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:50:08,018 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:50:08,018 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:50:08,019 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:50:08,019 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:07" (3/4) ...
[2020-11-25 08:50:08,020 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3eee51ff and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:08, skipping insertion in model container
[2020-11-25 08:50:08,020 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:08" (4/4) ...
[2020-11-25 08:50:08,023 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:50:08,025 INFO  L110   BuchiProductObserver]: Initial RCFG 658 locations, 786 edges
[2020-11-25 08:50:08,026 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:50:08,035 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:50:08,918 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:50:08,920 INFO  L110   BuchiProductObserver]: BuchiProgram size 1524 locations, 2543 edges
[2020-11-25 08:50:08,920 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:08 BoogieIcfgContainer
[2020-11-25 08:50:08,920 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:50:08,921 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:50:08,921 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:50:08,922 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:50:08,923 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:08" (1/1) ...
[2020-11-25 08:50:08,966 INFO  L313           BlockEncoder]: Initial Icfg 1524 locations, 2543 edges
[2020-11-25 08:50:08,966 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:50:08,967 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:50:08,967 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:50:08,968 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:50:08,975 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 08:50:08,979 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 08:50:08,985 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:50:08,987 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:50:08,988 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:50:08,989 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:50:08,992 INFO  L313           BlockEncoder]: Encoded RCFG 1506 locations, 2500 edges
[2020-11-25 08:50:08,992 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:50:08 BasicIcfg
[2020-11-25 08:50:08,992 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:50:08,992 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:50:08,992 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:50:08,995 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:50:08,995 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:08,995 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:07" (1/6) ...
[2020-11-25 08:50:08,997 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5db5aeb7 and model type WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:50:08, skipping insertion in model container
[2020-11-25 08:50:08,997 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:08,997 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:07" (2/6) ...
[2020-11-25 08:50:08,997 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5db5aeb7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:50:08, skipping insertion in model container
[2020-11-25 08:50:08,997 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:08,998 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:07" (3/6) ...
[2020-11-25 08:50:08,998 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5db5aeb7 and model type WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:50:08, skipping insertion in model container
[2020-11-25 08:50:08,998 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:08,998 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:08" (4/6) ...
[2020-11-25 08:50:08,998 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5db5aeb7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:50:08, skipping insertion in model container
[2020-11-25 08:50:08,998 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:08,998 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:08" (5/6) ...
[2020-11-25 08:50:08,998 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5db5aeb7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:50:08, skipping insertion in model container
[2020-11-25 08:50:08,999 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:08,999 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:50:08" (6/6) ...
[2020-11-25 08:50:09,000 INFO  L404   chiAutomizerObserver]: Analyzing ICFG WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transfer-normal.bpl_BEv2
[2020-11-25 08:50:09,038 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:50:09,039 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:50:09,039 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:50:09,039 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:50:09,039 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:50:09,039 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:50:09,039 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:50:09,039 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:50:09,039 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:50:09,059 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1506 states.
[2020-11-25 08:50:09,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:09,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:09,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:09,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:09,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:09,108 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:50:09,108 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1506 states.
[2020-11-25 08:50:09,119 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:09,119 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:09,119 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:09,121 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:09,121 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:09,138 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:09,138 INFO  L82        PathProgramCache]: Analyzing trace with hash -2053640532, now seen corresponding path program 1 times
[2020-11-25 08:50:09,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:09,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:09,207 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:09,209 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:09,209 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:50:09,213 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:09,317 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:50:09,317 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:50:09,319 INFO  L87              Difference]: Start difference. First operand 1506 states. Second operand 3 states.
[2020-11-25 08:50:09,443 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:09,443 INFO  L93              Difference]: Finished difference Result 1146 states and 1243 transitions.
[2020-11-25 08:50:09,443 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:50:09,445 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1146 states and 1243 transitions.
[2020-11-25 08:50:09,452 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:09,464 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1146 states to 1136 states and 1223 transitions.
[2020-11-25 08:50:09,465 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:50:09,467 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 501
[2020-11-25 08:50:09,467 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1136 states and 1223 transitions.
[2020-11-25 08:50:09,472 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:09,472 INFO  L728         BuchiCegarLoop]: Abstraction has 1136 states and 1223 transitions.
[2020-11-25 08:50:09,488 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1136 states and 1223 transitions.
[2020-11-25 08:50:09,516 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1136 to 1136.
[2020-11-25 08:50:09,517 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1136 states.
[2020-11-25 08:50:09,520 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1136 states to 1136 states and 1223 transitions.
[2020-11-25 08:50:09,521 INFO  L751         BuchiCegarLoop]: Abstraction has 1136 states and 1223 transitions.
[2020-11-25 08:50:09,521 INFO  L631         BuchiCegarLoop]: Abstraction has 1136 states and 1223 transitions.
[2020-11-25 08:50:09,521 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:50:09,521 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1136 states and 1223 transitions.
[2020-11-25 08:50:09,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:09,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:09,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:09,528 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:09,528 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND TRUE   !(holders_WXB[this][msgsender_MSG] >= _val_s213)
[L1043]              revert := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && holders_WXB[this][msgsender_MSG] == old(holders_WXB[this][msgsender_MSG]) - _val_s213) && holders_WXB[this][_to_s213] == old(holders_WXB[this][_to_s213]) + _val_s213) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && approach_WXB[this] == old(approach_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND TRUE   !(holders_WXB[this][msgsender_MSG] >= _val_s213)
[L1043]              revert := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && holders_WXB[this][msgsender_MSG] == old(holders_WXB[this][msgsender_MSG]) - _val_s213) && holders_WXB[this][_to_s213] == old(holders_WXB[this][_to_s213]) + _val_s213) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && approach_WXB[this] == old(approach_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:09,533 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:09,533 INFO  L82        PathProgramCache]: Analyzing trace with hash 1587294217, now seen corresponding path program 1 times
[2020-11-25 08:50:09,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:09,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:09,566 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:09,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:09,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:50:09,567 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:09,568 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:50:09,568 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:50:09,568 INFO  L87              Difference]: Start difference. First operand 1136 states and 1223 transitions. cyclomatic complexity: 89 Second operand 4 states.
[2020-11-25 08:50:09,748 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:09,748 INFO  L93              Difference]: Finished difference Result 1656 states and 1883 transitions.
[2020-11-25 08:50:09,748 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:50:09,749 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1656 states and 1883 transitions.
[2020-11-25 08:50:09,759 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:50:09,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1656 states to 1622 states and 1845 transitions.
[2020-11-25 08:50:09,770 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 744
[2020-11-25 08:50:09,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 744
[2020-11-25 08:50:09,771 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1622 states and 1845 transitions.
[2020-11-25 08:50:09,775 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:09,775 INFO  L728         BuchiCegarLoop]: Abstraction has 1622 states and 1845 transitions.
[2020-11-25 08:50:09,776 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1622 states and 1845 transitions.
[2020-11-25 08:50:09,794 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1622 to 1126.
[2020-11-25 08:50:09,794 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1126 states.
[2020-11-25 08:50:09,796 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1126 states to 1126 states and 1197 transitions.
[2020-11-25 08:50:09,796 INFO  L751         BuchiCegarLoop]: Abstraction has 1126 states and 1197 transitions.
[2020-11-25 08:50:09,796 INFO  L631         BuchiCegarLoop]: Abstraction has 1126 states and 1197 transitions.
[2020-11-25 08:50:09,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:50:09,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1126 states and 1197 transitions.
[2020-11-25 08:50:09,800 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:09,800 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:09,800 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:09,802 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:09,802 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_WXB[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L1052]              holders_WXB[this][msgsender_MSG] := (holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s213];
[L1055]              holders_WXB[this][_to_s213] := (holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s213];
[L1057]              assert holders_WXB[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_WXB" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && holders_WXB[this][msgsender_MSG] == old(holders_WXB[this][msgsender_MSG]) - _val_s213) && holders_WXB[this][_to_s213] == old(holders_WXB[this][_to_s213]) + _val_s213) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && approach_WXB[this] == old(approach_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_WXB[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L1052]              holders_WXB[this][msgsender_MSG] := (holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s213];
[L1055]              holders_WXB[this][_to_s213] := (holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s213];
[L1057]              assert holders_WXB[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_WXB" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && holders_WXB[this][msgsender_MSG] == old(holders_WXB[this][msgsender_MSG]) - _val_s213) && holders_WXB[this][_to_s213] == old(holders_WXB[this][_to_s213]) + _val_s213) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && approach_WXB[this] == old(approach_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:09,806 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:09,806 INFO  L82        PathProgramCache]: Analyzing trace with hash -2015147819, now seen corresponding path program 1 times
[2020-11-25 08:50:09,807 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:09,874 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:10,889 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:10,889 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:10,889 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 08:50:10,890 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:10,890 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 08:50:10,890 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=51, Invalid=329, Unknown=0, NotChecked=0, Total=380
[2020-11-25 08:50:10,891 INFO  L87              Difference]: Start difference. First operand 1126 states and 1197 transitions. cyclomatic complexity: 73 Second operand 20 states.
[2020-11-25 08:50:13,562 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:13,563 INFO  L93              Difference]: Finished difference Result 1243 states and 1344 transitions.
[2020-11-25 08:50:13,563 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 08:50:13,563 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1243 states and 1344 transitions.
[2020-11-25 08:50:13,569 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:50:13,574 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1243 states to 1243 states and 1344 transitions.
[2020-11-25 08:50:13,574 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 550
[2020-11-25 08:50:13,575 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 550
[2020-11-25 08:50:13,575 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1243 states and 1344 transitions.
[2020-11-25 08:50:13,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:13,577 INFO  L728         BuchiCegarLoop]: Abstraction has 1243 states and 1344 transitions.
[2020-11-25 08:50:13,578 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1243 states and 1344 transitions.
[2020-11-25 08:50:13,606 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1243 to 1204.
[2020-11-25 08:50:13,606 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1204 states.
[2020-11-25 08:50:13,608 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1204 states to 1204 states and 1288 transitions.
[2020-11-25 08:50:13,609 INFO  L751         BuchiCegarLoop]: Abstraction has 1204 states and 1288 transitions.
[2020-11-25 08:50:13,609 INFO  L631         BuchiCegarLoop]: Abstraction has 1204 states and 1288 transitions.
[2020-11-25 08:50:13,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:50:13,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1204 states and 1288 transitions.
[2020-11-25 08:50:13,611 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:13,611 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:13,611 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:13,612 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:13,612 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND TRUE   __exception
[L251]               __tmp__Balance := Balance;
[L252]               __tmp__DType := DType;
[L253]               __tmp__Alloc := Alloc;
[L254]               __tmp__balance_ADDR := balance_ADDR;
[L255]               __tmp__M_Ref_int := M_Ref_int;
[L256]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L257]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L258]               __tmp__sum_approach0 := sum_approach0;
[L259]               __tmp__sum_holders1 := sum_holders1;
[L260]               __tmp__Length := Length;
[L261]               __tmp__now := now;
[L262]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L263]               __tmp__decimals_WXB := decimals_WXB;
[L264]               __tmp__symbol_WXB := symbol_WXB;
[L265]               __tmp__name_WXB := name_WXB;
[L266]               __tmp__approach_WXB := approach_WXB;
[L267]               __tmp__holders_WXB := holders_WXB;
[L268]   CALL        call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1022]  COND TRUE   !(__tmp__holders_WXB[this][msgsender_MSG] >= _val_s213)
[L1023]              revert := true;
[L268]   RET         call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L269]               assume revert || gas < 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND TRUE   __exception
[L251]               __tmp__Balance := Balance;
[L252]               __tmp__DType := DType;
[L253]               __tmp__Alloc := Alloc;
[L254]               __tmp__balance_ADDR := balance_ADDR;
[L255]               __tmp__M_Ref_int := M_Ref_int;
[L256]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L257]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L258]               __tmp__sum_approach0 := sum_approach0;
[L259]               __tmp__sum_holders1 := sum_holders1;
[L260]               __tmp__Length := Length;
[L261]               __tmp__now := now;
[L262]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L263]               __tmp__decimals_WXB := decimals_WXB;
[L264]               __tmp__symbol_WXB := symbol_WXB;
[L265]               __tmp__name_WXB := name_WXB;
[L266]               __tmp__approach_WXB := approach_WXB;
[L267]               __tmp__holders_WXB := holders_WXB;
[L268]   CALL        call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1022]  COND TRUE   !(__tmp__holders_WXB[this][msgsender_MSG] >= _val_s213)
[L1023]              revert := true;
[L268]   RET         call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L269]               assume revert || gas < 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:13,617 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:13,617 INFO  L82        PathProgramCache]: Analyzing trace with hash 466855448, now seen corresponding path program 1 times
[2020-11-25 08:50:13,618 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:13,624 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:13,644 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:13,644 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:13,644 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:50:13,644 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:13,645 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:50:13,645 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:50:13,645 INFO  L87              Difference]: Start difference. First operand 1204 states and 1288 transitions. cyclomatic complexity: 88 Second operand 6 states.
[2020-11-25 08:50:13,786 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:13,786 INFO  L93              Difference]: Finished difference Result 1298 states and 1402 transitions.
[2020-11-25 08:50:13,787 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:50:13,787 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1298 states and 1402 transitions.
[2020-11-25 08:50:13,792 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:50:13,796 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1298 states to 1298 states and 1402 transitions.
[2020-11-25 08:50:13,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 579
[2020-11-25 08:50:13,797 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 579
[2020-11-25 08:50:13,797 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1298 states and 1402 transitions.
[2020-11-25 08:50:13,798 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:13,798 INFO  L728         BuchiCegarLoop]: Abstraction has 1298 states and 1402 transitions.
[2020-11-25 08:50:13,799 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1298 states and 1402 transitions.
[2020-11-25 08:50:13,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1298 to 1249.
[2020-11-25 08:50:13,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1249 states.
[2020-11-25 08:50:13,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1249 states to 1249 states and 1335 transitions.
[2020-11-25 08:50:13,813 INFO  L751         BuchiCegarLoop]: Abstraction has 1249 states and 1335 transitions.
[2020-11-25 08:50:13,813 INFO  L631         BuchiCegarLoop]: Abstraction has 1249 states and 1335 transitions.
[2020-11-25 08:50:13,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:50:13,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1249 states and 1335 transitions.
[2020-11-25 08:50:13,815 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:13,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:13,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:13,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:13,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND TRUE   __exception
[L251]               __tmp__Balance := Balance;
[L252]               __tmp__DType := DType;
[L253]               __tmp__Alloc := Alloc;
[L254]               __tmp__balance_ADDR := balance_ADDR;
[L255]               __tmp__M_Ref_int := M_Ref_int;
[L256]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L257]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L258]               __tmp__sum_approach0 := sum_approach0;
[L259]               __tmp__sum_holders1 := sum_holders1;
[L260]               __tmp__Length := Length;
[L261]               __tmp__now := now;
[L262]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L263]               __tmp__decimals_WXB := decimals_WXB;
[L264]               __tmp__symbol_WXB := symbol_WXB;
[L265]               __tmp__name_WXB := name_WXB;
[L266]               __tmp__approach_WXB := approach_WXB;
[L267]               __tmp__holders_WXB := holders_WXB;
[L268]   CALL        call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1022]  COND FALSE  !(!(__tmp__holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1026]  COND TRUE   !(msgsender_MSG != _to_s213)
[L1027]              revert := true;
[L268]   RET         call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L269]               assume revert || gas < 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:13,818 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:13,818 INFO  L82        PathProgramCache]: Analyzing trace with hash -1014918547, now seen corresponding path program 1 times
[2020-11-25 08:50:13,819 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:13,826 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:13,844 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:13,844 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:13,844 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:50:13,845 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:13,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:50:13,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:50:13,845 INFO  L87              Difference]: Start difference. First operand 1249 states and 1335 transitions. cyclomatic complexity: 90 Second operand 4 states.
[2020-11-25 08:50:13,864 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:13,864 INFO  L93              Difference]: Finished difference Result 1262 states and 1348 transitions.
[2020-11-25 08:50:13,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:50:13,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1262 states and 1348 transitions.
[2020-11-25 08:50:13,868 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:13,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1262 states to 1262 states and 1348 transitions.
[2020-11-25 08:50:13,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 571
[2020-11-25 08:50:13,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 571
[2020-11-25 08:50:13,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1262 states and 1348 transitions.
[2020-11-25 08:50:13,873 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:13,873 INFO  L728         BuchiCegarLoop]: Abstraction has 1262 states and 1348 transitions.
[2020-11-25 08:50:13,874 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1262 states and 1348 transitions.
[2020-11-25 08:50:13,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1262 to 1249.
[2020-11-25 08:50:13,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1249 states.
[2020-11-25 08:50:13,885 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1249 states to 1249 states and 1335 transitions.
[2020-11-25 08:50:13,885 INFO  L751         BuchiCegarLoop]: Abstraction has 1249 states and 1335 transitions.
[2020-11-25 08:50:13,885 INFO  L631         BuchiCegarLoop]: Abstraction has 1249 states and 1335 transitions.
[2020-11-25 08:50:13,885 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:50:13,885 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1249 states and 1335 transitions.
[2020-11-25 08:50:13,887 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:13,887 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:13,888 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:13,889 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:13,889 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND TRUE   __exception
[L251]               __tmp__Balance := Balance;
[L252]               __tmp__DType := DType;
[L253]               __tmp__Alloc := Alloc;
[L254]               __tmp__balance_ADDR := balance_ADDR;
[L255]               __tmp__M_Ref_int := M_Ref_int;
[L256]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L257]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L258]               __tmp__sum_approach0 := sum_approach0;
[L259]               __tmp__sum_holders1 := sum_holders1;
[L260]               __tmp__Length := Length;
[L261]               __tmp__now := now;
[L262]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L263]               __tmp__decimals_WXB := decimals_WXB;
[L264]               __tmp__symbol_WXB := symbol_WXB;
[L265]               __tmp__name_WXB := name_WXB;
[L266]               __tmp__approach_WXB := approach_WXB;
[L267]               __tmp__holders_WXB := holders_WXB;
[L268]   CALL        call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1022]  COND FALSE  !(!(__tmp__holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1026]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1030]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][msgsender_MSG];
[L1031]              __tmp__holders_WXB[this][msgsender_MSG] := (__tmp__holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][msgsender_MSG];
[L1033]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_to_s213];
[L1034]              __tmp__holders_WXB[this][_to_s213] := (__tmp__holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1035]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_to_s213];
[L1036]              __ret_0_ := true;
[L268]   RET         call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L269]               assume revert || gas < 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND TRUE   __exception
[L251]               __tmp__Balance := Balance;
[L252]               __tmp__DType := DType;
[L253]               __tmp__Alloc := Alloc;
[L254]               __tmp__balance_ADDR := balance_ADDR;
[L255]               __tmp__M_Ref_int := M_Ref_int;
[L256]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L257]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L258]               __tmp__sum_approach0 := sum_approach0;
[L259]               __tmp__sum_holders1 := sum_holders1;
[L260]               __tmp__Length := Length;
[L261]               __tmp__now := now;
[L262]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L263]               __tmp__decimals_WXB := decimals_WXB;
[L264]               __tmp__symbol_WXB := symbol_WXB;
[L265]               __tmp__name_WXB := name_WXB;
[L266]               __tmp__approach_WXB := approach_WXB;
[L267]               __tmp__holders_WXB := holders_WXB;
[L268]   CALL        call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1022]  COND FALSE  !(!(__tmp__holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1026]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1030]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][msgsender_MSG];
[L1031]              __tmp__holders_WXB[this][msgsender_MSG] := (__tmp__holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1032]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][msgsender_MSG];
[L1033]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_to_s213];
[L1034]              __tmp__holders_WXB[this][_to_s213] := (__tmp__holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1035]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_to_s213];
[L1036]              __ret_0_ := true;
[L268]   RET         call __ret_0_ := transfer~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L269]               assume revert || gas < 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:13,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:13,892 INFO  L82        PathProgramCache]: Analyzing trace with hash -1502869117, now seen corresponding path program 1 times
[2020-11-25 08:50:13,892 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:13,898 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:13,918 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:13,918 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:13,918 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:50:13,919 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:13,919 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:50:13,919 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:50:13,919 INFO  L87              Difference]: Start difference. First operand 1249 states and 1335 transitions. cyclomatic complexity: 90 Second operand 6 states.
[2020-11-25 08:50:14,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:14,064 INFO  L93              Difference]: Finished difference Result 1602 states and 1784 transitions.
[2020-11-25 08:50:14,064 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:50:14,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1602 states and 1784 transitions.
[2020-11-25 08:50:14,069 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:50:14,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1602 states to 1145 states and 1324 transitions.
[2020-11-25 08:50:14,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 532
[2020-11-25 08:50:14,073 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 532
[2020-11-25 08:50:14,073 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1145 states and 1324 transitions.
[2020-11-25 08:50:14,074 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:14,074 INFO  L728         BuchiCegarLoop]: Abstraction has 1145 states and 1324 transitions.
[2020-11-25 08:50:14,075 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1145 states and 1324 transitions.
[2020-11-25 08:50:14,082 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1145 to 777.
[2020-11-25 08:50:14,082 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 777 states.
[2020-11-25 08:50:14,083 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 777 states to 777 states and 834 transitions.
[2020-11-25 08:50:14,083 INFO  L751         BuchiCegarLoop]: Abstraction has 777 states and 834 transitions.
[2020-11-25 08:50:14,083 INFO  L631         BuchiCegarLoop]: Abstraction has 777 states and 834 transitions.
[2020-11-25 08:50:14,083 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:50:14,083 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 777 states and 834 transitions.
[2020-11-25 08:50:14,084 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:14,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:14,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:14,085 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:14,085 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_WXB0 := false;
[L3]                 call_transfer_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != _to_s213) && msgsender_MSG != _to_s213) && _val_s213 <= holders_WXB[this][msgsender_MSG]) && holders_WXB[this][_to_s213] + _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s213 >= 0) && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s213] >= 0) && holders_WXB[this][_to_s213] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][msgsender_MSG] >= 0) && holders_WXB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_WXB0 := true;
[L3]                 call_transfer_WXB0 := false;
[L3]                 revert := revert_hold;
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_WXB[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L1052]              holders_WXB[this][msgsender_MSG] := (holders_WXB[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s213];
[L1055]              holders_WXB[this][_to_s213] := (holders_WXB[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s213];
[L1057]              assert holders_WXB[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_WXB" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && holders_WXB[this][msgsender_MSG] == old(holders_WXB[this][msgsender_MSG]) - _val_s213) && holders_WXB[this][_to_s213] == old(holders_WXB[this][_to_s213]) + _val_s213) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && approach_WXB[this] == old(approach_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:14,088 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:14,088 INFO  L82        PathProgramCache]: Analyzing trace with hash 2039101470, now seen corresponding path program 1 times
[2020-11-25 08:50:14,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:14,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:14,236 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 08:50:14,237 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:14,237 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 08:50:14,237 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:14,237 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:50:14,237 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=106, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:50:14,237 INFO  L87              Difference]: Start difference. First operand 777 states and 834 transitions. cyclomatic complexity: 60 Second operand 12 states.
[2020-11-25 08:50:14,503 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:14,503 INFO  L93              Difference]: Finished difference Result 456 states and 485 transitions.
[2020-11-25 08:50:14,503 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 08:50:14,503 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 456 states and 485 transitions.
[2020-11-25 08:50:14,504 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:50:14,504 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 456 states to 0 states and 0 transitions.
[2020-11-25 08:50:14,504 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:50:14,504 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:50:14,505 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:50:14,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:14,505 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:50:14,505 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:50:14,505 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:50:14,505 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:50:14,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:50:14,505 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:50:14,505 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:50:14,508 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:50:14 BasicIcfg
[2020-11-25 08:50:14,508 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:50:14,508 INFO  L168              Benchmark]: Toolchain (without parser) took 7061.32 ms. Allocated memory was 1.0 GB in the beginning and 1.7 GB in the end (delta: 634.9 MB). Free memory was 940.6 MB in the beginning and 1.6 GB in the end (delta: -609.7 MB). Peak memory consumption was 25.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,509 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,509 INFO  L168              Benchmark]: Boogie Preprocessor took 63.35 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,509 INFO  L168              Benchmark]: UtopiaSpecLang took 40.43 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,509 INFO  L168              Benchmark]: Boogie Printer took 7.80 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,510 INFO  L168              Benchmark]: RCFGBuilder took 421.62 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,510 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.13 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 872.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,510 INFO  L168              Benchmark]: BÃ¼chi Program Product took 902.70 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.0 MB). Free memory was 872.6 MB in the beginning and 946.6 MB in the end (delta: -74.1 MB). Peak memory consumption was 155.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,510 INFO  L168              Benchmark]: BlockEncodingV2 took 71.27 ms. Allocated memory is still 1.1 GB. Free memory was 946.6 MB in the beginning and 911.9 MB in the end (delta: 34.7 MB). Peak memory consumption was 34.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,511 INFO  L168              Benchmark]: BuchiAutomizer took 5515.35 ms. Allocated memory was 1.1 GB in the beginning and 1.7 GB in the end (delta: 580.9 MB). Free memory was 911.9 MB in the beginning and 1.6 GB in the end (delta: -638.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:50:14,513 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1524 locations, 2543 edges
  - StatisticsResult: Encoded RCFG
    1506 locations, 2500 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 63.35 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 40.43 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 7.80 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 421.62 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.13 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 872.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 902.70 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.0 MB). Free memory was 872.6 MB in the beginning and 946.6 MB in the end (delta: -74.1 MB). Peak memory consumption was 155.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 71.27 ms. Allocated memory is still 1.1 GB. Free memory was 946.6 MB in the beginning and 911.9 MB in the end (delta: 34.7 MB). Peak memory consumption was 34.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5515.35 ms. Allocated memory was 1.1 GB in the beginning and 1.7 GB in the end (delta: 580.9 MB). Free memory was 911.9 MB in the beginning and 1.6 GB in the end (delta: -638.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    658 locations, 786 edges
  - StatisticsResult: BuchiProgram size
    1524 locations, 2543 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 20 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.4s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.4s. Construction of modules took 2.7s. BÃ¼chi inclusion checks took 0.9s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 965 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1249 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 8256 SDtfs, 7803 SDslu, 15759 SDs, 0 SdLazy, 14571 SolverSat, 1373 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_WX(success_transfer_WXB0)0) ==> ( <>(success_transfer_WXB0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
