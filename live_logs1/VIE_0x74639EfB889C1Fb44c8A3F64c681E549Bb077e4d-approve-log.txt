This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:32:29,581 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:32:29,582 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:32:29,592 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:32:29,593 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:32:29,593 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:32:29,594 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:32:29,597 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:32:29,600 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:32:29,601 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:32:29,603 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:32:29,603 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:32:29,605 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:32:29,606 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:32:29,607 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:32:29,608 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:32:29,608 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:32:29,609 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:32:29,611 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:32:29,612 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:32:29,613 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:32:29,613 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:32:29,615 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:32:29,615 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:32:29,615 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:32:29,616 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:32:29,616 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:32:29,617 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:32:29,617 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:32:29,617 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:32:29,618 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:32:29,618 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:32:29,619 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:32:29,619 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:32:29,620 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:32:29,620 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:32:29,621 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:32:29,621 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:32:29,621 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:32:29,622 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:32:29,622 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:32:29,622 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:32:29,630 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:32:29,630 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:32:29,631 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:32:29,631 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:32:29,631 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:32:29,632 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:32:29,632 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:32:29,632 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:32:29,632 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:32:29,633 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:32:29,633 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:32:29,634 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:32:29,634 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:32:29,654 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:32:29,664 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:32:29,667 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:32:29,668 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:32:29,668 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:32:29,669 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl
[2020-11-25 08:32:29,669 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl'
[2020-11-25 08:32:29,780 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:32:29,781 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:32:29,782 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:32:29,782 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:32:29,782 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:32:29,798 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,800 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,848 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,849 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,881 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,896 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,908 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,923 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:32:29,923 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:32:29,924 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:32:29,926 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:32:29,930 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/1) ...
[2020-11-25 08:32:29,950 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && locked_LockableToken[this] == old(locked_LockableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 08:32:29,959 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && locked_LockableToken[this] == old(locked_LockableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 08:32:29,969 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && locked_LockableToken[this] == old(locked_LockableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 08:32:29,976 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s694 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s694,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-25 08:32:29,979 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s694]==_value_s694 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && locked_LockableToken[this]==( old(locked_LockableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s694,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s694,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[locked_LockableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[locked_LockableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-25 08:32:29,985 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && locked_LockableToken[this] == old(locked_LockableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 08:32:29,985 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:32:30,006 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:32:30 PropertyContainer
[2020-11-25 08:32:30,006 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:32:30,006 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:32:30,006 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:32:30,007 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:32:30,007 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/2) ...
[2020-11-25 08:32:30,008 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:32:30,008 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:32:30,029 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:32:30" (2/2) ...
[2020-11-25 08:32:30,029 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:32:30,029 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:32:30,029 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:32:30,029 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:32:30,030 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/2) ...
[2020-11-25 08:32:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:32:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:32:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:32:30,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:32:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:32:30,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:32:30,086 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:32:30,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:32:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:32:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:32:30,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:32:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,087 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken_NoBaseCtor__success
[2020-11-25 08:32:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken
[2020-11-25 08:32:30,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken
[2020-11-25 08:32:30,088 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256_LockableToken
[2020-11-25 08:32:30,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256_LockableToken
[2020-11-25 08:32:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure locking~address_LockableToken
[2020-11-25 08:32:30,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure locking~address_LockableToken
[2020-11-25 08:32:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseLocking~address~uint256_LockableToken
[2020-11-25 08:32:30,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseLocking~address~uint256_LockableToken
[2020-11-25 08:32:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseLocking~address~uint256_LockableToken
[2020-11-25 08:32:30,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseLocking~address~uint256_LockableToken
[2020-11-25 08:32:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 08:32:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 08:32:30,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 08:32:30,089 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 08:32:30,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 08:32:30,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 08:32:30,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 08:32:30,090 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 08:32:30,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-25 08:32:30,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-25 08:32:30,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:32:30,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:32:30,091 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:32:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:32:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:32:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 08:32:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 08:32:30,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 08:32:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 08:32:30,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 08:32:30,092 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 08:32:30,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 08:32:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 08:32:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 08:32:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 08:32:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 08:32:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 08:32:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 08:32:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 08:32:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 08:32:30,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 08:32:30,093 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 08:32:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 08:32:30,094 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE_NoBaseCtor__success
[2020-11-25 08:32:30,094 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE
[2020-11-25 08:32:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE
[2020-11-25 08:32:30,094 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_VIE__success
[2020-11-25 08:32:30,094 INFO  L130     BoogieDeclarations]: Found specification of procedure name_VIE
[2020-11-25 08:32:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_VIE
[2020-11-25 08:32:30,094 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_VIE
[2020-11-25 08:32:30,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_VIE
[2020-11-25 08:32:30,094 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_VIE
[2020-11-25 08:32:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_VIE
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIE
[2020-11-25 08:32:30,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIE
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:32:30,095 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_LockableToken
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_LockableToken
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:32:30,096 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIE
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:32:30,097 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,098 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken_NoBaseCtor__fail
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken__success
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure LockableToken_LockableToken__fail
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256_LockableToken__success
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256_LockableToken__fail
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure locking~address_LockableToken__success
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure locking~address_LockableToken__fail
[2020-11-25 08:32:30,099 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 08:32:30,100 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-25 08:32:30,101 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 08:32:30,102 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 08:32:30,103 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE_NoBaseCtor__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE__success
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure VIE_VIE__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_VIE__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure name_VIE__success
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure name_VIE__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_VIE__success
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_VIE__fail
[2020-11-25 08:32:30,104 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_VIE__success
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_VIE__fail
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIE__success
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIE__fail
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:32:30,105 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:32:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:32:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:32:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:32:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:32:30,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken_NoBaseCtor__fail
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken_NoBaseCtor__success
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken__fail
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure LockableToken_LockableToken__success
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256_LockableToken__fail
[2020-11-25 08:32:30,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256_LockableToken__success
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure locking~address_LockableToken__fail
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure locking~address_LockableToken__success
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseLocking~address~uint256_LockableToken__fail
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseLocking~address~uint256_LockableToken__success
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 08:32:30,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 08:32:30,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:32:30,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:32:30,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE_NoBaseCtor__fail
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE_NoBaseCtor__success
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE__fail
[2020-11-25 08:32:30,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIE_VIE__success
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_VIE__fail
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_VIE__success
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_VIE__fail
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_VIE__success
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_VIE__fail
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_VIE__success
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_VIE__fail
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_VIE__success
[2020-11-25 08:32:30,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIE__fail
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIE__success
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:32:30,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_LockableToken
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_LockableToken
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-25 08:32:30,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIE
[2020-11-25 08:32:30,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:32:30,117 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:32:30,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:32:30,760 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:32:30,836 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:32:30,836 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:32:30,836 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:32:31,093 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:32:31,094 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:32:31,096 INFO  L202        PluginConnector]: Adding new model VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:32:31 BoogieIcfgContainer
[2020-11-25 08:32:31,096 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:32:30" (2/2) ...
[2020-11-25 08:32:31,096 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:32:31,096 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1ecd406b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:32:31, skipping insertion in model container
[2020-11-25 08:32:31,096 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:32:31,096 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:32:31,096 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:32:31,097 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:32:31,097 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/3) ...
[2020-11-25 08:32:31,097 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1bd250ea and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:32:31, skipping insertion in model container
[2020-11-25 08:32:31,098 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:32:30" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:32:31,129 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:32:31 NWAContainer
[2020-11-25 08:32:31,129 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:32:31,129 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:32:31,129 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:32:31,130 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:32:31,131 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:32:31" (3/4) ...
[2020-11-25 08:32:31,132 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@31fc24a2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:32:31, skipping insertion in model container
[2020-11-25 08:32:31,132 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:32:31" (4/4) ...
[2020-11-25 08:32:31,134 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:32:31,137 INFO  L110   BuchiProductObserver]: Initial RCFG 2640 locations, 3709 edges
[2020-11-25 08:32:31,137 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:32:31,146 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:32:33,190 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:32:33,198 INFO  L110   BuchiProductObserver]: BuchiProgram size 6678 locations, 12283 edges
[2020-11-25 08:32:33,199 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:32:33 BoogieIcfgContainer
[2020-11-25 08:32:33,199 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:32:33,199 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:32:33,199 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:32:33,200 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:32:33,201 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:32:33" (1/1) ...
[2020-11-25 08:32:33,327 INFO  L313           BlockEncoder]: Initial Icfg 6678 locations, 12283 edges
[2020-11-25 08:32:33,327 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:32:33,328 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:32:33,328 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:32:33,328 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:32:33,342 INFO  L70    emoveInfeasibleEdges]: Removed 111 edges and 23 locations because of local infeasibility
[2020-11-25 08:32:33,354 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 08:32:33,370 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:32:33,374 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:32:33,379 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:32:33,379 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:32:33,383 INFO  L313           BlockEncoder]: Encoded RCFG 6604 locations, 12096 edges
[2020-11-25 08:32:33,383 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:32:33 BasicIcfg
[2020-11-25 08:32:33,383 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:32:33,384 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:32:33,384 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:32:33,385 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:32:33,386 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:32:33,386 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:32:29" (1/6) ...
[2020-11-25 08:32:33,387 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@52a294da and model type VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:32:33, skipping insertion in model container
[2020-11-25 08:32:33,387 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:32:33,387 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:32:30" (2/6) ...
[2020-11-25 08:32:33,387 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@52a294da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:32:33, skipping insertion in model container
[2020-11-25 08:32:33,387 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:32:33,387 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:32:31" (3/6) ...
[2020-11-25 08:32:33,388 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@52a294da and model type VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:32:33, skipping insertion in model container
[2020-11-25 08:32:33,388 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:32:33,388 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:32:31" (4/6) ...
[2020-11-25 08:32:33,388 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@52a294da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:32:33, skipping insertion in model container
[2020-11-25 08:32:33,388 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:32:33,388 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:32:33" (5/6) ...
[2020-11-25 08:32:33,388 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@52a294da and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:32:33, skipping insertion in model container
[2020-11-25 08:32:33,388 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:32:33,388 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:32:33" (6/6) ...
[2020-11-25 08:32:33,389 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIE_0x74639EfB889C1Fb44c8A3F64c681E549Bb077e4d_approve.bpl_BEv2
[2020-11-25 08:32:33,424 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:32:33,424 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:32:33,424 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:32:33,424 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:32:33,424 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:32:33,424 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:32:33,424 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:32:33,424 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:32:33,424 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:32:33,474 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6604 states.
[2020-11-25 08:32:33,529 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:33,529 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:33,529 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:33,536 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:33,536 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:33,536 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:32:33,536 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6604 states.
[2020-11-25 08:32:33,557 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:33,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:33,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:33,558 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:33,558 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND TRUE   revert
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND TRUE   choice == 20
[L7511]              gas := gas - 21000;
[L7512]  COND FALSE  !(gas >= 0)
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:33,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:33,572 INFO  L82        PathProgramCache]: Analyzing trace with hash 1408784739, now seen corresponding path program 1 times
[2020-11-25 08:32:33,576 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:33,602 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:33,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:32:33,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:33,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:32:33,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:34,001 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:32:34,001 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:32:34,002 INFO  L87              Difference]: Start difference. First operand 6604 states. Second operand 3 states.
[2020-11-25 08:32:34,262 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:34,262 INFO  L93              Difference]: Finished difference Result 3345 states and 3810 transitions.
[2020-11-25 08:32:34,262 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:32:34,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3345 states and 3810 transitions.
[2020-11-25 08:32:34,280 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:34,302 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3345 states to 3341 states and 3802 transitions.
[2020-11-25 08:32:34,303 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:32:34,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 779
[2020-11-25 08:32:34,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3341 states and 3802 transitions.
[2020-11-25 08:32:34,312 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:34,312 INFO  L728         BuchiCegarLoop]: Abstraction has 3341 states and 3802 transitions.
[2020-11-25 08:32:34,326 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3341 states and 3802 transitions.
[2020-11-25 08:32:34,375 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3341 to 3341.
[2020-11-25 08:32:34,376 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3341 states.
[2020-11-25 08:32:34,382 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3341 states to 3341 states and 3802 transitions.
[2020-11-25 08:32:34,383 INFO  L751         BuchiCegarLoop]: Abstraction has 3341 states and 3802 transitions.
[2020-11-25 08:32:34,383 INFO  L631         BuchiCegarLoop]: Abstraction has 3341 states and 3802 transitions.
[2020-11-25 08:32:34,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:32:34,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3341 states and 3802 transitions.
[2020-11-25 08:32:34,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:34,391 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:34,391 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:34,393 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:34,393 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND TRUE   revert
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND TRUE   revert
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND TRUE   _value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3863]              revert := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND TRUE   _value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3863]              revert := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:34,397 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:34,397 INFO  L82        PathProgramCache]: Analyzing trace with hash 2037114063, now seen corresponding path program 1 times
[2020-11-25 08:32:34,398 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:34,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:34,428 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:32:34,428 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:34,428 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:32:34,429 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:34,429 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:32:34,430 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:32:34,430 INFO  L87              Difference]: Start difference. First operand 3341 states and 3802 transitions. cyclomatic complexity: 463 Second operand 4 states.
[2020-11-25 08:32:34,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:34,930 INFO  L93              Difference]: Finished difference Result 4573 states and 5182 transitions.
[2020-11-25 08:32:34,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:32:34,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4573 states and 5182 transitions.
[2020-11-25 08:32:34,947 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:32:34,965 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4573 states to 4441 states and 5034 transitions.
[2020-11-25 08:32:34,965 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1002
[2020-11-25 08:32:34,966 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-25 08:32:34,966 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4441 states and 5034 transitions.
[2020-11-25 08:32:34,973 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:34,973 INFO  L728         BuchiCegarLoop]: Abstraction has 4441 states and 5034 transitions.
[2020-11-25 08:32:34,977 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4441 states and 5034 transitions.
[2020-11-25 08:32:35,010 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4441 to 3353.
[2020-11-25 08:32:35,010 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3353 states.
[2020-11-25 08:32:35,014 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3353 states to 3353 states and 3638 transitions.
[2020-11-25 08:32:35,014 INFO  L751         BuchiCegarLoop]: Abstraction has 3353 states and 3638 transitions.
[2020-11-25 08:32:35,014 INFO  L631         BuchiCegarLoop]: Abstraction has 3353 states and 3638 transitions.
[2020-11-25 08:32:35,014 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:32:35,014 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3353 states and 3638 transitions.
[2020-11-25 08:32:35,021 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:35,021 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:35,021 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:35,026 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:35,026 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND FALSE  !(_value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3866]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3867]              allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3868]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3869]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3870]              __ret_0_ := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND FALSE  !(_value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3866]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3867]              allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3868]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3869]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3870]              __ret_0_ := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:35,035 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:35,035 INFO  L82        PathProgramCache]: Analyzing trace with hash 1653921511, now seen corresponding path program 1 times
[2020-11-25 08:32:35,036 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:35,120 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:35,654 INFO  L134       CoverageAnalysis]: Checked inductivity of 4276 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 4269 trivial. 0 not checked.
[2020-11-25 08:32:35,654 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:35,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 08:32:35,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:35,655 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 08:32:35,655 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 08:32:35,655 INFO  L87              Difference]: Start difference. First operand 3353 states and 3638 transitions. cyclomatic complexity: 287 Second operand 15 states.
[2020-11-25 08:32:38,154 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:38,154 INFO  L93              Difference]: Finished difference Result 3509 states and 3820 transitions.
[2020-11-25 08:32:38,155 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 08:32:38,155 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3509 states and 3820 transitions.
[2020-11-25 08:32:38,163 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:32:38,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3509 states to 3509 states and 3820 transitions.
[2020-11-25 08:32:38,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 848
[2020-11-25 08:32:38,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 848
[2020-11-25 08:32:38,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3509 states and 3820 transitions.
[2020-11-25 08:32:38,178 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:38,178 INFO  L728         BuchiCegarLoop]: Abstraction has 3509 states and 3820 transitions.
[2020-11-25 08:32:38,181 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3509 states and 3820 transitions.
[2020-11-25 08:32:38,210 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3509 to 3475.
[2020-11-25 08:32:38,210 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3475 states.
[2020-11-25 08:32:38,216 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3475 states to 3475 states and 3777 transitions.
[2020-11-25 08:32:38,217 INFO  L751         BuchiCegarLoop]: Abstraction has 3475 states and 3777 transitions.
[2020-11-25 08:32:38,217 INFO  L631         BuchiCegarLoop]: Abstraction has 3475 states and 3777 transitions.
[2020-11-25 08:32:38,217 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:32:38,217 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3475 states and 3777 transitions.
[2020-11-25 08:32:38,228 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:32:38,228 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:38,228 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:38,237 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:38,237 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND TRUE   __exception
[L1719]              __tmp__Balance := Balance;
[L1720]              __tmp__DType := DType;
[L1721]              __tmp__Alloc := Alloc;
[L1722]              __tmp__balance_ADDR := balance_ADDR;
[L1723]              __tmp__M_Ref_int := M_Ref_int;
[L1724]              __tmp__sum_locked0 := sum_locked0;
[L1725]              __tmp__sum_balances1 := sum_balances1;
[L1726]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1727]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1728]              __tmp__sum_allowed2 := sum_allowed2;
[L1729]              __tmp__Length := Length;
[L1730]              __tmp__now := now;
[L1731]              __tmp__owner_Ownable := owner_Ownable;
[L1732]              __tmp__locked_LockableToken := locked_LockableToken;
[L1733]              __tmp__balances_BasicToken := balances_BasicToken;
[L1734]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1735]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1736]              __tmp__name_VIE := name_VIE;
[L1737]              __tmp__symbol_VIE := symbol_VIE;
[L1738]              __tmp__decimals_VIE := decimals_VIE;
[L1739]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1740]              __tmp__holder_VIE := holder_VIE;
[L1741]  CALL        call VIE_VIE__fail(this, msgsender_MSG, msgvalue_MSG);
[L4131]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L4131]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4132]  COND FALSE  !(revert)
[L4135]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3642]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3627]              assume msgsender_MSG != null;
[L3628]              __tmp__Balance[this] := 0;
[L3646]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L4135]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4136]  COND FALSE  !(revert)
[L4139]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L4139]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L4143]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3343]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3314]              assume msgsender_MSG != null;
[L3315]              __tmp__Balance[this] := 0;
[L3316]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3317]              __tmp__sum_balances1[this] := 0;
[L3318]              __tmp__totalSupply__BasicToken[this] := 0;
[L3347]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L4147]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3686]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3642]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3627]              assume msgsender_MSG != null;
[L3628]              __tmp__Balance[this] := 0;
[L3646]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3694]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L3698]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3698]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3699]  COND FALSE  !(revert)
[L3702]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3343]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3314]              assume msgsender_MSG != null;
[L3315]              __tmp__Balance[this] := 0;
[L3316]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3317]              __tmp__sum_balances1[this] := 0;
[L3318]              __tmp__totalSupply__BasicToken[this] := 0;
[L3347]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L3702]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              __tmp__Balance[this] := 0;
[L3669]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3670]              __tmp__sum_allowed2[this] := 0;
[L3706]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3707]  COND FALSE  !(revert)
[L4151]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3498]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3498]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3499]  COND FALSE  !(revert)
[L3502]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3502]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3503]  COND FALSE  !(revert)
[L3506]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3506]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3507]  COND FALSE  !(revert)
[L3510]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3343]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3314]              assume msgsender_MSG != null;
[L3315]              __tmp__Balance[this] := 0;
[L3316]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3317]              __tmp__sum_balances1[this] := 0;
[L3318]              __tmp__totalSupply__BasicToken[this] := 0;
[L3347]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L3510]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3511]  COND FALSE  !(revert)
[L3514]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3483]              assume msgsender_MSG != null;
[L3484]              __tmp__Balance[this] := 0;
[L3514]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3515]  COND FALSE  !(revert)
[L4155]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3978]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L3982]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3642]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3627]              assume msgsender_MSG != null;
[L3628]              __tmp__Balance[this] := 0;
[L3646]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3982]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3983]  COND FALSE  !(revert)
[L3986]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3986]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3987]  COND FALSE  !(revert)
[L3990]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3990]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3991]  COND FALSE  !(revert)
[L3994]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3343]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3314]              assume msgsender_MSG != null;
[L3315]              __tmp__Balance[this] := 0;
[L3316]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3317]              __tmp__sum_balances1[this] := 0;
[L3318]              __tmp__totalSupply__BasicToken[this] := 0;
[L3347]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L3994]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3995]  COND FALSE  !(revert)
[L3998]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3686]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3642]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3642]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3627]              assume msgsender_MSG != null;
[L3628]              __tmp__Balance[this] := 0;
[L3646]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3694]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L3698]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3698]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3699]  COND FALSE  !(revert)
[L3702]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3297]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3282]              assume msgsender_MSG != null;
[L3283]              __tmp__Balance[this] := 0;
[L3297]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3298]  COND FALSE  !(revert)
[L3335]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3339]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3120]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2927]              assume msgsender_MSG != null;
[L2928]              __tmp__Balance[this] := 0;
[L2929]              __tmp__owner_Ownable[this] := null;
[L2931]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2946]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L3120]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3121]  COND FALSE  !(revert)
[L3124]  CALL        call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3101]              assume msgsender_MSG != null;
[L3102]              __tmp__Balance[this] := 0;
[L3103]              __tmp__locked_LockableToken[this] := zeroRefintArr();
[L3104]              __tmp__sum_locked0[this] := 0;
[L3124]  RET         call LockableToken_LockableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3125]  COND FALSE  !(revert)
[L3343]  RET         call LockableToken_LockableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3314]              assume msgsender_MSG != null;
[L3315]              __tmp__Balance[this] := 0;
[L3316]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3317]              __tmp__sum_balances1[this] := 0;
[L3318]              __tmp__totalSupply__BasicToken[this] := 0;
[L3347]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L3702]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              __tmp__Balance[this] := 0;
[L3669]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3670]              __tmp__sum_allowed2[this] := 0;
[L3706]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3707]  COND FALSE  !(revert)
[L3998]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3999]  COND FALSE  !(revert)
[L4002]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3963]              assume msgsender_MSG != null;
[L3964]              __tmp__Balance[this] := 0;
[L4002]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4159]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call VIE_VIE_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              __tmp__Balance[this] := 0;
[L4095]              __tmp__name_VIE[this] := -1016296818;
[L4096]              __tmp__symbol_VIE[this] := 455661269;
[L4097]              __tmp__decimals_VIE[this] := 18;
[L4098]              __tmp__INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4099]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4100]              __tmp__holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4102]              __tmp__totalSupply__BasicToken[this] := __tmp__INITIAL_SUPPLY_VIE[this];
[L4103]              __tmp__sum_balances1[this] := __tmp__sum_balances1[this] - __tmp__balances_BasicToken[this][__tmp__holder_VIE[this]];
[L4104]              __tmp__balances_BasicToken[this][__tmp__holder_VIE[this]] := __tmp__INITIAL_SUPPLY_VIE[this];
[L4105]              __tmp__sum_balances1[this] := __tmp__sum_balances1[this] + __tmp__balances_BasicToken[this][__tmp__holder_VIE[this]];
[L4163]  RET         call VIE_VIE_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L1741]  RET         call VIE_VIE__fail(this, msgsender_MSG, msgvalue_MSG);
[L1742]              assume revert || gas < 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND FALSE  !(_value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3866]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3867]              allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3868]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3869]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3870]              __ret_0_ := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND FALSE  !(choice == 8)
[L7595]  COND FALSE  !(choice == 7)
[L7602]  COND TRUE   choice == 6
[L7603]              gas := gas - 21000;
[L7604]  COND TRUE   gas >= 0
[L7605]              assume _subtractedValue_s811 >= 0 && _subtractedValue_s811 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7606]              assume msgvalue_MSG == 0;
[L7607]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L1493]              havoc __exception;
[L1494]              revert := false;
[L1495]  COND FALSE  !(__exception)
[L1521]  CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L3941]              oldValue_s811 := allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3942]  COND TRUE   _subtractedValue_s811 > oldValue_s811
[L3943]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3944]              allowed_StandardToken[this][msgsender_MSG][_spender_s811] := 0;
[L3945]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3955]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3956]              __ret_0_ := true;
[L1521]  RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L1522]              assume !revert && gas >= 0;
[L7607]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:38,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:38,250 INFO  L82        PathProgramCache]: Analyzing trace with hash -2124236009, now seen corresponding path program 1 times
[2020-11-25 08:32:38,251 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:38,289 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:38,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 4276 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4276 trivial. 0 not checked.
[2020-11-25 08:32:38,601 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:38,601 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:32:38,602 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:38,602 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:32:38,602 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:32:38,602 INFO  L87              Difference]: Start difference. First operand 3475 states and 3777 transitions. cyclomatic complexity: 306 Second operand 4 states.
[2020-11-25 08:32:38,939 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:38,939 INFO  L93              Difference]: Finished difference Result 4297 states and 4847 transitions.
[2020-11-25 08:32:38,940 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:32:38,940 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4297 states and 4847 transitions.
[2020-11-25 08:32:38,951 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 08:32:38,963 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4297 states to 4046 states and 4576 transitions.
[2020-11-25 08:32:38,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1050
[2020-11-25 08:32:38,964 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1050
[2020-11-25 08:32:38,964 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4046 states and 4576 transitions.
[2020-11-25 08:32:38,967 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:38,968 INFO  L728         BuchiCegarLoop]: Abstraction has 4046 states and 4576 transitions.
[2020-11-25 08:32:38,970 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4046 states and 4576 transitions.
[2020-11-25 08:32:39,003 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4046 to 3474.
[2020-11-25 08:32:39,003 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3474 states.
[2020-11-25 08:32:39,006 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3474 states to 3474 states and 3813 transitions.
[2020-11-25 08:32:39,006 INFO  L751         BuchiCegarLoop]: Abstraction has 3474 states and 3813 transitions.
[2020-11-25 08:32:39,006 INFO  L631         BuchiCegarLoop]: Abstraction has 3474 states and 3813 transitions.
[2020-11-25 08:32:39,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:32:39,007 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3474 states and 3813 transitions.
[2020-11-25 08:32:39,010 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:32:39,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:39,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:39,013 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:39,013 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:39,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:39,020 INFO  L82        PathProgramCache]: Analyzing trace with hash -969442087, now seen corresponding path program 1 times
[2020-11-25 08:32:39,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:39,044 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:39,380 INFO  L134       CoverageAnalysis]: Checked inductivity of 4276 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 4269 trivial. 0 not checked.
[2020-11-25 08:32:39,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:39,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 08:32:39,381 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:39,382 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 08:32:39,382 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 08:32:39,382 INFO  L87              Difference]: Start difference. First operand 3474 states and 3813 transitions. cyclomatic complexity: 343 Second operand 14 states.
[2020-11-25 08:32:40,993 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:40,994 INFO  L93              Difference]: Finished difference Result 3558 states and 3936 transitions.
[2020-11-25 08:32:40,994 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 08:32:40,994 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3558 states and 3936 transitions.
[2020-11-25 08:32:41,000 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 08:32:41,008 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3558 states to 3558 states and 3936 transitions.
[2020-11-25 08:32:41,008 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1007
[2020-11-25 08:32:41,008 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1007
[2020-11-25 08:32:41,008 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3558 states and 3936 transitions.
[2020-11-25 08:32:41,011 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:41,011 INFO  L728         BuchiCegarLoop]: Abstraction has 3558 states and 3936 transitions.
[2020-11-25 08:32:41,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3558 states and 3936 transitions.
[2020-11-25 08:32:41,034 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3558 to 3245.
[2020-11-25 08:32:41,034 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3245 states.
[2020-11-25 08:32:41,037 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3245 states to 3245 states and 3528 transitions.
[2020-11-25 08:32:41,037 INFO  L751         BuchiCegarLoop]: Abstraction has 3245 states and 3528 transitions.
[2020-11-25 08:32:41,037 INFO  L631         BuchiCegarLoop]: Abstraction has 3245 states and 3528 transitions.
[2020-11-25 08:32:41,037 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:32:41,037 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3245 states and 3528 transitions.
[2020-11-25 08:32:41,041 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:32:41,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:41,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:41,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:41,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND FALSE  !(_value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3853]              __tmp__sum_allowed2[msgsender_MSG] := __tmp__sum_allowed2[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3854]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3855]              __tmp__sum_allowed2[msgsender_MSG] := __tmp__sum_allowed2[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3856]              __ret_0_ := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND TRUE   choice == 20
[L7511]              gas := gas - 21000;
[L7512]  COND FALSE  !(gas >= 0)
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:41,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:41,049 INFO  L82        PathProgramCache]: Analyzing trace with hash 2128945410, now seen corresponding path program 1 times
[2020-11-25 08:32:41,050 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:41,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:41,350 INFO  L134       CoverageAnalysis]: Checked inductivity of 4276 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4276 trivial. 0 not checked.
[2020-11-25 08:32:41,350 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:41,350 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:32:41,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:41,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:32:41,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:32:41,351 INFO  L87              Difference]: Start difference. First operand 3245 states and 3528 transitions. cyclomatic complexity: 287 Second operand 6 states.
[2020-11-25 08:32:41,739 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:41,739 INFO  L93              Difference]: Finished difference Result 4024 states and 4459 transitions.
[2020-11-25 08:32:41,739 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:32:41,739 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4024 states and 4459 transitions.
[2020-11-25 08:32:41,747 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:32:41,755 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4024 states to 3058 states and 3463 transitions.
[2020-11-25 08:32:41,755 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 612
[2020-11-25 08:32:41,756 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 844
[2020-11-25 08:32:41,756 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3058 states and 3463 transitions.
[2020-11-25 08:32:41,758 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:41,758 INFO  L728         BuchiCegarLoop]: Abstraction has 3058 states and 3463 transitions.
[2020-11-25 08:32:41,760 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3058 states and 3463 transitions.
[2020-11-25 08:32:41,772 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3058 to 2307.
[2020-11-25 08:32:41,772 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2307 states.
[2020-11-25 08:32:41,774 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2307 states to 2307 states and 2513 transitions.
[2020-11-25 08:32:41,774 INFO  L751         BuchiCegarLoop]: Abstraction has 2307 states and 2513 transitions.
[2020-11-25 08:32:41,774 INFO  L631         BuchiCegarLoop]: Abstraction has 2307 states and 2513 transitions.
[2020-11-25 08:32:41,775 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:32:41,775 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2307 states and 2513 transitions.
[2020-11-25 08:32:41,777 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:41,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:41,777 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:41,779 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:41,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND FALSE  !(choice == 8)
[L7595]  COND FALSE  !(choice == 7)
[L7602]  COND TRUE   choice == 6
[L7603]              gas := gas - 21000;
[L7604]  COND TRUE   gas >= 0
[L7605]              assume _subtractedValue_s811 >= 0 && _subtractedValue_s811 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7606]              assume msgvalue_MSG == 0;
[L7607]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L1493]              havoc __exception;
[L1494]              revert := false;
[L1495]  COND FALSE  !(__exception)
[L1521]  CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L3941]              oldValue_s811 := allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3942]  COND TRUE   _subtractedValue_s811 > oldValue_s811
[L3943]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3944]              allowed_StandardToken[this][msgsender_MSG][_spender_s811] := 0;
[L3945]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3955]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3956]              __ret_0_ := true;
[L1521]  RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L1522]              assume !revert && gas >= 0;
[L7607]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L7658]  RET         call CorralChoice_VIE(this);
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND FALSE  !(_value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3866]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3867]              allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3868]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3869]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3870]              __ret_0_ := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND FALSE  !(_value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3866]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3867]              allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3868]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3869]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3870]              __ret_0_ := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:41,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:41,786 INFO  L82        PathProgramCache]: Analyzing trace with hash 1573830428, now seen corresponding path program 1 times
[2020-11-25 08:32:41,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:41,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:42,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 4355 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4355 trivial. 0 not checked.
[2020-11-25 08:32:42,239 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:42,239 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:32:42,239 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:42,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:32:42,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:32:42,240 INFO  L87              Difference]: Start difference. First operand 2307 states and 2513 transitions. cyclomatic complexity: 209 Second operand 7 states.
[2020-11-25 08:32:42,750 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:42,750 INFO  L93              Difference]: Finished difference Result 2340 states and 2545 transitions.
[2020-11-25 08:32:42,750 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:32:42,750 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2340 states and 2545 transitions.
[2020-11-25 08:32:42,754 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:42,759 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2340 states to 2334 states and 2538 transitions.
[2020-11-25 08:32:42,759 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 725
[2020-11-25 08:32:42,759 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 725
[2020-11-25 08:32:42,760 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2334 states and 2538 transitions.
[2020-11-25 08:32:42,761 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:42,761 INFO  L728         BuchiCegarLoop]: Abstraction has 2334 states and 2538 transitions.
[2020-11-25 08:32:42,763 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2334 states and 2538 transitions.
[2020-11-25 08:32:42,773 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2334 to 2299.
[2020-11-25 08:32:42,773 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2299 states.
[2020-11-25 08:32:42,775 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2299 states to 2299 states and 2502 transitions.
[2020-11-25 08:32:42,775 INFO  L751         BuchiCegarLoop]: Abstraction has 2299 states and 2502 transitions.
[2020-11-25 08:32:42,775 INFO  L631         BuchiCegarLoop]: Abstraction has 2299 states and 2502 transitions.
[2020-11-25 08:32:42,775 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:32:42,775 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2299 states and 2502 transitions.
[2020-11-25 08:32:42,777 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:42,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:42,777 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:42,779 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:42,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND FALSE  !(choice == 8)
[L7595]  COND FALSE  !(choice == 7)
[L7602]  COND TRUE   choice == 6
[L7603]              gas := gas - 21000;
[L7604]  COND TRUE   gas >= 0
[L7605]              assume _subtractedValue_s811 >= 0 && _subtractedValue_s811 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7606]              assume msgvalue_MSG == 0;
[L7607]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L1493]              havoc __exception;
[L1494]              revert := false;
[L1495]  COND FALSE  !(__exception)
[L1521]  CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L3941]              oldValue_s811 := allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3942]  COND TRUE   _subtractedValue_s811 > oldValue_s811
[L3943]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3944]              allowed_StandardToken[this][msgsender_MSG][_spender_s811] := 0;
[L3945]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s811];
[L3955]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3956]              __ret_0_ := true;
[L1521]  RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L1522]              assume !revert && gas >= 0;
[L7607]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s811, _subtractedValue_s811);
[L7658]  RET         call CorralChoice_VIE(this);
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND TRUE   choice == 20
[L7511]              gas := gas - 21000;
[L7512]  COND FALSE  !(gas >= 0)
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:42,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:42,785 INFO  L82        PathProgramCache]: Analyzing trace with hash -1670880178, now seen corresponding path program 1 times
[2020-11-25 08:32:42,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:42,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:43,414 INFO  L134       CoverageAnalysis]: Checked inductivity of 4355 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 4348 trivial. 0 not checked.
[2020-11-25 08:32:43,414 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:32:43,414 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 08:32:43,416 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:43,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 08:32:43,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 08:32:43,417 INFO  L87              Difference]: Start difference. First operand 2299 states and 2502 transitions. cyclomatic complexity: 206 Second operand 17 states.
[2020-11-25 08:32:44,895 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:44,895 INFO  L93              Difference]: Finished difference Result 2380 states and 2603 transitions.
[2020-11-25 08:32:44,896 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 08:32:44,896 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2380 states and 2603 transitions.
[2020-11-25 08:32:44,899 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:44,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2380 states to 2380 states and 2603 transitions.
[2020-11-25 08:32:44,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 759
[2020-11-25 08:32:44,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 759
[2020-11-25 08:32:44,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2380 states and 2603 transitions.
[2020-11-25 08:32:44,906 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:44,907 INFO  L728         BuchiCegarLoop]: Abstraction has 2380 states and 2603 transitions.
[2020-11-25 08:32:44,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2380 states and 2603 transitions.
[2020-11-25 08:32:44,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2380 to 2308.
[2020-11-25 08:32:44,919 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2308 states.
[2020-11-25 08:32:44,920 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2308 states to 2308 states and 2511 transitions.
[2020-11-25 08:32:44,920 INFO  L751         BuchiCegarLoop]: Abstraction has 2308 states and 2511 transitions.
[2020-11-25 08:32:44,921 INFO  L631         BuchiCegarLoop]: Abstraction has 2308 states and 2511 transitions.
[2020-11-25 08:32:44,921 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:32:44,921 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2308 states and 2511 transitions.
[2020-11-25 08:32:44,923 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:44,923 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:44,923 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:44,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:44,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != _spender_s694);
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND FALSE  !(__exception)
[L1337]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3862]  COND FALSE  !(_value_s694 != 0 && allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0)
[L3866]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3867]              allowed_StandardToken[this][msgsender_MSG][_spender_s694] := _value_s694;
[L3868]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s694];
[L3869]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3870]              __ret_0_ := true;
[L1337]  RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1338]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s694] == _value_s694) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && locked_LockableToken[this] == old(locked_LockableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:44,931 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:44,931 INFO  L82        PathProgramCache]: Analyzing trace with hash -184859824, now seen corresponding path program 1 times
[2020-11-25 08:32:44,932 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:44,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:32:45,507 INFO  L134       CoverageAnalysis]: Checked inductivity of 4364 backedges. 7 proven. 1 refuted. 0 times theorem prover too weak. 4356 trivial. 0 not checked.
[2020-11-25 08:32:45,507 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:32:45,507 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 08:32:45,507 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:32:45,508 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 08:32:45,508 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=331, Unknown=0, NotChecked=0, Total=380
[2020-11-25 08:32:45,508 INFO  L87              Difference]: Start difference. First operand 2308 states and 2511 transitions. cyclomatic complexity: 206 Second operand 20 states.
[2020-11-25 08:32:47,686 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:32:47,686 INFO  L93              Difference]: Finished difference Result 2416 states and 2658 transitions.
[2020-11-25 08:32:47,686 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 08:32:47,686 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2416 states and 2658 transitions.
[2020-11-25 08:32:47,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:47,695 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2416 states to 2416 states and 2658 transitions.
[2020-11-25 08:32:47,695 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 753
[2020-11-25 08:32:47,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 753
[2020-11-25 08:32:47,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2416 states and 2658 transitions.
[2020-11-25 08:32:47,697 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:32:47,697 INFO  L728         BuchiCegarLoop]: Abstraction has 2416 states and 2658 transitions.
[2020-11-25 08:32:47,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2416 states and 2658 transitions.
[2020-11-25 08:32:47,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2416 to 2350.
[2020-11-25 08:32:47,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2350 states.
[2020-11-25 08:32:47,711 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2350 states to 2350 states and 2565 transitions.
[2020-11-25 08:32:47,711 INFO  L751         BuchiCegarLoop]: Abstraction has 2350 states and 2565 transitions.
[2020-11-25 08:32:47,711 INFO  L631         BuchiCegarLoop]: Abstraction has 2350 states and 2565 transitions.
[2020-11-25 08:32:47,711 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:32:47,711 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2350 states and 2565 transitions.
[2020-11-25 08:32:47,714 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:32:47,714 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:32:47,714 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:32:47,715 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:32:47,715 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7648]              assume null == 0;
[L7649]  CALL        call this := FreshRefGenerator__success();
[L2918]              havoc newRef;
[L2919]              assume Alloc[newRef] == false;
[L2920]              Alloc[newRef] := true;
[L2921]              assume newRef != null;
[L7649]  RET         call this := FreshRefGenerator__success();
[L7650]              assume now >= 0;
[L7651]              assume DType[this] == VIE;
[L7652]              assume msgvalue_MSG == 0;
[L7653]              gas := gas - 53000;
[L7654]  CALL        call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
[L7655]              assume !revert && gas >= 0;
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND FALSE  !(choice == 8)
[L7595]  COND TRUE   choice == 7
[L7596]              gas := gas - 21000;
[L7597]  COND TRUE   gas >= 0
[L7598]              assume _addedValue_s751 >= 0 && _addedValue_s751 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7599]              assume msgvalue_MSG == 0;
[L7600]  CALL        call __ret_0_increaseApproval := increaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
[L1431]              havoc __exception;
[L1432]              revert := false;
[L1433]  COND FALSE  !(__exception)
[L1459]  CALL        call __ret_0_ := increaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
[L3903]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][msgsender_MSG][_spender_s751], _addedValue_s751);
[L3092]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3093]              assert c_s146 >= a_s146;
[L3094]              c_s146 := c_s146;
[L3903]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][msgsender_MSG][_spender_s751], _addedValue_s751);
[L3904]  COND FALSE  !(revert)
[L3907]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s751];
[L3908]              allowed_StandardToken[this][msgsender_MSG][_spender_s751] := __var_15;
[L3909]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s751];
[L3910]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3911]              __ret_0_ := true;
[L1459]  RET         call __ret_0_ := increaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
[L1460]              assume !revert && gas >= 0;
[L7600]  RET         call __ret_0_increaseApproval := increaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
[L7658]  RET         call CorralChoice_VIE(this);
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

Loop:
[L7658]  CALL        call CorralChoice_VIE(this);
[L7446]              havoc msgsender_MSG;
[L7447]              havoc msgvalue_MSG;
[L7448]              havoc choice;
[L7449]              havoc __ret_0_owner;
[L7450]              havoc newOwner_s54;
[L7451]              havoc _spender_s202;
[L7452]              havoc _value_s202;
[L7453]              havoc __ret_0_lock;
[L7454]              havoc _spender_s214;
[L7455]              havoc __ret_0_locking;
[L7456]              havoc _spender_s246;
[L7457]              havoc _addedValue_s246;
[L7458]              havoc __ret_0_increaseLocking;
[L7459]              havoc _spender_s294;
[L7460]              havoc _subtractedValue_s294;
[L7461]              havoc __ret_0_decreaseLocking;
[L7462]              havoc __ret_0_totalSupply;
[L7463]              havoc _owner_s430;
[L7464]              havoc __ret_0_balanceOf;
[L7465]              havoc _to_s418;
[L7466]              havoc _value_s418;
[L7467]              havoc __ret_0_transfer;
[L7468]              havoc _value_s451;
[L7469]              havoc _owner_s710;
[L7470]              havoc _spender_s710;
[L7471]              havoc __ret_0_allowance;
[L7472]              havoc _from_s648;
[L7473]              havoc _to_s648;
[L7474]              havoc _value_s648;
[L7475]              havoc __ret_0_transferFrom;
[L7476]              havoc _spender_s694;
[L7477]              havoc _value_s694;
[L7478]              havoc __ret_0_approve;
[L7479]              havoc _spender_s751;
[L7480]              havoc _addedValue_s751;
[L7481]              havoc __ret_0_increaseApproval;
[L7482]              havoc _spender_s811;
[L7483]              havoc _subtractedValue_s811;
[L7484]              havoc __ret_0_decreaseApproval;
[L7485]              havoc _to_s854;
[L7486]              havoc _amount_s854;
[L7487]              havoc __ret_0_mint;
[L7488]              havoc __ret_0_name;
[L7489]              havoc __ret_0_symbol;
[L7490]              havoc __ret_0_decimals;
[L7491]              havoc __ret_0_INITIAL_SUPPLY;
[L7492]              havoc tmpNow;
[L7493]              havoc gas;
[L7494]              assume gas > 4000000 && gas <= 8000000;
[L7495]              tmpNow := now;
[L7496]              havoc now;
[L7497]              assume now > tmpNow;
[L7498]              assume msgsender_MSG != null;
[L7499]              assume DType[msgsender_MSG] != Ownable;
[L7500]              assume DType[msgsender_MSG] != SafeMath;
[L7501]              assume DType[msgsender_MSG] != LockableToken;
[L7502]              assume DType[msgsender_MSG] != ERC20Basic;
[L7503]              assume DType[msgsender_MSG] != BasicToken;
[L7504]              assume DType[msgsender_MSG] != BurnableToken;
[L7505]              assume DType[msgsender_MSG] != ERC20;
[L7506]              assume DType[msgsender_MSG] != StandardToken;
[L7507]              assume DType[msgsender_MSG] != MintableToken;
[L7508]              assume DType[msgsender_MSG] != VIE;
[L7509]              Alloc[msgsender_MSG] := true;
[L7510]  COND FALSE  !(choice == 20)
[L7516]  COND FALSE  !(choice == 19)
[L7522]  COND FALSE  !(choice == 18)
[L7529]  COND FALSE  !(choice == 17)
[L7535]  COND FALSE  !(choice == 16)
[L7542]  COND FALSE  !(choice == 15)
[L7549]  COND FALSE  !(choice == 14)
[L7555]  COND FALSE  !(choice == 13)
[L7561]  COND FALSE  !(choice == 12)
[L7568]  COND FALSE  !(choice == 11)
[L7575]  COND FALSE  !(choice == 10)
[L7581]  COND FALSE  !(choice == 9)
[L7588]  COND TRUE   choice == 8
[L7589]              gas := gas - 21000;
[L7590]  COND TRUE   gas >= 0
[L7591]              assume _value_s694 >= 0 && _value_s694 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7592]              assume msgvalue_MSG == 0;
[L7593]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L1309]              havoc __exception;
[L1310]              revert := false;
[L1311]  COND TRUE   __exception
[L1312]              __tmp__Balance := Balance;
[L1313]              __tmp__DType := DType;
[L1314]              __tmp__Alloc := Alloc;
[L1315]              __tmp__balance_ADDR := balance_ADDR;
[L1316]              __tmp__M_Ref_int := M_Ref_int;
[L1317]              __tmp__sum_locked0 := sum_locked0;
[L1318]              __tmp__sum_balances1 := sum_balances1;
[L1319]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]              __tmp__sum_allowed2 := sum_allowed2;
[L1322]              __tmp__Length := Length;
[L1323]              __tmp__now := now;
[L1324]              __tmp__owner_Ownable := owner_Ownable;
[L1325]              __tmp__locked_LockableToken := locked_LockableToken;
[L1326]              __tmp__balances_BasicToken := balances_BasicToken;
[L1327]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]              __tmp__name_VIE := name_VIE;
[L1330]              __tmp__symbol_VIE := symbol_VIE;
[L1331]              __tmp__decimals_VIE := decimals_VIE;
[L1332]              __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]              __tmp__holder_VIE := holder_VIE;
[L1334]  CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE   _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]              revert := true;
[L1334]  RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]              assume revert || gas < 0;
[L7593]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L7658]  RET         call CorralChoice_VIE(this);

[2020-11-25 08:32:47,721 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:47,721 INFO  L82        PathProgramCache]: Analyzing trace with hash 848892695, now seen corresponding path program 1 times
[2020-11-25 08:32:47,722 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:47,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:32:47,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:32:48,031 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:48,032 INFO  L82        PathProgramCache]: Analyzing trace with hash 1511315788, now seen corresponding path program 1 times
[2020-11-25 08:32:48,032 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:48,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:32:48,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:32:48,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:32:48,049 INFO  L82        PathProgramCache]: Analyzing trace with hash -851042590, now seen corresponding path program 1 times
[2020-11-25 08:32:48,050 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:32:48,092 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:32:48,139 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
[2020-11-25 08:32:48,559 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 254
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
[2020-11-25 08:32:48,998 WARN  L188               SmtUtils]: Spent 423.00 ms on a formula simplification. DAG size of input: 204 DAG size of output: 204
[2020-11-25 08:32:49,610 WARN  L188               SmtUtils]: Spent 609.00 ms on a formula simplification. DAG size of input: 301 DAG size of output: 263
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 7027 to 14051
[2020-11-25 08:32:49,777 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 165 DAG size of output: 159
[2020-11-25 08:32:49,990 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification that was a NOOP. DAG size: 335
Garbage collection #1: 131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8053 to 16103
[2020-11-25 08:32:50,374 WARN  L188               SmtUtils]: Spent 375.00 ms on a formula simplification. DAG size of input: 272 DAG size of output: 272
[2020-11-25 08:32:50,573 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification that was a NOOP. DAG size: 272
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 08:32:50,715 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 161
[2020-11-25 08:32:50,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 08:32:51,622 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 188
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 08:32:52,463 WARN  L188               SmtUtils]: Spent 790.00 ms on a formula simplification. DAG size of input: 359 DAG size of output: 343
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 08:32:52,951 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 224
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 08:32:53,099 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 317
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 08:32:53,720 WARN  L188               SmtUtils]: Spent 357.00 ms on a formula simplification. DAG size of input: 204 DAG size of output: 204
[2020-11-25 08:32:54,329 WARN  L188               SmtUtils]: Spent 606.00 ms on a formula simplification. DAG size of input: 300 DAG size of output: 263
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 08:32:54,507 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 159
[2020-11-25 08:32:54,696 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification that was a NOOP. DAG size: 335
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 08:32:55,062 WARN  L188               SmtUtils]: Spent 360.00 ms on a formula simplification. DAG size of input: 272 DAG size of output: 272
[2020-11-25 08:32:57,237 WARN  L188               SmtUtils]: Spent 2.17 s on a formula simplification. DAG size of input: 688 DAG size of output: 661
Garbage collection #1: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #2: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #3: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #4: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #5: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #6: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #7: 17077 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17077 to 34147
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
[2020-11-25 08:32:57,676 WARN  L188               SmtUtils]: Spent 406.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 237
[2020-11-25 08:32:58,067 WARN  L188               SmtUtils]: Spent 372.00 ms on a formula simplification that was a NOOP. DAG size: 355
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 08:32:58,643 WARN  L188               SmtUtils]: Spent 561.00 ms on a formula simplification. DAG size of input: 275 DAG size of output: 238
[2020-11-25 08:32:59,272 WARN  L188               SmtUtils]: Spent 627.00 ms on a formula simplification. DAG size of input: 358 DAG size of output: 357
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
[2020-11-25 08:33:00,204 WARN  L188               SmtUtils]: Spent 924.00 ms on a formula simplification. DAG size of input: 353 DAG size of output: 352
[2020-11-25 08:33:00,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:33:00,348 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:33:00,368 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:33:00 BasicIcfg
[2020-11-25 08:33:00,368 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:33:00,369 INFO  L168              Benchmark]: Toolchain (without parser) took 30588.13 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.4 GB). Free memory was 929.8 MB in the beginning and 3.2 GB in the end (delta: -2.3 GB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,369 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,370 INFO  L168              Benchmark]: Boogie Preprocessor took 141.59 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,370 INFO  L168              Benchmark]: UtopiaSpecLang took 82.65 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,371 INFO  L168              Benchmark]: Boogie Printer took 22.60 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,371 INFO  L168              Benchmark]: RCFGBuilder took 1066.78 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 897.5 MB in the beginning and 938.5 MB in the end (delta: -41.0 MB). Peak memory consumption was 186.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,371 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.11 ms. Allocated memory is still 1.1 GB. Free memory was 938.5 MB in the beginning and 935.1 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,372 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2069.37 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 195.0 MB). Free memory was 935.1 MB in the beginning and 1.1 GB in the end (delta: -187.8 MB). Peak memory consumption was 510.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,372 INFO  L168              Benchmark]: BlockEncodingV2 took 184.31 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 100.7 MB). Peak memory consumption was 100.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,372 INFO  L168              Benchmark]: BuchiAutomizer took 26984.82 ms. Allocated memory was 1.3 GB in the beginning and 3.5 GB in the end (delta: 2.2 GB). Free memory was 1.0 GB in the beginning and 3.2 GB in the end (delta: -2.2 GB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
[2020-11-25 08:33:00,376 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6678 locations, 12283 edges
  - StatisticsResult: Encoded RCFG
    6604 locations, 12096 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 141.59 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 82.65 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.60 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1066.78 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 897.5 MB in the beginning and 938.5 MB in the end (delta: -41.0 MB). Peak memory consumption was 186.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.11 ms. Allocated memory is still 1.1 GB. Free memory was 938.5 MB in the beginning and 935.1 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2069.37 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 195.0 MB). Free memory was 935.1 MB in the beginning and 1.1 GB in the end (delta: -187.8 MB). Peak memory consumption was 510.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 184.31 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 100.7 MB). Peak memory consumption was 100.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 26984.82 ms. Allocated memory was 1.3 GB in the beginning and 3.5 GB in the end (delta: 2.2 GB). Free memory was 1.0 GB in the beginning and 3.2 GB in the end (delta: -2.2 GB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2640 locations, 3709 edges
  - StatisticsResult: BuchiProgram size
    6678 locations, 12283 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.9 modules have a trivial ranking function, the largest among these consists of 20 locations. The remainder module has 2350 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 26.8s and 10 iterations.  TraceHistogramMax:20. Analysis of lassos took 16.3s. Construction of modules took 7.1s. BÃ¼chi inclusion checks took 2.6s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 9 MinimizatonAttempts, 2931 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3475 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 29096 SDtfs, 37772 SDslu, 48765 SDs, 0 SdLazy, 112957 SolverSat, 7196 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639950) = (new VIE)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639946});
[L1716]              havoc __exception;
[L1717]              revert := false;
[L1718]  COND FALSE  !(__exception)
[L1744]  CALL        call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4172]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4173]  COND FALSE  !(revert)
[L4176]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4176]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4177]  COND FALSE  !(revert)
[L4180]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4180]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4184]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4188]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4192]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3522]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3522]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3523]  COND FALSE  !(revert)
[L3526]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3526]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3527]  COND FALSE  !(revert)
[L3530]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3530]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]  COND FALSE  !(revert)
[L3534]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3534]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3535]  COND FALSE  !(revert)
[L3538]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3491]              assume msgsender_MSG != null;
[L3492]              Balance[this] := 0;
[L3538]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]  COND FALSE  !(revert)
[L4196]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L4010]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L4014]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4018]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L4018]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4019]  COND FALSE  !(revert)
[L4022]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L4022]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4023]  COND FALSE  !(revert)
[L4026]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L4026]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4027]  COND FALSE  !(revert)
[L4030]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3714]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3654]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3654]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3658]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]              assume msgsender_MSG != null;
[L3636]              Balance[this] := 0;
[L3658]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3659]  COND FALSE  !(revert)
[L3718]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3722]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3722]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3723]  COND FALSE  !(revert)
[L3726]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3726]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3727]  COND FALSE  !(revert)
[L3730]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3355]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3305]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3290]              assume msgsender_MSG != null;
[L3291]              Balance[this] := 0;
[L3305]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3306]  COND FALSE  !(revert)
[L3355]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3356]  COND FALSE  !(revert)
[L3359]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3359]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3360]  COND FALSE  !(revert)
[L3363]  CALL        call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3132]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              Balance[this] := 0;
[L2939]              owner_Ownable[this] := null;
[L2941]              owner_Ownable[this] := msgsender_MSG;
[L2954]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2955]  COND FALSE  !(revert)
[L3132]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3133]  COND FALSE  !(revert)
[L3136]  CALL        call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3111]              assume msgsender_MSG != null;
[L3112]              Balance[this] := 0;
[L3113]              locked_LockableToken[this] := zeroRefintArr();
[L3114]              sum_locked0[this] := 0;
[L3136]  RET         call LockableToken_LockableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3137]  COND FALSE  !(revert)
[L3363]  RET         call LockableToken_LockableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3364]  COND FALSE  !(revert)
[L3367]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3325]              assume msgsender_MSG != null;
[L3326]              Balance[this] := 0;
[L3327]              balances_BasicToken[this] := zeroRefintArr();
[L3328]              sum_balances1[this] := 0;
[L3329]              totalSupply__BasicToken[this] := 0;
[L3367]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3368]  COND FALSE  !(revert)
[L3730]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3731]  COND FALSE  !(revert)
[L3734]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3677]              assume msgsender_MSG != null;
[L3678]              Balance[this] := 0;
[L3679]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3680]              sum_allowed2[this] := 0;
[L3734]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3735]  COND FALSE  !(revert)
[L4030]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4031]  COND FALSE  !(revert)
[L4034]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]              assume msgsender_MSG != null;
[L3972]              Balance[this] := 0;
[L4034]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4035]  COND FALSE  !(revert)
[L4200]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L4204]  CALL        call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4112]              assume msgsender_MSG != null;
[L4113]              Balance[this] := 0;
[L4114]              name_VIE[this] := -1016296818;
[L4115]              symbol_VIE[this] := 455661269;
[L4116]              decimals_VIE[this] := 18;
[L4117]              INITIAL_SUPPLY_VIE[this] := 1899000000000000000000000000;
[L4118]              __var_19 := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4119]              holder_VIE[this] := ConstantToRef(-385189319374310582173179693124046919983126611732);
[L4121]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_VIE[this];
[L4122]              sum_balances1[this] := sum_balances1[this] - balances_BasicToken[this][holder_VIE[this]];
[L4123]              balances_BasicToken[this][holder_VIE[this]] := INITIAL_SUPPLY_VIE[this];
[L4124]              sum_balances1[this] := sum_balances1[this] + balances_BasicToken[this][holder_VIE[this]];
[L4125]              assert { :EventEmitted "Transfer_VIE" } true;
[L4204]  RET         call VIE_VIE_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4205]  COND FALSE  !(revert)
[L1744]  RET         call VIE_VIE__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]              assume !revert && gas >= 0;
[L7654]  RET         call VIE_VIE(this, msgsender_MSG, msgvalue_MSG);
StandardToken(115792089237316195423570985008687907853269984665640564039457584007913129639950).increaseApproval~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639942, _spender : 115792089237316195423570985008687907853269984665640564039457584007913129639947, _addedValue : 115792089237316195423570985008687907853269984665640564039457584007913129639935});
[L1431]              havoc __exception;
[L1432]              revert := false;
[L1433]  COND FALSE  !(__exception)
[L1459]  CALL        call __ret_0_ := increaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
[L3903]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][msgsender_MSG][_spender_s751], _addedValue_s751);
[L3092]              c_s146 := (a_s146 + b_s146) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3093]              assert c_s146 >= a_s146;
[L3094]              c_s146 := c_s146;
[L3903]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][msgsender_MSG][_spender_s751], _addedValue_s751);
[L3904]  COND FALSE  !(revert)
[L3907]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s751];
[L3908]              allowed_StandardToken[this][msgsender_MSG][_spender_s751] := __var_15;
[L3909]              sum_allowed2[msgsender_MSG] := sum_allowed2[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s751];
[L3910]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3911]              __ret_0_ := true;
[L1459]  RET         call __ret_0_ := increaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
[L1460]              assume !revert && gas >= 0;
[L7600]  RET         call __ret_0_increaseApproval := increaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s751, _addedValue_s751);
StandardToken(115792089237316195423570985008687907853269984665640564039457584007913129639950).approve~address~uint256.gas(3979003)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639942, _spender : 115792089237316195423570985008687907853269984665640564039457584007913129639947, _value : 1});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                call_approve_StandardToken0 := true;
[L3]                call_approve_StandardToken0 := false;
[L3]                revert := revert_hold;
[L1309]             havoc __exception;
[L1310]             revert := false;
[L1311]  COND TRUE  __exception
[L1312]             __tmp__Balance := Balance;
[L1313]             __tmp__DType := DType;
[L1314]             __tmp__Alloc := Alloc;
[L1315]             __tmp__balance_ADDR := balance_ADDR;
[L1316]             __tmp__M_Ref_int := M_Ref_int;
[L1317]             __tmp__sum_locked0 := sum_locked0;
[L1318]             __tmp__sum_balances1 := sum_balances1;
[L1319]             __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]             __tmp__sum_allowed2 := sum_allowed2;
[L1322]             __tmp__Length := Length;
[L1323]             __tmp__now := now;
[L1324]             __tmp__owner_Ownable := owner_Ownable;
[L1325]             __tmp__locked_LockableToken := locked_LockableToken;
[L1326]             __tmp__balances_BasicToken := balances_BasicToken;
[L1327]             __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]             __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]             __tmp__name_VIE := name_VIE;
[L1330]             __tmp__symbol_VIE := symbol_VIE;
[L1331]             __tmp__decimals_VIE := decimals_VIE;
[L1332]             __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]             __tmp__holder_VIE := holder_VIE;
[L1334]  CALL       call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE  _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]             revert := true;
[L1334]  RET        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]             assume revert || gas < 0;
[L7593]  RET        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);

Loop:
StandardToken(115792089237316195423570985008687907853269984665640564039457584007913129639950).approve~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639942, _spender : 115792089237316195423570985008687907853269984665640564039457584007913129639947, _value : 1});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != _spender_s694;
[L3]                call_approve_StandardToken0 := true;
[L3]                call_approve_StandardToken0 := false;
[L3]                revert := revert_hold;
[L1309]             havoc __exception;
[L1310]             revert := false;
[L1311]  COND TRUE  __exception
[L1312]             __tmp__Balance := Balance;
[L1313]             __tmp__DType := DType;
[L1314]             __tmp__Alloc := Alloc;
[L1315]             __tmp__balance_ADDR := balance_ADDR;
[L1316]             __tmp__M_Ref_int := M_Ref_int;
[L1317]             __tmp__sum_locked0 := sum_locked0;
[L1318]             __tmp__sum_balances1 := sum_balances1;
[L1319]             __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1320]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1321]             __tmp__sum_allowed2 := sum_allowed2;
[L1322]             __tmp__Length := Length;
[L1323]             __tmp__now := now;
[L1324]             __tmp__owner_Ownable := owner_Ownable;
[L1325]             __tmp__locked_LockableToken := locked_LockableToken;
[L1326]             __tmp__balances_BasicToken := balances_BasicToken;
[L1327]             __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1328]             __tmp__allowed_StandardToken := allowed_StandardToken;
[L1329]             __tmp__name_VIE := name_VIE;
[L1330]             __tmp__symbol_VIE := symbol_VIE;
[L1331]             __tmp__decimals_VIE := decimals_VIE;
[L1332]             __tmp__INITIAL_SUPPLY_VIE := INITIAL_SUPPLY_VIE;
[L1333]             __tmp__holder_VIE := holder_VIE;
[L1334]  CALL       call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L3849]  COND TRUE  _value_s694 != 0 && __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s694] != 0
[L3850]             revert := true;
[L1334]  RET        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);
[L1335]             assume revert || gas < 0;
[L7593]  RET        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s694, _value_s694);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
